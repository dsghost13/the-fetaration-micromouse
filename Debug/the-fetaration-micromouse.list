
the-fetaration-micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004384  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004490  08004490  00005490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d0  080044d0  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080044d0  080044d0  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080044d0  080044d0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080044d0  080044d0  000054d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080044d8  080044d8  000054d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080044e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  2000005c  0800453c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  0800453c  0000684c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001062e  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f0  00000000  00000000  000166b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00018ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3f  00000000  00000000  00019908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c434  00000000  00000000  0001a347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd87  00000000  00000000  0003677b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000999a7  00000000  00000000  00044502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddea9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e8c  00000000  00000000  000ddeec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e1d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004478 	.word	0x08004478

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004478 	.word	0x08004478

0800014c <_ZN8EncodersC1Ev>:
	class Encoders;
	extern Encoders encoders;

	class Encoders {
	public:
		Encoders() : m_enc_left(0), m_enc_right(0), m_prev_enc_left(0), m_prev_enc_right(0), m_left_distance(0.0), m_right_distance(0.0) {}
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2200      	movs	r2, #0
 800015e:	605a      	str	r2, [r3, #4]
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2200      	movs	r2, #0
 8000164:	811a      	strh	r2, [r3, #8]
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	815a      	strh	r2, [r3, #10]
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2200      	movs	r2, #0
 8000170:	819a      	strh	r2, [r3, #12]
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	81da      	strh	r2, [r3, #14]
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f04f 0200 	mov.w	r2, #0
 800017e:	611a      	str	r2, [r3, #16]
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	f04f 0200 	mov.w	r2, #0
 8000186:	615a      	str	r2, [r3, #20]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4618      	mov	r0, r3
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <_ZN8Encoders6updateEP17TIM_HandleTypeDef>:

		uint32_t left_count = 0;
		uint32_t right_count = 0;

		void update(TIM_HandleTypeDef* htim) {
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
 800019c:	6039      	str	r1, [r7, #0]
		    if (htim->Instance == TIM3) {
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a0c      	ldr	r2, [pc, #48]	@ (80001d4 <_ZN8Encoders6updateEP17TIM_HandleTypeDef+0x40>)
 80001a4:	4293      	cmp	r3, r2
 80001a6:	d105      	bne.n	80001b4 <_ZN8Encoders6updateEP17TIM_HandleTypeDef+0x20>
		        left_count = __HAL_TIM_GET_COUNTER(htim);
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	601a      	str	r2, [r3, #0]
		    } else if (htim->Instance == TIM4) {
		        right_count = __HAL_TIM_GET_COUNTER(htim);
		    }
		}
 80001b2:	e009      	b.n	80001c8 <_ZN8Encoders6updateEP17TIM_HandleTypeDef+0x34>
		    } else if (htim->Instance == TIM4) {
 80001b4:	683b      	ldr	r3, [r7, #0]
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a07      	ldr	r2, [pc, #28]	@ (80001d8 <_ZN8Encoders6updateEP17TIM_HandleTypeDef+0x44>)
 80001ba:	4293      	cmp	r3, r2
 80001bc:	d104      	bne.n	80001c8 <_ZN8Encoders6updateEP17TIM_HandleTypeDef+0x34>
		        right_count = __HAL_TIM_GET_COUNTER(htim);
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	605a      	str	r2, [r3, #4]
		}
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	40000400 	.word	0x40000400
 80001d8:	40000800 	.word	0x40000800

080001dc <_ZN8Encoders10initializeEv>:

		void initialize() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
			HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80001e4:	213c      	movs	r1, #60	@ 0x3c
 80001e6:	4807      	ldr	r0, [pc, #28]	@ (8000204 <_ZN8Encoders10initializeEv+0x28>)
 80001e8:	f003 f946 	bl	8003478 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80001ec:	213c      	movs	r1, #60	@ 0x3c
 80001ee:	4806      	ldr	r0, [pc, #24]	@ (8000208 <_ZN8Encoders10initializeEv+0x2c>)
 80001f0:	f003 f942 	bl	8003478 <HAL_TIM_Encoder_Start>
			reset();
 80001f4:	6878      	ldr	r0, [r7, #4]
 80001f6:	f000 f809 	bl	800020c <_ZN8Encoders5resetEv>
		}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	200000f0 	.word	0x200000f0
 8000208:	20000138 	.word	0x20000138

0800020c <_ZN8Encoders5resetEv>:

		void reset() {
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000214:	4b10      	ldr	r3, [pc, #64]	@ (8000258 <_ZN8Encoders5resetEv+0x4c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2200      	movs	r2, #0
 800021a:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 800021c:	4b0f      	ldr	r3, [pc, #60]	@ (800025c <_ZN8Encoders5resetEv+0x50>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2200      	movs	r2, #0
 8000222:	625a      	str	r2, [r3, #36]	@ 0x24

			m_enc_left = 0;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2200      	movs	r2, #0
 8000228:	811a      	strh	r2, [r3, #8]
			m_enc_right = 0;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2200      	movs	r2, #0
 800022e:	815a      	strh	r2, [r3, #10]
			m_prev_enc_left = 0;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2200      	movs	r2, #0
 8000234:	819a      	strh	r2, [r3, #12]
			m_prev_enc_right = 0;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	81da      	strh	r2, [r3, #14]
			m_left_distance = 0;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f04f 0200 	mov.w	r2, #0
 8000242:	611a      	str	r2, [r3, #16]
			m_right_distance = 0;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f04f 0200 	mov.w	r2, #0
 800024a:	615a      	str	r2, [r3, #20]
		}
 800024c:	bf00      	nop
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	200000f0 	.word	0x200000f0
 800025c:	20000138 	.word	0x20000138

08000260 <_ZN5CoordC1Eii>:

struct Coord {
    int x;
    int y;

    Coord(int x = 0, int y = 0) : x(x), y(y) {}
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	68ba      	ldr	r2, [r7, #8]
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	4618      	mov	r0, r3
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <_ZN5MouseC1Ev>:
struct Mouse {
    Coord pos;
    Direction dir;
    bool search_mode;

    Mouse() : pos(0, 0), dir(NORTH), search_mode(true) {}
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ffe4 	bl	8000260 <_ZN5CoordC1Eii>
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2200      	movs	r2, #0
 800029c:	721a      	strb	r2, [r3, #8]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2201      	movs	r2, #1
 80002a2:	725a      	strb	r2, [r3, #9]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4618      	mov	r0, r3
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}

080002ae <_ZN7Sensors6updateEv>:
    DIST_FR
} dist_t;

class Sensors {
public:
    void update() {
 80002ae:	b580      	push	{r7, lr}
 80002b0:	b082      	sub	sp, #8
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
        m_dist_L = measure_dist(DIST_L);
 80002b6:	2100      	movs	r1, #0
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 f8b1 	bl	8000420 <_ZN7Sensors12measure_distE6dist_t>
 80002be:	4603      	mov	r3, r0
 80002c0:	461a      	mov	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	801a      	strh	r2, [r3, #0]
        m_dist_R = measure_dist(DIST_R);
 80002c6:	2101      	movs	r1, #1
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	f000 f8a9 	bl	8000420 <_ZN7Sensors12measure_distE6dist_t>
 80002ce:	4603      	mov	r3, r0
 80002d0:	461a      	mov	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	805a      	strh	r2, [r3, #2]
        m_dist_FR = measure_dist(DIST_FR);
 80002d6:	2103      	movs	r1, #3
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f000 f8a1 	bl	8000420 <_ZN7Sensors12measure_distE6dist_t>
 80002de:	4603      	mov	r3, r0
 80002e0:	461a      	mov	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	80da      	strh	r2, [r3, #6]
        m_dist_FL = measure_dist(DIST_FL);
 80002e6:	2102      	movs	r1, #2
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f000 f899 	bl	8000420 <_ZN7Sensors12measure_distE6dist_t>
 80002ee:	4603      	mov	r3, r0
 80002f0:	461a      	mov	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	809a      	strh	r2, [r3, #4]
    }
 80002f6:	bf00      	nop
 80002f8:	3708      	adds	r7, #8
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <_ZN7Sensors15ADC1_Select_CH4Ev>:
    uint16_t m_dist_L;
    uint16_t m_dist_R;
    uint16_t m_dist_FL;
    uint16_t m_dist_FR;

    static void ADC1_Select_CH4(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
    	ADC_ChannelConfTypeDef sConfig = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]

    	sConfig.Channel = ADC_CHANNEL_4;
 8000310:	2304      	movs	r3, #4
 8000312:	607b      	str	r3, [r7, #4]
    	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000314:	2301      	movs	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
    	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000318:	2301      	movs	r3, #1
 800031a:	60fb      	str	r3, [r7, #12]
    	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4619      	mov	r1, r3
 8000320:	4808      	ldr	r0, [pc, #32]	@ (8000344 <_ZN7Sensors15ADC1_Select_CH4Ev+0x44>)
 8000322:	f001 fd67 	bl	8001df4 <HAL_ADC_ConfigChannel>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	bf14      	ite	ne
 800032c:	2301      	movne	r3, #1
 800032e:	2300      	moveq	r3, #0
 8000330:	b2db      	uxtb	r3, r3
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <_ZN7Sensors15ADC1_Select_CH4Ev+0x3a>
    	{
    		Error_Handler();
 8000336:	f000 fcd1 	bl	8000cdc <Error_Handler>
    	}
    }
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000078 	.word	0x20000078

08000348 <_ZN7Sensors15ADC1_Select_CH5Ev>:

    static void ADC1_Select_CH5(void) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
    	ADC_ChannelConfTypeDef sConfig = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]

    	sConfig.Channel = ADC_CHANNEL_5;
 8000358:	2305      	movs	r3, #5
 800035a:	607b      	str	r3, [r7, #4]
    	sConfig.Rank = ADC_REGULAR_RANK_1;
 800035c:	2301      	movs	r3, #1
 800035e:	60bb      	str	r3, [r7, #8]
    	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000360:	2301      	movs	r3, #1
 8000362:	60fb      	str	r3, [r7, #12]
    	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	4808      	ldr	r0, [pc, #32]	@ (800038c <_ZN7Sensors15ADC1_Select_CH5Ev+0x44>)
 800036a:	f001 fd43 	bl	8001df4 <HAL_ADC_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	bf14      	ite	ne
 8000374:	2301      	movne	r3, #1
 8000376:	2300      	moveq	r3, #0
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <_ZN7Sensors15ADC1_Select_CH5Ev+0x3a>
    	{
    		Error_Handler();
 800037e:	f000 fcad 	bl	8000cdc <Error_Handler>
    	}
    }
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000078 	.word	0x20000078

08000390 <_ZN7Sensors15ADC1_Select_CH8Ev>:

    static void ADC1_Select_CH8(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
    	ADC_ChannelConfTypeDef sConfig = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]

    	sConfig.Channel = ADC_CHANNEL_8;
 80003a0:	2308      	movs	r3, #8
 80003a2:	607b      	str	r3, [r7, #4]
    	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a4:	2301      	movs	r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
    	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80003a8:	2301      	movs	r3, #1
 80003aa:	60fb      	str	r3, [r7, #12]
    	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4619      	mov	r1, r3
 80003b0:	4808      	ldr	r0, [pc, #32]	@ (80003d4 <_ZN7Sensors15ADC1_Select_CH8Ev+0x44>)
 80003b2:	f001 fd1f 	bl	8001df4 <HAL_ADC_ConfigChannel>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	bf14      	ite	ne
 80003bc:	2301      	movne	r3, #1
 80003be:	2300      	moveq	r3, #0
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <_ZN7Sensors15ADC1_Select_CH8Ev+0x3a>
    	{
    		Error_Handler();
 80003c6:	f000 fc89 	bl	8000cdc <Error_Handler>
    	}
    }
 80003ca:	bf00      	nop
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000078 	.word	0x20000078

080003d8 <_ZN7Sensors15ADC1_Select_CH9Ev>:

    static void ADC1_Select_CH9(void) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
    	ADC_ChannelConfTypeDef sConfig = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]

    	sConfig.Channel = ADC_CHANNEL_9;
 80003e8:	2309      	movs	r3, #9
 80003ea:	607b      	str	r3, [r7, #4]
    	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
    	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80003f0:	2301      	movs	r3, #1
 80003f2:	60fb      	str	r3, [r7, #12]
    	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	4619      	mov	r1, r3
 80003f8:	4808      	ldr	r0, [pc, #32]	@ (800041c <_ZN7Sensors15ADC1_Select_CH9Ev+0x44>)
 80003fa:	f001 fcfb 	bl	8001df4 <HAL_ADC_ConfigChannel>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	bf14      	ite	ne
 8000404:	2301      	movne	r3, #1
 8000406:	2300      	moveq	r3, #0
 8000408:	b2db      	uxtb	r3, r3
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <_ZN7Sensors15ADC1_Select_CH9Ev+0x3a>
    	{
    		Error_Handler();
 800040e:	f000 fc65 	bl	8000cdc <Error_Handler>
    	}
    }
 8000412:	bf00      	nop
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000078 	.word	0x20000078

08000420 <_ZN7Sensors12measure_distE6dist_t>:

    uint16_t measure_dist(dist_t dist) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	460b      	mov	r3, r1
 800042a:	70fb      	strb	r3, [r7, #3]
        GPIO_TypeDef* emitter_port;
        uint16_t emitter_pin;
        GPIO_TypeDef* receiver_port;
        uint16_t receiver_pin;

        switch (dist) {
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	2b03      	cmp	r3, #3
 8000430:	d839      	bhi.n	80004a6 <_ZN7Sensors12measure_distE6dist_t+0x86>
 8000432:	a201      	add	r2, pc, #4	@ (adr r2, 8000438 <_ZN7Sensors12measure_distE6dist_t+0x18>)
 8000434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000438:	08000449 	.word	0x08000449
 800043c:	08000461 	.word	0x08000461
 8000440:	08000479 	.word	0x08000479
 8000444:	08000491 	.word	0x08000491
            case DIST_L:
                emitter_port    = EMIT_L_GPIO_Port;
 8000448:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <_ZN7Sensors12measure_distE6dist_t+0xcc>)
 800044a:	617b      	str	r3, [r7, #20]
                emitter_pin     = EMIT_L_Pin;
 800044c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000450:	827b      	strh	r3, [r7, #18]
                receiver_port   = RECIV_L_GPIO_Port;
 8000452:	4b26      	ldr	r3, [pc, #152]	@ (80004ec <_ZN7Sensors12measure_distE6dist_t+0xcc>)
 8000454:	60fb      	str	r3, [r7, #12]
                receiver_pin    = RECIV_L_Pin;
 8000456:	2301      	movs	r3, #1
 8000458:	817b      	strh	r3, [r7, #10]
                ADC1_Select_CH8();
 800045a:	f7ff ff99 	bl	8000390 <_ZN7Sensors15ADC1_Select_CH8Ev>
                break;
 800045e:	e024      	b.n	80004aa <_ZN7Sensors12measure_distE6dist_t+0x8a>
            case DIST_R:
                emitter_port    = EMIT_R_GPIO_Port;
 8000460:	4b22      	ldr	r3, [pc, #136]	@ (80004ec <_ZN7Sensors12measure_distE6dist_t+0xcc>)
 8000462:	617b      	str	r3, [r7, #20]
                emitter_pin     = EMIT_R_Pin;
 8000464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000468:	827b      	strh	r3, [r7, #18]
                receiver_port   = RECIV_R_GPIO_Port;
 800046a:	4b21      	ldr	r3, [pc, #132]	@ (80004f0 <_ZN7Sensors12measure_distE6dist_t+0xd0>)
 800046c:	60fb      	str	r3, [r7, #12]
                receiver_pin    = RECIV_R_Pin;
 800046e:	2320      	movs	r3, #32
 8000470:	817b      	strh	r3, [r7, #10]
                ADC1_Select_CH5();
 8000472:	f7ff ff69 	bl	8000348 <_ZN7Sensors15ADC1_Select_CH5Ev>
                break;
 8000476:	e018      	b.n	80004aa <_ZN7Sensors12measure_distE6dist_t+0x8a>
            case DIST_FL:
                emitter_port    = EMIT_FL_GPIO_Port;
 8000478:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <_ZN7Sensors12measure_distE6dist_t+0xcc>)
 800047a:	617b      	str	r3, [r7, #20]
                emitter_pin     = EMIT_FL_Pin;
 800047c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000480:	827b      	strh	r3, [r7, #18]
                receiver_port   = RECIV_FL_GPIO_Port;
 8000482:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <_ZN7Sensors12measure_distE6dist_t+0xcc>)
 8000484:	60fb      	str	r3, [r7, #12]
                receiver_pin    = RECIV_FL_Pin;
 8000486:	2302      	movs	r3, #2
 8000488:	817b      	strh	r3, [r7, #10]
                ADC1_Select_CH9();
 800048a:	f7ff ffa5 	bl	80003d8 <_ZN7Sensors15ADC1_Select_CH9Ev>
                break;
 800048e:	e00c      	b.n	80004aa <_ZN7Sensors12measure_distE6dist_t+0x8a>
            case DIST_FR:
                emitter_port    = EMIT_FR_GPIO_Port;
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <_ZN7Sensors12measure_distE6dist_t+0xcc>)
 8000492:	617b      	str	r3, [r7, #20]
                emitter_pin     = EMIT_FR_Pin;
 8000494:	2320      	movs	r3, #32
 8000496:	827b      	strh	r3, [r7, #18]
                receiver_port   = RECIV_FR_GPIO_Port;
 8000498:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <_ZN7Sensors12measure_distE6dist_t+0xd0>)
 800049a:	60fb      	str	r3, [r7, #12]
                receiver_pin    = RECIV_FR_Pin;
 800049c:	2310      	movs	r3, #16
 800049e:	817b      	strh	r3, [r7, #10]
                ADC1_Select_CH4();
 80004a0:	f7ff ff2e 	bl	8000300 <_ZN7Sensors15ADC1_Select_CH4Ev>
                break;
 80004a4:	e001      	b.n	80004aa <_ZN7Sensors12measure_distE6dist_t+0x8a>
            default:
                return 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	e01c      	b.n	80004e4 <_ZN7Sensors12measure_distE6dist_t+0xc4>
        }

        HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 80004aa:	8a7b      	ldrh	r3, [r7, #18]
 80004ac:	2201      	movs	r2, #1
 80004ae:	4619      	mov	r1, r3
 80004b0:	6978      	ldr	r0, [r7, #20]
 80004b2:	f002 f8c5 	bl	8002640 <HAL_GPIO_WritePin>
        //HAL_Delay(5);

        HAL_ADC_Start(&hadc1);
 80004b6:	480f      	ldr	r0, [pc, #60]	@ (80004f4 <_ZN7Sensors12measure_distE6dist_t+0xd4>)
 80004b8:	f001 fab0 	bl	8001a1c <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004bc:	f04f 31ff 	mov.w	r1, #4294967295
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <_ZN7Sensors12measure_distE6dist_t+0xd4>)
 80004c2:	f001 fb85 	bl	8001bd0 <HAL_ADC_PollForConversion>
        uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 80004c6:	480b      	ldr	r0, [pc, #44]	@ (80004f4 <_ZN7Sensors12measure_distE6dist_t+0xd4>)
 80004c8:	f001 fc88 	bl	8001ddc <HAL_ADC_GetValue>
 80004cc:	4603      	mov	r3, r0
 80004ce:	813b      	strh	r3, [r7, #8]
        HAL_ADC_Stop(&hadc1);
 80004d0:	4808      	ldr	r0, [pc, #32]	@ (80004f4 <_ZN7Sensors12measure_distE6dist_t+0xd4>)
 80004d2:	f001 fb51 	bl	8001b78 <HAL_ADC_Stop>

        HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 80004d6:	8a7b      	ldrh	r3, [r7, #18]
 80004d8:	2200      	movs	r2, #0
 80004da:	4619      	mov	r1, r3
 80004dc:	6978      	ldr	r0, [r7, #20]
 80004de:	f002 f8af 	bl	8002640 <HAL_GPIO_WritePin>

        return adc_val;
 80004e2:	893b      	ldrh	r3, [r7, #8]
    }
 80004e4:	4618      	mov	r0, r3
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40010c00 	.word	0x40010c00
 80004f0:	40010800 	.word	0x40010800
 80004f4:	20000078 	.word	0x20000078

080004f8 <_ZN4Maze14set_goal_cellsEb>:
            }
        }
        return false;
    }

	void set_goal_cells(bool backtracking = false) {
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b08d      	sub	sp, #52	@ 0x34
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	70fb      	strb	r3, [r7, #3]
		if (backtracking) {
 8000504:	78fb      	ldrb	r3, [r7, #3]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d023      	beq.n	8000552 <_ZN4Maze14set_goal_cellsEb+0x5a>
			goalPos = new Coord[1];
 800050a:	2008      	movs	r0, #8
 800050c:	f003 fe0b 	bl	8004126 <_Znaj>
 8000510:	4603      	mov	r3, r0
 8000512:	461e      	mov	r6, r3
 8000514:	4635      	mov	r5, r6
 8000516:	2400      	movs	r4, #0
 8000518:	e006      	b.n	8000528 <_ZN4Maze14set_goal_cellsEb+0x30>
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	4628      	mov	r0, r5
 8000520:	f7ff fe9e 	bl	8000260 <_ZN5CoordC1Eii>
 8000524:	3c01      	subs	r4, #1
 8000526:	3508      	adds	r5, #8
 8000528:	2c00      	cmp	r4, #0
 800052a:	daf6      	bge.n	800051a <_ZN4Maze14set_goal_cellsEb+0x22>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	601e      	str	r6, [r3, #0]
			goalPos[0] = Coord(0, 0);
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff fe91 	bl	8000260 <_ZN5CoordC1Eii>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	f107 0308 	add.w	r3, r7, #8
 8000548:	e893 0003 	ldmia.w	r3, {r0, r1}
 800054c:	e882 0003 	stmia.w	r2, {r0, r1}
			goalPos[0] = Coord(7, 7);
			goalPos[1] = Coord(7, 8);
			goalPos[2] = Coord(8, 7);
			goalPos[3] = Coord(8, 8);
		}
	}
 8000550:	e055      	b.n	80005fe <_ZN4Maze14set_goal_cellsEb+0x106>
			goalPos = new Coord[4];
 8000552:	2020      	movs	r0, #32
 8000554:	f003 fde7 	bl	8004126 <_Znaj>
 8000558:	4603      	mov	r3, r0
 800055a:	461e      	mov	r6, r3
 800055c:	4635      	mov	r5, r6
 800055e:	2403      	movs	r4, #3
 8000560:	e006      	b.n	8000570 <_ZN4Maze14set_goal_cellsEb+0x78>
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	4628      	mov	r0, r5
 8000568:	f7ff fe7a 	bl	8000260 <_ZN5CoordC1Eii>
 800056c:	3c01      	subs	r4, #1
 800056e:	3508      	adds	r5, #8
 8000570:	2c00      	cmp	r4, #0
 8000572:	daf6      	bge.n	8000562 <_ZN4Maze14set_goal_cellsEb+0x6a>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	601e      	str	r6, [r3, #0]
			goalPos[0] = Coord(7, 7);
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	2207      	movs	r2, #7
 800057e:	2107      	movs	r1, #7
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff fe6d 	bl	8000260 <_ZN5CoordC1Eii>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000594:	e882 0003 	stmia.w	r2, {r0, r1}
			goalPos[1] = Coord(7, 8);
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	2208      	movs	r2, #8
 800059e:	2107      	movs	r1, #7
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe5d 	bl	8000260 <_ZN5CoordC1Eii>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	3308      	adds	r3, #8
 80005ac:	461a      	mov	r2, r3
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005b6:	e882 0003 	stmia.w	r2, {r0, r1}
			goalPos[2] = Coord(8, 7);
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2207      	movs	r2, #7
 80005c0:	2108      	movs	r1, #8
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe4c 	bl	8000260 <_ZN5CoordC1Eii>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3310      	adds	r3, #16
 80005ce:	461a      	mov	r2, r3
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005d8:	e882 0003 	stmia.w	r2, {r0, r1}
			goalPos[3] = Coord(8, 8);
 80005dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e0:	2208      	movs	r2, #8
 80005e2:	2108      	movs	r1, #8
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe3b 	bl	8000260 <_ZN5CoordC1Eii>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3318      	adds	r3, #24
 80005f0:	461a      	mov	r2, r3
 80005f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005fa:	e882 0003 	stmia.w	r2, {r0, r1}
	}
 80005fe:	bf00      	nop
 8000600:	3734      	adds	r7, #52	@ 0x34
 8000602:	46bd      	mov	sp, r7
 8000604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000606 <_ZN4MazeC1Ev>:

    Maze() {
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
        set_goal_cells();
 800060e:	2100      	movs	r1, #0
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ff71 	bl	80004f8 <_ZN4Maze14set_goal_cellsEb>
    }
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZN4MazeD1Ev>:

    ~Maze() {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
        delete[] goalPos;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d004      	beq.n	800063a <_ZN4MazeD1Ev+0x1a>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f003 fd63 	bl	8004100 <_ZdaPv>
    }
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <_ZN13MotionProfileC1Ev>:
		FINISHED
	};

	class MotionProfile {
	public:
		MotionProfile() {
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
			m_state = IDLE;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
			m_distance = 0;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f04f 0200 	mov.w	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
			m_top_speed = 0;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f04f 0200 	mov.w	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
			m_final_speed = 0;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f04f 0200 	mov.w	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
			m_acceleration = 0;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f04f 0200 	mov.w	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
			m_current_speed = 0;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f04f 0200 	mov.w	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
			m_current_position = 0;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f04f 0200 	mov.w	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
		}
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800069c:	d205      	bcs.n	80006aa <_ZSt16__deque_buf_sizej+0x1c>
 800069e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a8:	e000      	b.n	80006ac <_ZSt16__deque_buf_sizej+0x1e>
 80006aa:	2301      	movs	r3, #1
 80006ac:	4618      	mov	r0, r3
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <_ZNSt5queueI13MotionCommandSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fb32 	bl	8000d2a <_ZNSt5dequeI13MotionCommandSaIS0_EED1Ev>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <_ZN16MotionControllerC1Ev>:
    }
};

class MotionController {
public:
    MotionController() : m_state(MOTION_NONE) {}
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3304      	adds	r3, #4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fb0d 	bl	8000d02 <_ZNSt5queueI13MotionCommandSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <_ZN16MotionControllerD1Ev>:
class MotionController {
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3304      	adds	r3, #4
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffd9 	bl	80006b6 <_ZNSt5queueI13MotionCommandSt5dequeIS0_SaIS0_EEED1Ev>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
    encoders.update(htim);
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	4803      	ldr	r0, [pc, #12]	@ (8000728 <HAL_TIM_IC_CaptureCallback+0x18>)
 800071c:	f7ff fd3a 	bl	8000194 <_ZN8Encoders6updateEP17TIM_HandleTypeDef>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000180 	.word	0x20000180

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f001 f83a 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f816 	bl	8000764 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f000 fa22 	bl	8000b80 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 800073c:	f000 f8c4 	bl	80008c8 <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 8000740:	f000 f87a 	bl	8000838 <_ZL12MX_ADC1_Initv>
  MX_TIM3_Init();
 8000744:	f000 f960 	bl	8000a08 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000748:	f000 f9bc 	bl	8000ac4 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800074c:	4803      	ldr	r0, [pc, #12]	@ (800075c <main+0x30>)
 800074e:	f002 fd47 	bl	80031e0 <HAL_TIM_Base_Start_IT>
  encoders.initialize();
 8000752:	4803      	ldr	r0, [pc, #12]	@ (8000760 <main+0x34>)
 8000754:	f7ff fd42 	bl	80001dc <_ZN8Encoders10initializeEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <main+0x2c>
 800075c:	200000a8 	.word	0x200000a8
 8000760:	20000180 	.word	0x20000180

08000764 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	@ 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800076e:	2228      	movs	r2, #40	@ 0x28
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fdb0 	bl	80042d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 ff58 	bl	8002670 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	bf14      	ite	ne
 80007c6:	2301      	movne	r3, #1
 80007c8:	2300      	moveq	r3, #0
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80007d0:	f000 fa84 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	2302      	movs	r3, #2
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2102      	movs	r1, #2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 f9bf 	bl	8002b74 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf14      	ite	ne
 80007fc:	2301      	movne	r3, #1
 80007fe:	2300      	moveq	r3, #0
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000806:	f000 fa69 	bl	8000cdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800080a:	2302      	movs	r3, #2
 800080c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800080e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000812:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fb26 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	bf14      	ite	ne
 8000822:	2301      	movne	r3, #1
 8000824:	2300      	moveq	r3, #0
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 800082c:	f000 fa56 	bl	8000cdc <Error_Handler>
  }
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	@ 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000848:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <_ZL12MX_ADC1_Initv+0x88>)
 800084a:	4a1e      	ldr	r2, [pc, #120]	@ (80008c4 <_ZL12MX_ADC1_Initv+0x8c>)
 800084c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084e:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <_ZL12MX_ADC1_Initv+0x88>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000854:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <_ZL12MX_ADC1_Initv+0x88>)
 8000856:	2200      	movs	r2, #0
 8000858:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800085a:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <_ZL12MX_ADC1_Initv+0x88>)
 800085c:	2200      	movs	r2, #0
 800085e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000860:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <_ZL12MX_ADC1_Initv+0x88>)
 8000862:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000866:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <_ZL12MX_ADC1_Initv+0x88>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <_ZL12MX_ADC1_Initv+0x88>)
 8000870:	2201      	movs	r2, #1
 8000872:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000874:	4812      	ldr	r0, [pc, #72]	@ (80008c0 <_ZL12MX_ADC1_Initv+0x88>)
 8000876:	f000 fff9 	bl	800186c <HAL_ADC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 800088a:	f000 fa27 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800088e:	2301      	movs	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000892:	2301      	movs	r3, #1
 8000894:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4808      	ldr	r0, [pc, #32]	@ (80008c0 <_ZL12MX_ADC1_Initv+0x88>)
 80008a0:	f001 faa8 	bl	8001df4 <HAL_ADC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf14      	ite	ne
 80008aa:	2301      	movne	r3, #1
 80008ac:	2300      	moveq	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 80008b4:	f000 fa12 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000078 	.word	0x20000078
 80008c4:	40012400 	.word	0x40012400

080008c8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	@ 0x38
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]
 80008f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f8:	4b42      	ldr	r3, [pc, #264]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 80008fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8000900:	4b40      	ldr	r3, [pc, #256]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 8000902:	2248      	movs	r2, #72	@ 0x48
 8000904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b3f      	ldr	r3, [pc, #252]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800090c:	4b3d      	ldr	r3, [pc, #244]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 800090e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b3b      	ldr	r3, [pc, #236]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000920:	4838      	ldr	r0, [pc, #224]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 8000922:	f002 fc0d 	bl	8003140 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	bf14      	ite	ne
 800092c:	2301      	movne	r3, #1
 800092e:	2300      	moveq	r3, #0
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000936:	f000 f9d1 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000940:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000944:	4619      	mov	r1, r3
 8000946:	482f      	ldr	r0, [pc, #188]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 8000948:	f002 ffd6 	bl	80038f8 <HAL_TIM_ConfigClockSource>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	bf14      	ite	ne
 8000952:	2301      	movne	r3, #1
 8000954:	2300      	moveq	r3, #0
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 800095c:	f000 f9be 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000960:	4828      	ldr	r0, [pc, #160]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 8000962:	f002 fc8f 	bl	8003284 <HAL_TIM_PWM_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	bf14      	ite	ne
 800096c:	2301      	movne	r3, #1
 800096e:	2300      	moveq	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000976:	f000 f9b1 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	4619      	mov	r1, r3
 8000988:	481e      	ldr	r0, [pc, #120]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 800098a:	f003 fb47 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	bf14      	ite	ne
 8000994:	2301      	movne	r3, #1
 8000996:	2300      	moveq	r3, #0
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 800099e:	f000 f99d 	bl	8000cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a2:	2360      	movs	r3, #96	@ 0x60
 80009a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1024;
 80009a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2208      	movs	r2, #8
 80009b8:	4619      	mov	r1, r3
 80009ba:	4812      	ldr	r0, [pc, #72]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 80009bc:	f002 feda 	bl	8003774 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	bf14      	ite	ne
 80009c6:	2301      	movne	r3, #1
 80009c8:	2300      	moveq	r3, #0
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 80009d0:	f000 f984 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	220c      	movs	r2, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	480a      	ldr	r0, [pc, #40]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 80009dc:	f002 feca 	bl	8003774 <HAL_TIM_PWM_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	bf14      	ite	ne
 80009e6:	2301      	movne	r3, #1
 80009e8:	2300      	moveq	r3, #0
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <_ZL12MX_TIM2_Initv+0x12c>
  {
    Error_Handler();
 80009f0:	f000 f974 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009f4:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <_ZL12MX_TIM2_Initv+0x13c>)
 80009f6:	f000 fdd9 	bl	80015ac <HAL_TIM_MspPostInit>

}
 80009fa:	bf00      	nop
 80009fc:	3738      	adds	r7, #56	@ 0x38
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000a8 	.word	0x200000a8

08000a08 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	@ 0x30
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	2224      	movs	r2, #36	@ 0x24
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 fc5e 	bl	80042d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a24:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <_ZL12MX_TIM3_Initv+0xb4>)
 8000a26:	4a26      	ldr	r2, [pc, #152]	@ (8000ac0 <_ZL12MX_TIM3_Initv+0xb8>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <_ZL12MX_TIM3_Initv+0xb4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <_ZL12MX_TIM3_Initv+0xb4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <_ZL12MX_TIM3_Initv+0xb4>)
 8000a38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <_ZL12MX_TIM3_Initv+0xb4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <_ZL12MX_TIM3_Initv+0xb4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a52:	2301      	movs	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a62:	2301      	movs	r3, #1
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4619      	mov	r1, r3
 8000a74:	4811      	ldr	r0, [pc, #68]	@ (8000abc <_ZL12MX_TIM3_Initv+0xb4>)
 8000a76:	f002 fc5d 	bl	8003334 <HAL_TIM_Encoder_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	bf14      	ite	ne
 8000a80:	2301      	movne	r3, #1
 8000a82:	2300      	moveq	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8000a8a:	f000 f927 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4808      	ldr	r0, [pc, #32]	@ (8000abc <_ZL12MX_TIM3_Initv+0xb4>)
 8000a9c:	f003 fabe 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bf14      	ite	ne
 8000aa6:	2301      	movne	r3, #1
 8000aa8:	2300      	moveq	r3, #0
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8000ab0:	f000 f914 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	3730      	adds	r7, #48	@ 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000f0 	.word	0x200000f0
 8000ac0:	40000400 	.word	0x40000400

08000ac4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	@ 0x30
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	2224      	movs	r2, #36	@ 0x24
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f003 fc00 	bl	80042d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ae0:	4b25      	ldr	r3, [pc, #148]	@ (8000b78 <_ZL12MX_TIM4_Initv+0xb4>)
 8000ae2:	4a26      	ldr	r2, [pc, #152]	@ (8000b7c <_ZL12MX_TIM4_Initv+0xb8>)
 8000ae4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ae6:	4b24      	ldr	r3, [pc, #144]	@ (8000b78 <_ZL12MX_TIM4_Initv+0xb4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aec:	4b22      	ldr	r3, [pc, #136]	@ (8000b78 <_ZL12MX_TIM4_Initv+0xb4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000af2:	4b21      	ldr	r3, [pc, #132]	@ (8000b78 <_ZL12MX_TIM4_Initv+0xb4>)
 8000af4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000af8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <_ZL12MX_TIM4_Initv+0xb4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <_ZL12MX_TIM4_Initv+0xb4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b06:	2303      	movs	r3, #3
 8000b08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4811      	ldr	r0, [pc, #68]	@ (8000b78 <_ZL12MX_TIM4_Initv+0xb4>)
 8000b32:	f002 fbff 	bl	8003334 <HAL_TIM_Encoder_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	bf14      	ite	ne
 8000b3c:	2301      	movne	r3, #1
 8000b3e:	2300      	moveq	r3, #0
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8000b46:	f000 f8c9 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4619      	mov	r1, r3
 8000b56:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <_ZL12MX_TIM4_Initv+0xb4>)
 8000b58:	f003 fa60 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bf14      	ite	ne
 8000b62:	2301      	movne	r3, #1
 8000b64:	2300      	moveq	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8000b6c:	f000 f8b6 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3730      	adds	r7, #48	@ 0x30
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000138 	.word	0x20000138
 8000b7c:	40000800 	.word	0x40000800

08000b80 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0310 	add.w	r3, r7, #16
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b94:	4b40      	ldr	r3, [pc, #256]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a3f      	ldr	r2, [pc, #252]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0310 	and.w	r3, r3, #16
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bac:	4b3a      	ldr	r3, [pc, #232]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a39      	ldr	r2, [pc, #228]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000bb2:	f043 0320 	orr.w	r3, r3, #32
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b37      	ldr	r3, [pc, #220]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0320 	and.w	r3, r3, #32
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a33      	ldr	r2, [pc, #204]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a2d      	ldr	r2, [pc, #180]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c98 <_ZL12MX_GPIO_Initv+0x118>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0308 	and.w	r3, r3, #8
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bfa:	4828      	ldr	r0, [pc, #160]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x11c>)
 8000bfc:	f001 fd20 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 8000c00:	2200      	movs	r2, #0
 8000c02:	f64f 5120 	movw	r1, #64800	@ 0xfd20
 8000c06:	4826      	ldr	r0, [pc, #152]	@ (8000ca0 <_ZL12MX_GPIO_Initv+0x120>)
 8000c08:	f001 fd1a 	bl	8002640 <HAL_GPIO_WritePin>
                          |ML_BWD_Pin|MR_BWD_Pin|EMIT_FR_Pin|BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c12:	4824      	ldr	r0, [pc, #144]	@ (8000ca4 <_ZL12MX_GPIO_Initv+0x124>)
 8000c14:	f001 fd14 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481a      	ldr	r0, [pc, #104]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x11c>)
 8000c32:	f001 fb81 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_R_Pin EMIT_L_Pin EMIT_FL_Pin MR_FWD_Pin
                           ML_BWD_Pin MR_BWD_Pin EMIT_FR_Pin */
  GPIO_InitStruct.Pin = EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 8000c36:	f64f 4320 	movw	r3, #64544	@ 0xfc20
 8000c3a:	613b      	str	r3, [r7, #16]
                          |ML_BWD_Pin|MR_BWD_Pin|EMIT_FR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4814      	ldr	r0, [pc, #80]	@ (8000ca0 <_ZL12MX_GPIO_Initv+0x120>)
 8000c50:	f001 fb72 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : ML_FWD_Pin */
  GPIO_InitStruct.Pin = ML_FWD_Pin;
 8000c54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ML_FWD_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <_ZL12MX_GPIO_Initv+0x124>)
 8000c6e:	f001 fb63 	bl	8002338 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000c72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <_ZL12MX_GPIO_Initv+0x120>)
 8000c8c:	f001 fb54 	bl	8002338 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	40010c00 	.word	0x40010c00
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	HAL_IncTick();
 8000cb0:	f000 fdc0 	bl	8001834 <HAL_IncTick>

	HAL_TIM_IC_CaptureCallback(&htim3);
 8000cb4:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000cb6:	f7ff fd2b 	bl	8000710 <HAL_TIM_IC_CaptureCallback>
	HAL_TIM_IC_CaptureCallback(&htim4);
 8000cba:	4806      	ldr	r0, [pc, #24]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cbc:	f7ff fd28 	bl	8000710 <HAL_TIM_IC_CaptureCallback>

	sensors.update();
 8000cc0:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cc2:	f7ff faf4 	bl	80002ae <_ZN7Sensors6updateEv>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000f0 	.word	0x200000f0
 8000cd4:	20000138 	.word	0x20000138
 8000cd8:	200006c4 	.word	0x200006c4

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <Error_Handler+0x8>

08000ce8 <_ZNSt5dequeI13MotionCommandSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f86e 	bl	8000dd4 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EEC1Ev>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_ZNSt5queueI13MotionCommandSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
	: c() { }
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	2328      	movs	r3, #40	@ 0x28
 8000d10:	461a      	mov	r2, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	f003 fae0 	bl	80042d8 <memset>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ffe4 	bl	8000ce8 <_ZNSt5dequeI13MotionCommandSaIS0_EEC1Ev>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <_ZNSt5dequeI13MotionCommandSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b08a      	sub	sp, #40	@ 0x28
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f85c 	bl	8000df6 <_ZNSt5dequeI13MotionCommandSaIS0_EE5beginEv>
 8000d3e:	f107 0318 	add.w	r3, r7, #24
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f865 	bl	8000e14 <_ZNSt5dequeI13MotionCommandSaIS0_EE3endEv>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f870 	bl	8000e32 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 8000d52:	4603      	mov	r3, r0
 8000d54:	f107 0218 	add.w	r2, r7, #24
 8000d58:	f107 0108 	add.w	r1, r7, #8
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f88d 	bl	8000e7c <_ZNSt5dequeI13MotionCommandSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 f813 	bl	8000d90 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EED1Ev>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3728      	adds	r7, #40	@ 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	60fb      	str	r3, [r7, #12]

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f000 f953 	bl	800102c <_ZNSt15__new_allocatorI13MotionCommandED1Ev>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d010      	beq.n	8000dc2 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000da8:	3304      	adds	r3, #4
 8000daa:	461a      	mov	r2, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f8d7 	bl	8000f60 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6819      	ldr	r1, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f8ea 	bl	8000f96 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffd5 	bl	8000d74 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE11_Deque_implD1Ev>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EEC1Ev>:
      _Deque_base()
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f8fa 	bl	8000fd8 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8000de4:	2100      	movs	r1, #0
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 f854 	bl	8000e94 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE17_M_initialize_mapEj>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_ZNSt5dequeI13MotionCommandSaIS0_EE5beginEv>:
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      _GLIBCXX_NODISCARD
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	3308      	adds	r3, #8
 8000e04:	4619      	mov	r1, r3
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f81d 	bl	8000e46 <_ZNSt15_Deque_iteratorI13MotionCommandRS0_PS0_EC1ERKS3_>
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_ZNSt5dequeI13MotionCommandSaIS0_EE3endEv>:
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD
      iterator
      end() _GLIBCXX_NOEXCEPT
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	3318      	adds	r3, #24
 8000e22:	4619      	mov	r1, r3
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f80e 	bl	8000e46 <_ZNSt15_Deque_iteratorI13MotionCommandRS0_PS0_EC1ERKS3_>
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <_ZNSt15_Deque_iteratorI13MotionCommandRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <_ZNSt5dequeI13MotionCommandSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8000e7c:	b480      	push	{r7}
 8000e7e:	b08d      	sub	sp, #52	@ 0x34
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8000e8a:	bf00      	nop
 8000e8c:	3734      	adds	r7, #52	@ 0x34
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8000e9e:	2014      	movs	r0, #20
 8000ea0:	f7ff fbf5 	bl	800068e <_ZSt16__deque_buf_sizej>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000eac:	3301      	adds	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000eba:	f107 0210 	add.w	r2, r7, #16
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f8bb 	bl	8001040 <_ZSt3maxIjERKT_S2_S2_>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f8c4 	bl	8001066 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE15_M_allocate_mapEj>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6859      	ldr	r1, [r3, #4]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	1acb      	subs	r3, r1, r3
 8000ef0:	085b      	lsrs	r3, r3, #1
 8000ef2:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8000ef4:	4413      	add	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4413      	add	r3, r2
 8000f00:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	69b9      	ldr	r1, [r7, #24]
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f8ce 	bl	80010a8 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3308      	adds	r3, #8
 8000f10:	69b9      	ldr	r1, [r7, #24]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f8e3 	bl	80010de <_ZNSt15_Deque_iteratorI13MotionCommandRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f103 0218 	add.w	r2, r3, #24
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3b04      	subs	r3, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4610      	mov	r0, r2
 8000f26:	f000 f8da 	bl	80010de <_ZNSt15_Deque_iteratorI13MotionCommandRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8000f36:	2014      	movs	r0, #20
 8000f38:	f7ff fba9 	bl	800068e <_ZSt16__deque_buf_sizej>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f44:	fb01 f202 	mul.w	r2, r1, r2
 8000f48:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	619a      	str	r2, [r3, #24]
    }
 8000f58:	bf00      	nop
 8000f5a:	3724      	adds	r7, #36	@ 0x24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}

08000f60 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	e008      	b.n	8000f84 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x24>
	_M_deallocate_node(*__n);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f000 f8cc 	bl	8001116 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3304      	adds	r3, #4
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3f2      	bcc.n	8000f72 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x12>
    }
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b088      	sub	sp, #32
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	68f9      	ldr	r1, [r7, #12]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f8cc 	bl	8001146 <_ZNKSt11_Deque_baseI13MotionCommandSaIS0_EE20_M_get_map_allocatorEv>
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	61bb      	str	r3, [r7, #24]
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      [[__gnu__::__always_inline__]]
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	69f9      	ldr	r1, [r7, #28]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f91c 	bl	80011fc <_ZNSt15__new_allocatorIP13MotionCommandE10deallocateEPS1_j>
 8000fc4:	bf00      	nop
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f90c 	bl	80011e8 <_ZNSt15__new_allocatorIP13MotionCommandED1Ev>
      }
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	60bb      	str	r3, [r7, #8]
	: _Tp_alloc_type()
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 f805 	bl	8000ffa <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3308      	adds	r3, #8
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f8c0 	bl	8001198 <_ZNSt15_Deque_iteratorI13MotionCommandRS0_PS0_EC1Ev>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3318      	adds	r3, #24
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f8bb 	bl	8001198 <_ZNSt15_Deque_iteratorI13MotionCommandRS0_PS0_EC1Ev>
	{ }
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <_ZNSt15__new_allocatorI13MotionCommandED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr

08001040 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d201      	bcs.n	800105a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	e000      	b.n	800105c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800105a:	687b      	ldr	r3, [r7, #4]
    }
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8001066:	b590      	push	{r4, r7, lr}
 8001068:	b085      	sub	sp, #20
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f865 	bl	8001146 <_ZNKSt11_Deque_baseI13MotionCommandSaIS0_EE20_M_get_map_allocatorEv>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	60fb      	str	r3, [r7, #12]
      { return __a.allocate(__n); }
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	2200      	movs	r2, #0
 8001086:	68f9      	ldr	r1, [r7, #12]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f8c7 	bl	800121c <_ZNSt15__new_allocatorIP13MotionCommandE8allocateEjPKv>
 800108e:	4604      	mov	r4, r0
 8001090:	bf00      	nop
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001092:	bf00      	nop
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f8a5 	bl	80011e8 <_ZNSt15__new_allocatorIP13MotionCommandED1Ev>
 800109e:	4623      	mov	r3, r4
      }
 80010a0:	4618      	mov	r0, r3
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd90      	pop	{r4, r7, pc}

080010a8 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e008      	b.n	80010cc <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE15_M_create_nodesEPPS0_S4_+0x24>
	    *__cur = this->_M_allocate_node();
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 f856 	bl	800116c <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE16_M_allocate_nodeEv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3304      	adds	r3, #4
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d3f2      	bcc.n	80010ba <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE15_M_create_nodesEPPS0_S4_+0x12>
    }
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_ZNSt15_Deque_iteratorI13MotionCommandRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80010de:	b590      	push	{r4, r7, lr}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685c      	ldr	r4, [r3, #4]
 80010fa:	f000 f863 	bl	80011c4 <_ZNSt15_Deque_iteratorI13MotionCommandRS0_PS0_E14_S_buffer_sizeEv>
 80010fe:	4602      	mov	r2, r0
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	18e2      	adds	r2, r4, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	609a      	str	r2, [r3, #8]
      }
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}

08001116 <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8001116:	b590      	push	{r4, r7, lr}
 8001118:	b087      	sub	sp, #28
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8001120:	687c      	ldr	r4, [r7, #4]
 8001122:	2014      	movs	r0, #20
 8001124:	f7ff fab3 	bl	800068e <_ZSt16__deque_buf_sizej>
 8001128:	4602      	mov	r2, r0
 800112a:	617c      	str	r4, [r7, #20]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	60fa      	str	r2, [r7, #12]
      { __a.deallocate(__p, __n); }
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	6939      	ldr	r1, [r7, #16]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f000 f899 	bl	800126e <_ZNSt15__new_allocatorI13MotionCommandE10deallocateEPS0_j>
 800113c:	bf00      	nop
      }
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}

08001146 <_ZNKSt11_Deque_baseI13MotionCommandSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f000 f83f 	bl	80011d4 <_ZNKSt11_Deque_baseI13MotionCommandSaIS0_EE19_M_get_Tp_allocatorEv>
 8001156:	4602      	mov	r2, r0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	613a      	str	r2, [r7, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	bf00      	nop
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZNSt11_Deque_baseI13MotionCommandSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8001174:	687c      	ldr	r4, [r7, #4]
 8001176:	2014      	movs	r0, #20
 8001178:	f7ff fa89 	bl	800068e <_ZSt16__deque_buf_sizej>
 800117c:	4603      	mov	r3, r0
 800117e:	60fc      	str	r4, [r7, #12]
 8001180:	60bb      	str	r3, [r7, #8]
      { return __a.allocate(__n); }
 8001182:	2200      	movs	r2, #0
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 f884 	bl	8001294 <_ZNSt15__new_allocatorI13MotionCommandE8allocateEjPKv>
 800118c:	4603      	mov	r3, r0
 800118e:	bf00      	nop
      }
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}

08001198 <_ZNSt15_Deque_iteratorI13MotionCommandRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <_ZNSt15_Deque_iteratorI13MotionCommandRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80011c8:	2014      	movs	r0, #20
 80011ca:	f7ff fa60 	bl	800068e <_ZSt16__deque_buf_sizej>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4618      	mov	r0, r3
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZNKSt11_Deque_baseI13MotionCommandSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <_ZNSt15__new_allocatorIP13MotionCommandED1Ev>:
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <_ZNSt15__new_allocatorIP13MotionCommandE10deallocateEPS1_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4619      	mov	r1, r3
 800120e:	68b8      	ldr	r0, [r7, #8]
 8001210:	f002 ff74 	bl	80040fc <_ZdlPvj>
      }
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZNSt15__new_allocatorIP13MotionCommandE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	617b      	str	r3, [r7, #20]
      __attribute__((__always_inline__))
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800122c:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	4293      	cmp	r3, r2
 8001234:	bf8c      	ite	hi
 8001236:	2301      	movhi	r3, #1
 8001238:	2300      	movls	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf14      	ite	ne
 8001240:	2301      	movne	r3, #1
 8001242:	2300      	moveq	r3, #0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d007      	beq.n	800125a <_ZNSt15__new_allocatorIP13MotionCommandE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001250:	d301      	bcc.n	8001256 <_ZNSt15__new_allocatorIP13MotionCommandE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001252:	f002 ff6d 	bl	8004130 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001256:	f002 ff68 	bl	800412a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4618      	mov	r0, r3
 8001260:	f002 ff50 	bl	8004104 <_Znwj>
 8001264:	4603      	mov	r3, r0
      }
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_ZNSt15__new_allocatorI13MotionCommandE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4619      	mov	r1, r3
 8001286:	68b8      	ldr	r0, [r7, #8]
 8001288:	f002 ff38 	bl	80040fc <_ZdlPvj>
      }
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_ZNSt15__new_allocatorI13MotionCommandE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	617b      	str	r3, [r7, #20]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80012a4:	4a11      	ldr	r2, [pc, #68]	@ (80012ec <_ZNSt15__new_allocatorI13MotionCommandE8allocateEjPKv+0x58>)
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	4293      	cmp	r3, r2
 80012aa:	bf8c      	ite	hi
 80012ac:	2301      	movhi	r3, #1
 80012ae:	2300      	movls	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d007      	beq.n	80012d0 <_ZNSt15__new_allocatorI13MotionCommandE8allocateEjPKv+0x3c>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4a0b      	ldr	r2, [pc, #44]	@ (80012f0 <_ZNSt15__new_allocatorI13MotionCommandE8allocateEjPKv+0x5c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d901      	bls.n	80012cc <_ZNSt15__new_allocatorI13MotionCommandE8allocateEjPKv+0x38>
	      std::__throw_bad_array_new_length();
 80012c8:	f002 ff32 	bl	8004130 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80012cc:	f002 ff2d 	bl	800412a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 ff12 	bl	8004104 <_Znwj>
 80012e0:	4603      	mov	r3, r0
      }
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	06666666 	.word	0x06666666
 80012f0:	0ccccccc 	.word	0x0ccccccc

080012f4 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
Encoders encoders = Encoders();
 80012f8:	4808      	ldr	r0, [pc, #32]	@ (800131c <_Z41__static_initialization_and_destruction_0v+0x28>)
 80012fa:	f7fe ff27 	bl	800014c <_ZN8EncodersC1Ev>
Maze maze = Maze();
 80012fe:	4808      	ldr	r0, [pc, #32]	@ (8001320 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8001300:	f7ff f981 	bl	8000606 <_ZN4MazeC1Ev>
Mouse mouse = Mouse();
 8001304:	4807      	ldr	r0, [pc, #28]	@ (8001324 <_Z41__static_initialization_and_destruction_0v+0x30>)
 8001306:	f7fe ffbd 	bl	8000284 <_ZN5MouseC1Ev>
MotionProfile motion_profile = MotionProfile();
 800130a:	4807      	ldr	r0, [pc, #28]	@ (8001328 <_Z41__static_initialization_and_destruction_0v+0x34>)
 800130c:	f7ff f99a 	bl	8000644 <_ZN13MotionProfileC1Ev>
MotionController motion_controler = MotionController();
 8001310:	4806      	ldr	r0, [pc, #24]	@ (800132c <_Z41__static_initialization_and_destruction_0v+0x38>)
 8001312:	f7ff f9dd 	bl	80006d0 <_ZN16MotionControllerC1Ev>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000180 	.word	0x20000180
 8001320:	20000198 	.word	0x20000198
 8001324:	2000069c 	.word	0x2000069c
 8001328:	200006a8 	.word	0x200006a8
 800132c:	200006cc 	.word	0x200006cc

08001330 <_Z41__static_initialization_and_destruction_1v>:
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
MotionController motion_controler = MotionController();
 8001334:	4803      	ldr	r0, [pc, #12]	@ (8001344 <_Z41__static_initialization_and_destruction_1v+0x14>)
 8001336:	f7ff f9dc 	bl	80006f2 <_ZN16MotionControllerD1Ev>
Maze maze = Maze();
 800133a:	4803      	ldr	r0, [pc, #12]	@ (8001348 <_Z41__static_initialization_and_destruction_1v+0x18>)
 800133c:	f7ff f970 	bl	8000620 <_ZN4MazeD1Ev>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200006cc 	.word	0x200006cc
 8001348:	20000198 	.word	0x20000198

0800134c <_GLOBAL__sub_I_get_steering_adjustment>:
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
 8001350:	f7ff ffd0 	bl	80012f4 <_Z41__static_initialization_and_destruction_0v>
 8001354:	bd80      	pop	{r7, pc}

08001356 <_GLOBAL__sub_D_get_steering_adjustment>:
 8001356:	b580      	push	{r7, lr}
 8001358:	af00      	add	r7, sp, #0
 800135a:	f7ff ffe9 	bl	8001330 <_Z41__static_initialization_and_destruction_1v>
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_MspInit+0x5c>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a14      	ldr	r2, [pc, #80]	@ (80013bc <HAL_MspInit+0x5c>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <HAL_MspInit+0x5c>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <HAL_MspInit+0x5c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <HAL_MspInit+0x5c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <HAL_MspInit+0x60>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <HAL_MspInit+0x60>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000

080013c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a1f      	ldr	r2, [pc, #124]	@ (800145c <HAL_ADC_MspInit+0x98>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d137      	bne.n	8001454 <HAL_ADC_MspInit+0x90>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001460 <HAL_ADC_MspInit+0x9c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001460 <HAL_ADC_MspInit+0x9c>)
 80013ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001460 <HAL_ADC_MspInit+0x9c>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <HAL_ADC_MspInit+0x9c>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <HAL_ADC_MspInit+0x9c>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <HAL_ADC_MspInit+0x9c>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_ADC_MspInit+0x9c>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a11      	ldr	r2, [pc, #68]	@ (8001460 <HAL_ADC_MspInit+0x9c>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <HAL_ADC_MspInit+0x9c>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = V_BATT_Pin|RECIV_FR_Pin|RECIV_R_Pin;
 800142c:	2332      	movs	r3, #50	@ 0x32
 800142e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001430:	2303      	movs	r3, #3
 8001432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0318 	add.w	r3, r7, #24
 8001438:	4619      	mov	r1, r3
 800143a:	480a      	ldr	r0, [pc, #40]	@ (8001464 <HAL_ADC_MspInit+0xa0>)
 800143c:	f000 ff7c 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RECIV_L_Pin|RECIV_FL_Pin;
 8001440:	2303      	movs	r3, #3
 8001442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001444:	2303      	movs	r3, #3
 8001446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	4619      	mov	r1, r3
 800144e:	4806      	ldr	r0, [pc, #24]	@ (8001468 <HAL_ADC_MspInit+0xa4>)
 8001450:	f000 ff72 	bl	8002338 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	@ 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40012400 	.word	0x40012400
 8001460:	40021000 	.word	0x40021000
 8001464:	40010800 	.word	0x40010800
 8001468:	40010c00 	.word	0x40010c00

0800146c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800147c:	d113      	bne.n	80014a6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <HAL_TIM_Base_MspInit+0x44>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a0b      	ldr	r2, [pc, #44]	@ (80014b0 <HAL_TIM_Base_MspInit+0x44>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <HAL_TIM_Base_MspInit+0x44>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	201c      	movs	r0, #28
 800149c:	f000 ff15 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014a0:	201c      	movs	r0, #28
 80014a2:	f000 ff2e 	bl	8002302 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0318 	add.w	r3, r7, #24
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a32      	ldr	r2, [pc, #200]	@ (8001598 <HAL_TIM_Encoder_MspInit+0xe4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d12c      	bne.n	800152e <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014d4:	4b31      	ldr	r3, [pc, #196]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	4a30      	ldr	r2, [pc, #192]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	61d3      	str	r3, [r2, #28]
 80014e0:	4b2e      	ldr	r3, [pc, #184]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a2a      	ldr	r2, [pc, #168]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b28      	ldr	r3, [pc, #160]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8001504:	23c0      	movs	r3, #192	@ 0xc0
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	4619      	mov	r1, r3
 8001516:	4822      	ldr	r0, [pc, #136]	@ (80015a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001518:	f000 ff0e 	bl	8002338 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	201d      	movs	r0, #29
 8001522:	f000 fed2 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001526:	201d      	movs	r0, #29
 8001528:	f000 feeb 	bl	8002302 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800152c:	e030      	b.n	8001590 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1c      	ldr	r2, [pc, #112]	@ (80015a4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d12b      	bne.n	8001590 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001538:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	4a17      	ldr	r2, [pc, #92]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	61d3      	str	r3, [r2, #28]
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a11      	ldr	r2, [pc, #68]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001556:	f043 0308 	orr.w	r3, r3, #8
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_TIM_Encoder_MspInit+0xe8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8001568:	23c0      	movs	r3, #192	@ 0xc0
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f107 0318 	add.w	r3, r7, #24
 8001578:	4619      	mov	r1, r3
 800157a:	480b      	ldr	r0, [pc, #44]	@ (80015a8 <HAL_TIM_Encoder_MspInit+0xf4>)
 800157c:	f000 fedc 	bl	8002338 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	201e      	movs	r0, #30
 8001586:	f000 fea0 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800158a:	201e      	movs	r0, #30
 800158c:	f000 feb9 	bl	8002302 <HAL_NVIC_EnableIRQ>
}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	@ 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40000400 	.word	0x40000400
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010800 	.word	0x40010800
 80015a4:	40000800 	.word	0x40000800
 80015a8:	40010c00 	.word	0x40010c00

080015ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015ca:	d117      	bne.n	80015fc <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <HAL_TIM_MspPostInit+0x58>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001604 <HAL_TIM_MspPostInit+0x58>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_TIM_MspPostInit+0x58>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MR_PWM_Pin|ML_PWM_Pin;
 80015e4:	230c      	movs	r3, #12
 80015e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	4619      	mov	r1, r3
 80015f6:	4804      	ldr	r0, [pc, #16]	@ (8001608 <HAL_TIM_MspPostInit+0x5c>)
 80015f8:	f000 fe9e 	bl	8002338 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000
 8001608:	40010800 	.word	0x40010800

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <NMI_Handler+0x4>

08001614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <MemManage_Handler+0x4>

08001624 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <UsageFault_Handler+0x4>

08001634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 f8ea 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <TIM2_IRQHandler+0x10>)
 800166a:	f001 ff93 	bl	8003594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200000a8 	.word	0x200000a8

08001678 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <TIM3_IRQHandler+0x10>)
 800167e:	f001 ff89 	bl	8003594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200000f0 	.word	0x200000f0

0800168c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <TIM4_IRQHandler+0x10>)
 8001692:	f001 ff7f 	bl	8003594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000138 	.word	0x20000138

080016a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <_kill>:

int _kill(int pid, int sig)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016b8:	f002 fe6a 	bl	8004390 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	2216      	movs	r2, #22
 80016c0:	601a      	str	r2, [r3, #0]
  return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_exit>:

void _exit (int status)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d6:	f04f 31ff 	mov.w	r1, #4294967295
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffe7 	bl	80016ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <_exit+0x12>

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	@ (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	@ (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f002 fe3c 	bl	8004390 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20005000 	.word	0x20005000
 8001744:	00000400 	.word	0x00000400
 8001748:	200006f8 	.word	0x200006f8
 800174c:	20000850 	.word	0x20000850

08001750 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <Reset_Handler>:
 800175c:	f7ff fff8 	bl	8001750 <SystemInit>
 8001760:	480b      	ldr	r0, [pc, #44]	@ (8001790 <LoopFillZerobss+0xe>)
 8001762:	490c      	ldr	r1, [pc, #48]	@ (8001794 <LoopFillZerobss+0x12>)
 8001764:	4a0c      	ldr	r2, [pc, #48]	@ (8001798 <LoopFillZerobss+0x16>)
 8001766:	2300      	movs	r3, #0
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:
 800176a:	58d4      	ldr	r4, [r2, r3]
 800176c:	50c4      	str	r4, [r0, r3]
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:
 8001770:	18c4      	adds	r4, r0, r3
 8001772:	428c      	cmp	r4, r1
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
 8001776:	4a09      	ldr	r2, [pc, #36]	@ (800179c <LoopFillZerobss+0x1a>)
 8001778:	4c09      	ldr	r4, [pc, #36]	@ (80017a0 <LoopFillZerobss+0x1e>)
 800177a:	2300      	movs	r3, #0
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:
 8001782:	42a2      	cmp	r2, r4
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>
 8001786:	f002 fe09 	bl	800439c <__libc_init_array>
 800178a:	f7fe ffcf 	bl	800072c <main>
 800178e:	4770      	bx	lr
 8001790:	20000000 	.word	0x20000000
 8001794:	2000005c 	.word	0x2000005c
 8001798:	080044e0 	.word	0x080044e0
 800179c:	2000005c 	.word	0x2000005c
 80017a0:	2000084c 	.word	0x2000084c

080017a4 <ADC1_2_IRQHandler>:
 80017a4:	e7fe      	b.n	80017a4 <ADC1_2_IRQHandler>
	...

080017a8 <HAL_Init>:
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <HAL_Init+0x28>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <HAL_Init+0x28>)
 80017b2:	f043 0310 	orr.w	r3, r3, #16
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 fd7b 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>
 80017be:	200f      	movs	r0, #15
 80017c0:	f000 f808 	bl	80017d4 <HAL_InitTick>
 80017c4:	f7ff fdcc 	bl	8001360 <HAL_MspInit>
 80017c8:	2300      	movs	r3, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40022000 	.word	0x40022000

080017d4 <HAL_InitTick>:
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_InitTick+0x54>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <HAL_InitTick+0x58>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fd93 	bl	800231e <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_InitTick+0x2e>
 80017fe:	2301      	movs	r3, #1
 8001800:	e00e      	b.n	8001820 <HAL_InitTick+0x4c>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d80a      	bhi.n	800181e <HAL_InitTick+0x4a>
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f000 fd5b 	bl	80022ca <HAL_NVIC_SetPriority>
 8001814:	4a06      	ldr	r2, [pc, #24]	@ (8001830 <HAL_InitTick+0x5c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x4c>
 800181e:	2301      	movs	r3, #1
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000000 	.word	0x20000000
 800182c:	20000008 	.word	0x20000008
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_IncTick>:
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <HAL_IncTick+0x1c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <HAL_IncTick+0x20>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a03      	ldr	r2, [pc, #12]	@ (8001854 <HAL_IncTick+0x20>)
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000008 	.word	0x20000008
 8001854:	200006fc 	.word	0x200006fc

08001858 <HAL_GetTick>:
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
 800185c:	4b02      	ldr	r3, [pc, #8]	@ (8001868 <HAL_GetTick+0x10>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	200006fc 	.word	0x200006fc

0800186c <HAL_ADC_Init>:
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	2300      	movs	r3, #0
 8001876:	75fb      	strb	r3, [r7, #23]
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_ADC_Init+0x22>
 800188a:	2301      	movs	r3, #1
 800188c:	e0be      	b.n	8001a0c <HAL_ADC_Init+0x1a0>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <HAL_ADC_Init+0x44>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fd8a 	bl	80013c4 <HAL_ADC_MspInit>
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 fbf1 	bl	8002098 <ADC_ConversionStop_Disable>
 80018b6:	4603      	mov	r3, r0
 80018b8:	75fb      	strb	r3, [r7, #23]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 8099 	bne.w	80019fa <HAL_ADC_Init+0x18e>
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 8095 	bne.w	80019fa <HAL_ADC_Init+0x18e>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018d8:	f023 0302 	bic.w	r3, r3, #2
 80018dc:	f043 0202 	orr.w	r2, r3, #2
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	7b1b      	ldrb	r3, [r3, #12]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4313      	orrs	r3, r2
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001904:	d003      	beq.n	800190e <HAL_ADC_Init+0xa2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d102      	bne.n	8001914 <HAL_ADC_Init+0xa8>
 800190e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001912:	e000      	b.n	8001916 <HAL_ADC_Init+0xaa>
 8001914:	2300      	movs	r3, #0
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7d1b      	ldrb	r3, [r3, #20]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d119      	bne.n	8001958 <HAL_ADC_Init+0xec>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7b1b      	ldrb	r3, [r3, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d109      	bne.n	8001940 <HAL_ADC_Init+0xd4>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	3b01      	subs	r3, #1
 8001932:	035a      	lsls	r2, r3, #13
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	e00b      	b.n	8001958 <HAL_ADC_Init+0xec>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001944:	f043 0220 	orr.w	r2, r3, #32
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	@ 0x28
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	430a      	orrs	r2, r1
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <HAL_ADC_Init+0x1a8>)
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	430b      	orrs	r3, r1
 800197e:	6093      	str	r3, [r2, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001988:	d003      	beq.n	8001992 <HAL_ADC_Init+0x126>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d104      	bne.n	800199c <HAL_ADC_Init+0x130>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	3b01      	subs	r3, #1
 8001998:	051b      	lsls	r3, r3, #20
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <HAL_ADC_Init+0x1ac>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d10b      	bne.n	80019d8 <HAL_ADC_Init+0x16c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ca:	f023 0303 	bic.w	r3, r3, #3
 80019ce:	f043 0201 	orr.w	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80019d6:	e018      	b.n	8001a0a <HAL_ADC_Init+0x19e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019dc:	f023 0312 	bic.w	r3, r3, #18
 80019e0:	f043 0210 	orr.w	r2, r3, #16
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019f4:	2301      	movs	r3, #1
 80019f6:	75fb      	strb	r3, [r7, #23]
 80019f8:	e007      	b.n	8001a0a <HAL_ADC_Init+0x19e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	f043 0210 	orr.w	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a06:	2301      	movs	r3, #1
 8001a08:	75fb      	strb	r3, [r7, #23]
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	ffe1f7fd 	.word	0xffe1f7fd
 8001a18:	ff1f0efe 	.word	0xff1f0efe

08001a1c <HAL_ADC_Start>:
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_Start+0x1a>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e098      	b.n	8001b68 <HAL_ADC_Start+0x14c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fad0 	bl	8001fe4 <ADC_Enable>
 8001a44:	4603      	mov	r3, r0
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 8087 	bne.w	8001b5e <HAL_ADC_Start+0x142>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a41      	ldr	r2, [pc, #260]	@ (8001b70 <HAL_ADC_Start+0x154>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d105      	bne.n	8001a7a <HAL_ADC_Start+0x5e>
 8001a6e:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <HAL_ADC_Start+0x158>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d115      	bne.n	8001aa6 <HAL_ADC_Start+0x8a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d026      	beq.n	8001ae2 <HAL_ADC_Start+0xc6>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a98:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a9c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001aa4:	e01d      	b.n	8001ae2 <HAL_ADC_Start+0xc6>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aaa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8001b74 <HAL_ADC_Start+0x158>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_ADC_Start+0xaa>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b70 <HAL_ADC_Start+0x154>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d10d      	bne.n	8001ae2 <HAL_ADC_Start+0xc6>
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b74 <HAL_ADC_Start+0x158>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_ADC_Start+0xc6>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ada:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_ADC_Start+0xe0>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af2:	f023 0206 	bic.w	r2, r3, #6
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001afa:	e002      	b.n	8001b02 <HAL_ADC_Start+0xe6>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f06f 0202 	mvn.w	r2, #2
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b1e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b22:	d113      	bne.n	8001b4c <HAL_ADC_Start+0x130>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a11      	ldr	r2, [pc, #68]	@ (8001b70 <HAL_ADC_Start+0x154>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d105      	bne.n	8001b3a <HAL_ADC_Start+0x11e>
 8001b2e:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <HAL_ADC_Start+0x158>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d108      	bne.n	8001b4c <HAL_ADC_Start+0x130>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	e00c      	b.n	8001b66 <HAL_ADC_Start+0x14a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	e003      	b.n	8001b66 <HAL_ADC_Start+0x14a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40012800 	.word	0x40012800
 8001b74:	40012400 	.word	0x40012400

08001b78 <HAL_ADC_Stop>:
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_Stop+0x1a>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e01a      	b.n	8001bc8 <HAL_ADC_Stop+0x50>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fa7c 	bl	8002098 <ADC_ConversionStop_Disable>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_ADC_Stop+0x46>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_ADC_PollForConversion>:
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	f7ff fe37 	bl	8001858 <HAL_GetTick>
 8001bea:	6178      	str	r0, [r7, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_ADC_PollForConversion+0x42>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfe:	f043 0220 	orr.w	r2, r3, #32
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0d3      	b.n	8001dba <HAL_ADC_PollForConversion+0x1ea>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d131      	bne.n	8001c84 <HAL_ADC_PollForConversion+0xb4>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c26:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d12a      	bne.n	8001c84 <HAL_ADC_PollForConversion+0xb4>
 8001c2e:	e021      	b.n	8001c74 <HAL_ADC_PollForConversion+0xa4>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c36:	d01d      	beq.n	8001c74 <HAL_ADC_PollForConversion+0xa4>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_ADC_PollForConversion+0x7e>
 8001c3e:	f7ff fe0b 	bl	8001858 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d212      	bcs.n	8001c74 <HAL_ADC_PollForConversion+0xa4>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <HAL_ADC_PollForConversion+0xa4>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c60:	f043 0204 	orr.w	r2, r3, #4
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0a2      	b.n	8001dba <HAL_ADC_PollForConversion+0x1ea>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0d6      	beq.n	8001c30 <HAL_ADC_PollForConversion+0x60>
 8001c82:	e070      	b.n	8001d66 <HAL_ADC_PollForConversion+0x196>
 8001c84:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc4 <HAL_ADC_PollForConversion+0x1f4>)
 8001c86:	681c      	ldr	r4, [r3, #0]
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f001 f9a3 	bl	8002fd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	fbb4 f2f3 	udiv	r2, r4, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6919      	ldr	r1, [r3, #16]
 8001c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc8 <HAL_ADC_PollForConversion+0x1f8>)
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d118      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x104>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68d9      	ldr	r1, [r3, #12]
 8001ca8:	4b48      	ldr	r3, [pc, #288]	@ (8001dcc <HAL_ADC_PollForConversion+0x1fc>)
 8001caa:	400b      	ands	r3, r1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d111      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x104>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6919      	ldr	r1, [r3, #16]
 8001cb6:	4b46      	ldr	r3, [pc, #280]	@ (8001dd0 <HAL_ADC_PollForConversion+0x200>)
 8001cb8:	400b      	ands	r3, r1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d108      	bne.n	8001cd0 <HAL_ADC_PollForConversion+0x100>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68d9      	ldr	r1, [r3, #12]
 8001cc4:	4b43      	ldr	r3, [pc, #268]	@ (8001dd4 <HAL_ADC_PollForConversion+0x204>)
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_PollForConversion+0x100>
 8001ccc:	2314      	movs	r3, #20
 8001cce:	e020      	b.n	8001d12 <HAL_ADC_PollForConversion+0x142>
 8001cd0:	2329      	movs	r3, #41	@ 0x29
 8001cd2:	e01e      	b.n	8001d12 <HAL_ADC_PollForConversion+0x142>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6919      	ldr	r1, [r3, #16]
 8001cda:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <HAL_ADC_PollForConversion+0x200>)
 8001cdc:	400b      	ands	r3, r1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_ADC_PollForConversion+0x120>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68d9      	ldr	r1, [r3, #12]
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd4 <HAL_ADC_PollForConversion+0x204>)
 8001cea:	400b      	ands	r3, r1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00d      	beq.n	8001d0c <HAL_ADC_PollForConversion+0x13c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6919      	ldr	r1, [r3, #16]
 8001cf6:	4b38      	ldr	r3, [pc, #224]	@ (8001dd8 <HAL_ADC_PollForConversion+0x208>)
 8001cf8:	400b      	ands	r3, r1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d108      	bne.n	8001d10 <HAL_ADC_PollForConversion+0x140>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68d9      	ldr	r1, [r3, #12]
 8001d04:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <HAL_ADC_PollForConversion+0x208>)
 8001d06:	400b      	ands	r3, r1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_ADC_PollForConversion+0x140>
 8001d0c:	2354      	movs	r3, #84	@ 0x54
 8001d0e:	e000      	b.n	8001d12 <HAL_ADC_PollForConversion+0x142>
 8001d10:	23fc      	movs	r3, #252	@ 0xfc
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	e021      	b.n	8001d5e <HAL_ADC_PollForConversion+0x18e>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d01a      	beq.n	8001d58 <HAL_ADC_PollForConversion+0x188>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <HAL_ADC_PollForConversion+0x168>
 8001d28:	f7ff fd96 	bl	8001858 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d20f      	bcs.n	8001d58 <HAL_ADC_PollForConversion+0x188>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d90b      	bls.n	8001d58 <HAL_ADC_PollForConversion+0x188>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	f043 0204 	orr.w	r2, r3, #4
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001d54:	2303      	movs	r3, #3
 8001d56:	e030      	b.n	8001dba <HAL_ADC_PollForConversion+0x1ea>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d8d9      	bhi.n	8001d1a <HAL_ADC_PollForConversion+0x14a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f06f 0212 	mvn.w	r2, #18
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d86:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d8a:	d115      	bne.n	8001db8 <HAL_ADC_PollForConversion+0x1e8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7b1b      	ldrb	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d111      	bne.n	8001db8 <HAL_ADC_PollForConversion+0x1e8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <HAL_ADC_PollForConversion+0x1e8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001db8:	2300      	movs	r3, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	24924924 	.word	0x24924924
 8001dcc:	00924924 	.word	0x00924924
 8001dd0:	12492492 	.word	0x12492492
 8001dd4:	00492492 	.word	0x00492492
 8001dd8:	00249249 	.word	0x00249249

08001ddc <HAL_ADC_GetValue>:
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_ADC_ConfigChannel>:
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x20>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e0dc      	b.n	8001fce <HAL_ADC_ConfigChannel+0x1da>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b06      	cmp	r3, #6
 8001e22:	d81c      	bhi.n	8001e5e <HAL_ADC_ConfigChannel+0x6a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b05      	subs	r3, #5
 8001e36:	221f      	movs	r2, #31
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4019      	ands	r1, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b05      	subs	r3, #5
 8001e50:	fa00 f203 	lsl.w	r2, r0, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e5c:	e03c      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0xe4>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d81c      	bhi.n	8001ea0 <HAL_ADC_ConfigChannel+0xac>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	3b23      	subs	r3, #35	@ 0x23
 8001e78:	221f      	movs	r2, #31
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	4019      	ands	r1, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b23      	subs	r3, #35	@ 0x23
 8001e92:	fa00 f203 	lsl.w	r2, r0, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e9e:	e01b      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0xe4>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b41      	subs	r3, #65	@ 0x41
 8001eb2:	221f      	movs	r2, #31
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4019      	ands	r1, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b41      	subs	r3, #65	@ 0x41
 8001ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b09      	cmp	r3, #9
 8001ede:	d91c      	bls.n	8001f1a <HAL_ADC_ConfigChannel+0x126>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68d9      	ldr	r1, [r3, #12]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b1e      	subs	r3, #30
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	4019      	ands	r1, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6898      	ldr	r0, [r3, #8]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	3b1e      	subs	r3, #30
 8001f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	e019      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x15a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6919      	ldr	r1, [r3, #16]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	2207      	movs	r2, #7
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4019      	ands	r1, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6898      	ldr	r0, [r3, #8]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	fa00 f203 	lsl.w	r2, r0, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	d003      	beq.n	8001f5e <HAL_ADC_ConfigChannel+0x16a>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b11      	cmp	r3, #17
 8001f5c:	d132      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1d0>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d125      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1c0>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d126      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1d0>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d11a      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x1d0>
 8001f8e:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <HAL_ADC_ConfigChannel+0x1e8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a13      	ldr	r2, [pc, #76]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9a      	lsrs	r2, r3, #18
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	e002      	b.n	8001fac <HAL_ADC_ConfigChannel+0x1b8>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f9      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x1b2>
 8001fb2:	e007      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x1d0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	f043 0220 	orr.w	r2, r3, #32
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	40012400 	.word	0x40012400
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	431bde83 	.word	0x431bde83

08001fe4 <ADC_Enable>:
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d040      	beq.n	8002084 <ADC_Enable+0xa0>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	4b1f      	ldr	r3, [pc, #124]	@ (8002090 <ADC_Enable+0xac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1f      	ldr	r2, [pc, #124]	@ (8002094 <ADC_Enable+0xb0>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	0c9b      	lsrs	r3, r3, #18
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	e002      	b.n	8002028 <ADC_Enable+0x44>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3b01      	subs	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f9      	bne.n	8002022 <ADC_Enable+0x3e>
 800202e:	f7ff fc13 	bl	8001858 <HAL_GetTick>
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	e01f      	b.n	8002076 <ADC_Enable+0x92>
 8002036:	f7ff fc0f 	bl	8001858 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d918      	bls.n	8002076 <ADC_Enable+0x92>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d011      	beq.n	8002076 <ADC_Enable+0x92>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002056:	f043 0210 	orr.w	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	@ 0x28
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	62da      	str	r2, [r3, #44]	@ 0x2c
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002072:	2301      	movs	r3, #1
 8002074:	e007      	b.n	8002086 <ADC_Enable+0xa2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d1d8      	bne.n	8002036 <ADC_Enable+0x52>
 8002084:	2300      	movs	r3, #0
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000000 	.word	0x20000000
 8002094:	431bde83 	.word	0x431bde83

08002098 <ADC_ConversionStop_Disable>:
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d12e      	bne.n	8002110 <ADC_ConversionStop_Disable+0x78>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	609a      	str	r2, [r3, #8]
 80020c2:	f7ff fbc9 	bl	8001858 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	e01b      	b.n	8002102 <ADC_ConversionStop_Disable+0x6a>
 80020ca:	f7ff fbc5 	bl	8001858 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d914      	bls.n	8002102 <ADC_ConversionStop_Disable+0x6a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d10d      	bne.n	8002102 <ADC_ConversionStop_Disable+0x6a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	f043 0210 	orr.w	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	f043 0201 	orr.w	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020fe:	2301      	movs	r3, #1
 8002100:	e007      	b.n	8002112 <ADC_ConversionStop_Disable+0x7a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d0dc      	beq.n	80020ca <ADC_ConversionStop_Disable+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <__NVIC_SetPriorityGrouping>:
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	4b0c      	ldr	r3, [pc, #48]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
 8002168:	4b04      	ldr	r3, [pc, #16]	@ (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_EnableIRQ>:
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	2b00      	cmp	r3, #0
 8002190:	db0b      	blt.n	80021aa <__NVIC_EnableIRQ+0x2a>
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4906      	ldr	r1, [pc, #24]	@ (80021b4 <__NVIC_EnableIRQ+0x34>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2001      	movs	r0, #1
 80021a2:	fa00 f202 	lsl.w	r2, r0, r2
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	@ (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	@ (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
 8002264:	4313      	orrs	r3, r2
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	@ 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <SysTick_Config>:
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
 8002286:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f7ff ff90 	bl	80021b8 <__NVIC_SetPriority>
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	2300      	movs	r3, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff2d 	bl	800211c <__NVIC_SetPriorityGrouping>
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	f7ff ff42 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff90 	bl	800220c <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5f 	bl	80021b8 <__NVIC_SetPriority>
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_EnableIRQ>:
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff35 	bl	8002180 <__NVIC_EnableIRQ>
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffa2 	bl	8002270 <SysTick_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_GPIO_Init>:
 8002338:	b480      	push	{r7}
 800233a:	b08b      	sub	sp, #44	@ 0x2c
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	e169      	b.n	8002620 <HAL_GPIO_Init+0x2e8>
 800234c:	2201      	movs	r2, #1
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	429a      	cmp	r2, r3
 8002366:	f040 8158 	bne.w	800261a <HAL_GPIO_Init+0x2e2>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a9a      	ldr	r2, [pc, #616]	@ (80025d8 <HAL_GPIO_Init+0x2a0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d05e      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
 8002374:	4a98      	ldr	r2, [pc, #608]	@ (80025d8 <HAL_GPIO_Init+0x2a0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d875      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 800237a:	4a98      	ldr	r2, [pc, #608]	@ (80025dc <HAL_GPIO_Init+0x2a4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d058      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
 8002380:	4a96      	ldr	r2, [pc, #600]	@ (80025dc <HAL_GPIO_Init+0x2a4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d86f      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 8002386:	4a96      	ldr	r2, [pc, #600]	@ (80025e0 <HAL_GPIO_Init+0x2a8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d052      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
 800238c:	4a94      	ldr	r2, [pc, #592]	@ (80025e0 <HAL_GPIO_Init+0x2a8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d869      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 8002392:	4a94      	ldr	r2, [pc, #592]	@ (80025e4 <HAL_GPIO_Init+0x2ac>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d04c      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
 8002398:	4a92      	ldr	r2, [pc, #584]	@ (80025e4 <HAL_GPIO_Init+0x2ac>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d863      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 800239e:	4a92      	ldr	r2, [pc, #584]	@ (80025e8 <HAL_GPIO_Init+0x2b0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d046      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
 80023a4:	4a90      	ldr	r2, [pc, #576]	@ (80025e8 <HAL_GPIO_Init+0x2b0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d85d      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 80023aa:	2b12      	cmp	r3, #18
 80023ac:	d82a      	bhi.n	8002404 <HAL_GPIO_Init+0xcc>
 80023ae:	2b12      	cmp	r3, #18
 80023b0:	d859      	bhi.n	8002466 <HAL_GPIO_Init+0x12e>
 80023b2:	a201      	add	r2, pc, #4	@ (adr r2, 80023b8 <HAL_GPIO_Init+0x80>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	08002433 	.word	0x08002433
 80023bc:	0800240d 	.word	0x0800240d
 80023c0:	0800241f 	.word	0x0800241f
 80023c4:	08002461 	.word	0x08002461
 80023c8:	08002467 	.word	0x08002467
 80023cc:	08002467 	.word	0x08002467
 80023d0:	08002467 	.word	0x08002467
 80023d4:	08002467 	.word	0x08002467
 80023d8:	08002467 	.word	0x08002467
 80023dc:	08002467 	.word	0x08002467
 80023e0:	08002467 	.word	0x08002467
 80023e4:	08002467 	.word	0x08002467
 80023e8:	08002467 	.word	0x08002467
 80023ec:	08002467 	.word	0x08002467
 80023f0:	08002467 	.word	0x08002467
 80023f4:	08002467 	.word	0x08002467
 80023f8:	08002467 	.word	0x08002467
 80023fc:	08002415 	.word	0x08002415
 8002400:	08002429 	.word	0x08002429
 8002404:	4a79      	ldr	r2, [pc, #484]	@ (80025ec <HAL_GPIO_Init+0x2b4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0xfa>
 800240a:	e02c      	b.n	8002466 <HAL_GPIO_Init+0x12e>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	623b      	str	r3, [r7, #32]
 8002412:	e029      	b.n	8002468 <HAL_GPIO_Init+0x130>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	3304      	adds	r3, #4
 800241a:	623b      	str	r3, [r7, #32]
 800241c:	e024      	b.n	8002468 <HAL_GPIO_Init+0x130>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	3308      	adds	r3, #8
 8002424:	623b      	str	r3, [r7, #32]
 8002426:	e01f      	b.n	8002468 <HAL_GPIO_Init+0x130>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	330c      	adds	r3, #12
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	e01a      	b.n	8002468 <HAL_GPIO_Init+0x130>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d102      	bne.n	8002440 <HAL_GPIO_Init+0x108>
 800243a:	2304      	movs	r3, #4
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	e013      	b.n	8002468 <HAL_GPIO_Init+0x130>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d105      	bne.n	8002454 <HAL_GPIO_Init+0x11c>
 8002448:	2308      	movs	r3, #8
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	611a      	str	r2, [r3, #16]
 8002452:	e009      	b.n	8002468 <HAL_GPIO_Init+0x130>
 8002454:	2308      	movs	r3, #8
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	615a      	str	r2, [r3, #20]
 800245e:	e003      	b.n	8002468 <HAL_GPIO_Init+0x130>
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x130>
 8002466:	bf00      	nop
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2bff      	cmp	r3, #255	@ 0xff
 800246c:	d801      	bhi.n	8002472 <HAL_GPIO_Init+0x13a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	e001      	b.n	8002476 <HAL_GPIO_Init+0x13e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2bff      	cmp	r3, #255	@ 0xff
 800247c:	d802      	bhi.n	8002484 <HAL_GPIO_Init+0x14c>
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	e002      	b.n	800248a <HAL_GPIO_Init+0x152>
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	3b08      	subs	r3, #8
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	210f      	movs	r1, #15
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	401a      	ands	r2, r3
 800249c:	6a39      	ldr	r1, [r7, #32]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	431a      	orrs	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80b1 	beq.w	800261a <HAL_GPIO_Init+0x2e2>
 80024b8:	4b4d      	ldr	r3, [pc, #308]	@ (80025f0 <HAL_GPIO_Init+0x2b8>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	4a4c      	ldr	r2, [pc, #304]	@ (80025f0 <HAL_GPIO_Init+0x2b8>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6193      	str	r3, [r2, #24]
 80024c4:	4b4a      	ldr	r3, [pc, #296]	@ (80025f0 <HAL_GPIO_Init+0x2b8>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4a48      	ldr	r2, [pc, #288]	@ (80025f4 <HAL_GPIO_Init+0x2bc>)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	3302      	adds	r3, #2
 80024d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	220f      	movs	r2, #15
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4013      	ands	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a40      	ldr	r2, [pc, #256]	@ (80025f8 <HAL_GPIO_Init+0x2c0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d013      	beq.n	8002524 <HAL_GPIO_Init+0x1ec>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a3f      	ldr	r2, [pc, #252]	@ (80025fc <HAL_GPIO_Init+0x2c4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00d      	beq.n	8002520 <HAL_GPIO_Init+0x1e8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a3e      	ldr	r2, [pc, #248]	@ (8002600 <HAL_GPIO_Init+0x2c8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d007      	beq.n	800251c <HAL_GPIO_Init+0x1e4>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a3d      	ldr	r2, [pc, #244]	@ (8002604 <HAL_GPIO_Init+0x2cc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d101      	bne.n	8002518 <HAL_GPIO_Init+0x1e0>
 8002514:	2303      	movs	r3, #3
 8002516:	e006      	b.n	8002526 <HAL_GPIO_Init+0x1ee>
 8002518:	2304      	movs	r3, #4
 800251a:	e004      	b.n	8002526 <HAL_GPIO_Init+0x1ee>
 800251c:	2302      	movs	r3, #2
 800251e:	e002      	b.n	8002526 <HAL_GPIO_Init+0x1ee>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_GPIO_Init+0x1ee>
 8002524:	2300      	movs	r3, #0
 8002526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002528:	f002 0203 	and.w	r2, r2, #3
 800252c:	0092      	lsls	r2, r2, #2
 800252e:	4093      	lsls	r3, r2
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	492f      	ldr	r1, [pc, #188]	@ (80025f4 <HAL_GPIO_Init+0x2bc>)
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	3302      	adds	r3, #2
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d006      	beq.n	800255e <HAL_GPIO_Init+0x226>
 8002550:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	492c      	ldr	r1, [pc, #176]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x234>
 800255e:	4b2a      	ldr	r3, [pc, #168]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	43db      	mvns	r3, r3
 8002566:	4928      	ldr	r1, [pc, #160]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 8002568:	4013      	ands	r3, r2
 800256a:	608b      	str	r3, [r1, #8]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <HAL_GPIO_Init+0x24e>
 8002578:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	4922      	ldr	r1, [pc, #136]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	60cb      	str	r3, [r1, #12]
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x25c>
 8002586:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	43db      	mvns	r3, r3
 800258e:	491e      	ldr	r1, [pc, #120]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 8002590:	4013      	ands	r3, r2
 8002592:	60cb      	str	r3, [r1, #12]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d006      	beq.n	80025ae <HAL_GPIO_Init+0x276>
 80025a0:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4918      	ldr	r1, [pc, #96]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x284>
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	4914      	ldr	r1, [pc, #80]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d021      	beq.n	800260c <HAL_GPIO_Init+0x2d4>
 80025c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	490e      	ldr	r1, [pc, #56]	@ (8002608 <HAL_GPIO_Init+0x2d0>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
 80025d4:	e021      	b.n	800261a <HAL_GPIO_Init+0x2e2>
 80025d6:	bf00      	nop
 80025d8:	10320000 	.word	0x10320000
 80025dc:	10310000 	.word	0x10310000
 80025e0:	10220000 	.word	0x10220000
 80025e4:	10210000 	.word	0x10210000
 80025e8:	10120000 	.word	0x10120000
 80025ec:	10110000 	.word	0x10110000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010000 	.word	0x40010000
 80025f8:	40010800 	.word	0x40010800
 80025fc:	40010c00 	.word	0x40010c00
 8002600:	40011000 	.word	0x40011000
 8002604:	40011400 	.word	0x40011400
 8002608:	40010400 	.word	0x40010400
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <HAL_GPIO_Init+0x304>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	43db      	mvns	r3, r3
 8002614:	4909      	ldr	r1, [pc, #36]	@ (800263c <HAL_GPIO_Init+0x304>)
 8002616:	4013      	ands	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	3301      	adds	r3, #1
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	f47f ae8e 	bne.w	800234c <HAL_GPIO_Init+0x14>
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	372c      	adds	r7, #44	@ 0x2c
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40010400 	.word	0x40010400

08002640 <HAL_GPIO_WritePin>:
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	707b      	strb	r3, [r7, #1]
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_WritePin+0x1e>
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	611a      	str	r2, [r3, #16]
 800265c:	e003      	b.n	8002666 <HAL_GPIO_WritePin+0x26>
 800265e:	887b      	ldrh	r3, [r7, #2]
 8002660:	041a      	lsls	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	611a      	str	r2, [r3, #16]
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_RCC_OscConfig>:
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x12>
 800267e:	2301      	movs	r3, #1
 8002680:	e272      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8087 	beq.w	800279e <HAL_RCC_OscConfig+0x12e>
 8002690:	4b92      	ldr	r3, [pc, #584]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b04      	cmp	r3, #4
 800269a:	d00c      	beq.n	80026b6 <HAL_RCC_OscConfig+0x46>
 800269c:	4b8f      	ldr	r3, [pc, #572]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d112      	bne.n	80026ce <HAL_RCC_OscConfig+0x5e>
 80026a8:	4b8c      	ldr	r3, [pc, #560]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b4:	d10b      	bne.n	80026ce <HAL_RCC_OscConfig+0x5e>
 80026b6:	4b89      	ldr	r3, [pc, #548]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d06c      	beq.n	800279c <HAL_RCC_OscConfig+0x12c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d168      	bne.n	800279c <HAL_RCC_OscConfig+0x12c>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e24c      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x76>
 80026d8:	4b80      	ldr	r3, [pc, #512]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a7f      	ldr	r2, [pc, #508]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	e02e      	b.n	8002744 <HAL_RCC_OscConfig+0xd4>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x98>
 80026ee:	4b7b      	ldr	r3, [pc, #492]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7a      	ldr	r2, [pc, #488]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b78      	ldr	r3, [pc, #480]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a77      	ldr	r2, [pc, #476]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002700:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e01d      	b.n	8002744 <HAL_RCC_OscConfig+0xd4>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0xbc>
 8002712:	4b72      	ldr	r3, [pc, #456]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a71      	ldr	r2, [pc, #452]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	4b6f      	ldr	r3, [pc, #444]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a6e      	ldr	r2, [pc, #440]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e00b      	b.n	8002744 <HAL_RCC_OscConfig+0xd4>
 800272c:	4b6b      	ldr	r3, [pc, #428]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a6a      	ldr	r2, [pc, #424]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b68      	ldr	r3, [pc, #416]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a67      	ldr	r2, [pc, #412]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 800273e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d013      	beq.n	8002774 <HAL_RCC_OscConfig+0x104>
 800274c:	f7ff f884 	bl	8001858 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0xf6>
 8002754:	f7ff f880 	bl	8001858 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	@ 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0xf6>
 8002762:	2303      	movs	r3, #3
 8002764:	e200      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002766:	4b5d      	ldr	r3, [pc, #372]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0xe4>
 8002772:	e014      	b.n	800279e <HAL_RCC_OscConfig+0x12e>
 8002774:	f7ff f870 	bl	8001858 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x11e>
 800277c:	f7ff f86c 	bl	8001858 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	@ 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x11e>
 800278a:	2303      	movs	r3, #3
 800278c:	e1ec      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 800278e:	4b53      	ldr	r3, [pc, #332]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x10c>
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x12e>
 800279c:	bf00      	nop
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d063      	beq.n	8002872 <HAL_RCC_OscConfig+0x202>
 80027aa:	4b4c      	ldr	r3, [pc, #304]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_RCC_OscConfig+0x15e>
 80027b6:	4b49      	ldr	r3, [pc, #292]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d11c      	bne.n	80027fc <HAL_RCC_OscConfig+0x18c>
 80027c2:	4b46      	ldr	r3, [pc, #280]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d116      	bne.n	80027fc <HAL_RCC_OscConfig+0x18c>
 80027ce:	4b43      	ldr	r3, [pc, #268]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_RCC_OscConfig+0x176>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_OscConfig+0x176>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e1c0      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 80027e6:	4b3d      	ldr	r3, [pc, #244]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4939      	ldr	r1, [pc, #228]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
 80027fa:	e03a      	b.n	8002872 <HAL_RCC_OscConfig+0x202>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_OscConfig+0x1d6>
 8002804:	4b36      	ldr	r3, [pc, #216]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	f7ff f825 	bl	8001858 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x1b4>
 8002812:	f7ff f821 	bl	8001858 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x1b4>
 8002820:	2303      	movs	r3, #3
 8002822:	e1a1      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002824:	4b2d      	ldr	r3, [pc, #180]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x1a2>
 8002830:	4b2a      	ldr	r3, [pc, #168]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4927      	ldr	r1, [pc, #156]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
 8002844:	e015      	b.n	8002872 <HAL_RCC_OscConfig+0x202>
 8002846:	4b26      	ldr	r3, [pc, #152]	@ (80028e0 <HAL_RCC_OscConfig+0x270>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f7ff f804 	bl	8001858 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x1f6>
 8002854:	f7ff f800 	bl	8001858 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x1f6>
 8002862:	2303      	movs	r3, #3
 8002864:	e180      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002866:	4b1d      	ldr	r3, [pc, #116]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x1e4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d03a      	beq.n	80028f4 <HAL_RCC_OscConfig+0x284>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d019      	beq.n	80028ba <HAL_RCC_OscConfig+0x24a>
 8002886:	4b17      	ldr	r3, [pc, #92]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f7fe ffe4 	bl	8001858 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x236>
 8002894:	f7fe ffe0 	bl	8001858 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x236>
 80028a2:	2303      	movs	r3, #3
 80028a4:	e160      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <HAL_RCC_OscConfig+0x26c>)
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x224>
 80028b2:	2001      	movs	r0, #1
 80028b4:	f000 faba 	bl	8002e2c <RCC_Delay>
 80028b8:	e01c      	b.n	80028f4 <HAL_RCC_OscConfig+0x284>
 80028ba:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <HAL_RCC_OscConfig+0x274>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f7fe ffca 	bl	8001858 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]
 80028c6:	e00f      	b.n	80028e8 <HAL_RCC_OscConfig+0x278>
 80028c8:	f7fe ffc6 	bl	8001858 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d908      	bls.n	80028e8 <HAL_RCC_OscConfig+0x278>
 80028d6:	2303      	movs	r3, #3
 80028d8:	e146      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000
 80028e0:	42420000 	.word	0x42420000
 80028e4:	42420480 	.word	0x42420480
 80028e8:	4b92      	ldr	r3, [pc, #584]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e9      	bne.n	80028c8 <HAL_RCC_OscConfig+0x258>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80a6 	beq.w	8002a4e <HAL_RCC_OscConfig+0x3de>
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
 8002906:	4b8b      	ldr	r3, [pc, #556]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10d      	bne.n	800292e <HAL_RCC_OscConfig+0x2be>
 8002912:	4b88      	ldr	r3, [pc, #544]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a87      	ldr	r2, [pc, #540]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800291c:	61d3      	str	r3, [r2, #28]
 800291e:	4b85      	ldr	r3, [pc, #532]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2301      	movs	r3, #1
 800292c:	75fb      	strb	r3, [r7, #23]
 800292e:	4b82      	ldr	r3, [pc, #520]	@ (8002b38 <HAL_RCC_OscConfig+0x4c8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d118      	bne.n	800296c <HAL_RCC_OscConfig+0x2fc>
 800293a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b38 <HAL_RCC_OscConfig+0x4c8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b38 <HAL_RCC_OscConfig+0x4c8>)
 8002940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	f7fe ff87 	bl	8001858 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x2f0>
 800294e:	f7fe ff83 	bl	8001858 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b64      	cmp	r3, #100	@ 0x64
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x2f0>
 800295c:	2303      	movs	r3, #3
 800295e:	e103      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002960:	4b75      	ldr	r3, [pc, #468]	@ (8002b38 <HAL_RCC_OscConfig+0x4c8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x2de>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d106      	bne.n	8002982 <HAL_RCC_OscConfig+0x312>
 8002974:	4b6f      	ldr	r3, [pc, #444]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	4a6e      	ldr	r2, [pc, #440]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6213      	str	r3, [r2, #32]
 8002980:	e02d      	b.n	80029de <HAL_RCC_OscConfig+0x36e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x334>
 800298a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	4a69      	ldr	r2, [pc, #420]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	6213      	str	r3, [r2, #32]
 8002996:	4b67      	ldr	r3, [pc, #412]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4a66      	ldr	r2, [pc, #408]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	f023 0304 	bic.w	r3, r3, #4
 80029a0:	6213      	str	r3, [r2, #32]
 80029a2:	e01c      	b.n	80029de <HAL_RCC_OscConfig+0x36e>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d10c      	bne.n	80029c6 <HAL_RCC_OscConfig+0x356>
 80029ac:	4b61      	ldr	r3, [pc, #388]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4a60      	ldr	r2, [pc, #384]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 80029b2:	f043 0304 	orr.w	r3, r3, #4
 80029b6:	6213      	str	r3, [r2, #32]
 80029b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6213      	str	r3, [r2, #32]
 80029c4:	e00b      	b.n	80029de <HAL_RCC_OscConfig+0x36e>
 80029c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	6213      	str	r3, [r2, #32]
 80029d2:	4b58      	ldr	r3, [pc, #352]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4a57      	ldr	r2, [pc, #348]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	6213      	str	r3, [r2, #32]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d015      	beq.n	8002a12 <HAL_RCC_OscConfig+0x3a2>
 80029e6:	f7fe ff37 	bl	8001858 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x394>
 80029ee:	f7fe ff33 	bl	8001858 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x394>
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0b1      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002a04:	4b4b      	ldr	r3, [pc, #300]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0ee      	beq.n	80029ee <HAL_RCC_OscConfig+0x37e>
 8002a10:	e014      	b.n	8002a3c <HAL_RCC_OscConfig+0x3cc>
 8002a12:	f7fe ff21 	bl	8001858 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
 8002a1a:	f7fe ff1d 	bl	8001858 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e09b      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002a30:	4b40      	ldr	r3, [pc, #256]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ee      	bne.n	8002a1a <HAL_RCC_OscConfig+0x3aa>
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3de>
 8002a42:	4b3c      	ldr	r3, [pc, #240]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	4a3b      	ldr	r2, [pc, #236]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a4c:	61d3      	str	r3, [r2, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8087 	beq.w	8002b66 <HAL_RCC_OscConfig+0x4f6>
 8002a58:	4b36      	ldr	r3, [pc, #216]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d061      	beq.n	8002b28 <HAL_RCC_OscConfig+0x4b8>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d146      	bne.n	8002afa <HAL_RCC_OscConfig+0x48a>
 8002a6c:	4b33      	ldr	r3, [pc, #204]	@ (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	f7fe fef1 	bl	8001858 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x41c>
 8002a7a:	f7fe feed 	bl	8001858 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x41c>
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e06d      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002a8c:	4b29      	ldr	r3, [pc, #164]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x40a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa0:	d108      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x444>
 8002aa2:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	4921      	ldr	r1, [pc, #132]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a19      	ldr	r1, [r3, #32]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	491b      	ldr	r1, [pc, #108]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
 8002acc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	f7fe fec1 	bl	8001858 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x47c>
 8002ada:	f7fe febd 	bl	8001858 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x47c>
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e03d      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002aec:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x46a>
 8002af8:	e035      	b.n	8002b66 <HAL_RCC_OscConfig+0x4f6>
 8002afa:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f7fe feaa 	bl	8001858 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x4aa>
 8002b08:	f7fe fea6 	bl	8001858 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x4aa>
 8002b16:	2303      	movs	r3, #3
 8002b18:	e026      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x498>
 8002b26:	e01e      	b.n	8002b66 <HAL_RCC_OscConfig+0x4f6>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_OscConfig+0x4d0>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e019      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	42420060 	.word	0x42420060
 8002b40:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <HAL_RCC_OscConfig+0x500>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x4f2>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x4f6>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_RCC_OscConfig+0x4f8>
 8002b66:	2300      	movs	r3, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_RCC_ClockConfig>:
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x14>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0d0      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
 8002b88:	4b6a      	ldr	r3, [pc, #424]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d910      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x44>
 8002b96:	4b67      	ldr	r3, [pc, #412]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 0207 	bic.w	r2, r3, #7
 8002b9e:	4965      	ldr	r1, [pc, #404]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
 8002ba6:	4b63      	ldr	r3, [pc, #396]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x44>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0b8      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x92>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x68>
 8002bd0:	4b59      	ldr	r3, [pc, #356]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bda:	6053      	str	r3, [r2, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x80>
 8002be8:	4b53      	ldr	r3, [pc, #332]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a52      	ldr	r2, [pc, #328]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002bf2:	6053      	str	r3, [r2, #4]
 8002bf4:	4b50      	ldr	r3, [pc, #320]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	494d      	ldr	r1, [pc, #308]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d040      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x120>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xb6>
 8002c1a:	4b47      	ldr	r3, [pc, #284]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d115      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e07f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xce>
 8002c32:	4b41      	ldr	r3, [pc, #260]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e073      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
 8002c42:	4b3d      	ldr	r3, [pc, #244]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e06b      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
 8002c52:	4b39      	ldr	r3, [pc, #228]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4936      	ldr	r1, [pc, #216]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
 8002c64:	f7fe fdf8 	bl	8001858 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
 8002c6c:	f7fe fdf4 	bl	8001858 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e053      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
 8002c82:	4b2d      	ldr	r3, [pc, #180]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 020c 	and.w	r2, r3, #12
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1eb      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xf8>
 8002c94:	4b27      	ldr	r3, [pc, #156]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d210      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x150>
 8002ca2:	4b24      	ldr	r3, [pc, #144]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 0207 	bic.w	r2, r3, #7
 8002caa:	4922      	ldr	r1, [pc, #136]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
 8002cb2:	4b20      	ldr	r3, [pc, #128]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x150>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e032      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1b6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x16e>
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4916      	ldr	r1, [pc, #88]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	604b      	str	r3, [r1, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x18e>
 8002cee:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	490e      	ldr	r1, [pc, #56]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
 8002d02:	f000 f821 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	490a      	ldr	r1, [pc, #40]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002d14:	5ccb      	ldrb	r3, [r1, r3]
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <HAL_RCC_ClockConfig+0x1cc>)
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <HAL_RCC_ClockConfig+0x1d0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fd56 	bl	80017d4 <HAL_InitTick>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40022000 	.word	0x40022000
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08004490 	.word	0x08004490
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000004 	.word	0x20000004

08002d48 <HAL_RCC_GetSysClockFreq>:
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	4b1e      	ldr	r3, [pc, #120]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x94>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d002      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x30>
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x36>
 8002d76:	e027      	b.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x80>
 8002d78:	4b19      	ldr	r3, [pc, #100]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	e027      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x86>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	0c9b      	lsrs	r3, r3, #18
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	4a17      	ldr	r2, [pc, #92]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d010      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x70>
 8002d96:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x94>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	0c5b      	lsrs	r3, r3, #17
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	4a11      	ldr	r2, [pc, #68]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002da2:	5cd3      	ldrb	r3, [r2, r3]
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002daa:	fb03 f202 	mul.w	r2, r3, r2
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e004      	b.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x7a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a0c      	ldr	r2, [pc, #48]	@ (8002dec <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dbc:	fb02 f303 	mul.w	r3, r2, r3
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	e002      	b.n	8002dce <HAL_RCC_GetSysClockFreq+0x86>
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	bf00      	nop
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	007a1200 	.word	0x007a1200
 8002de4:	080044a8 	.word	0x080044a8
 8002de8:	080044b8 	.word	0x080044b8
 8002dec:	003d0900 	.word	0x003d0900

08002df0 <HAL_RCC_GetHCLKFreq>:
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4b02      	ldr	r3, [pc, #8]	@ (8002e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	20000000 	.word	0x20000000

08002e04 <HAL_RCC_GetPCLK2Freq>:
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	f7ff fff2 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	0adb      	lsrs	r3, r3, #11
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	4903      	ldr	r1, [pc, #12]	@ (8002e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	080044a0 	.word	0x080044a0

08002e2c <RCC_Delay>:
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	4b0a      	ldr	r3, [pc, #40]	@ (8002e60 <RCC_Delay+0x34>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0a      	ldr	r2, [pc, #40]	@ (8002e64 <RCC_Delay+0x38>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0a5b      	lsrs	r3, r3, #9
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	bf00      	nop
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1e5a      	subs	r2, r3, #1
 8002e4e:	60fa      	str	r2, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f9      	bne.n	8002e48 <RCC_Delay+0x1c>
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	20000000 	.word	0x20000000
 8002e64:	10624dd3 	.word	0x10624dd3

08002e68 <HAL_RCCEx_PeriphCLKConfig>:
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d07d      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8002e84:	2300      	movs	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]
 8002e88:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10d      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8002e94:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	4a4b      	ldr	r2, [pc, #300]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	61d3      	str	r3, [r2, #28]
 8002ea0:	4b49      	ldr	r3, [pc, #292]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2301      	movs	r3, #1
 8002eae:	75fb      	strb	r3, [r7, #23]
 8002eb0:	4b46      	ldr	r3, [pc, #280]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d118      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x86>
 8002ebc:	4b43      	ldr	r3, [pc, #268]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a42      	ldr	r2, [pc, #264]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	f7fe fcc6 	bl	8001858 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]
 8002ece:	e008      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ed0:	f7fe fcc2 	bl	8001858 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	@ 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e06d      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002eee:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d02e      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d027      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	4a29      	ldr	r2, [pc, #164]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6213      	str	r3, [r2, #32]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d014      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f32:	f7fe fc91 	bl	8001858 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]
 8002f38:	e00a      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f3a:	f7fe fc8d 	bl	8001858 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e036      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x156>
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ee      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4917      	ldr	r1, [pc, #92]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	620b      	str	r3, [r1, #32]
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8002f74:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4a13      	ldr	r2, [pc, #76]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	61d3      	str	r3, [r2, #28]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	490b      	ldr	r1, [pc, #44]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002faa:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	4904      	ldr	r1, [pc, #16]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	42420440 	.word	0x42420440

08002fd4 <HAL_RCCEx_GetPeriphCLKFreq>:
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	2300      	movs	r3, #0
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	f200 808a 	bhi.w	8003112 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d045      	beq.n	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d075      	beq.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800300a:	e082      	b.n	8003112 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800300c:	4b46      	ldr	r3, [pc, #280]	@ (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b45      	ldr	r3, [pc, #276]	@ (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d07b      	beq.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	0c9b      	lsrs	r3, r3, #18
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	4a41      	ldr	r2, [pc, #260]	@ (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003028:	5cd3      	ldrb	r3, [r2, r3]
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d015      	beq.n	8003062 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
 8003036:	4b3c      	ldr	r3, [pc, #240]	@ (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0c5b      	lsrs	r3, r3, #17
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	4a3b      	ldr	r2, [pc, #236]	@ (8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003050:	4a38      	ldr	r2, [pc, #224]	@ (8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	fbb2 f2f3 	udiv	r2, r2, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	e004      	b.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4a34      	ldr	r2, [pc, #208]	@ (8003138 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	4b2e      	ldr	r3, [pc, #184]	@ (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003074:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003078:	d102      	bne.n	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e04a      	b.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4a2d      	ldr	r2, [pc, #180]	@ (800313c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	e042      	b.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8003090:	4b25      	ldr	r3, [pc, #148]	@ (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030a0:	d108      	bne.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80030ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	e01f      	b.n	80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030be:	d109      	bne.n	80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80030c0:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80030cc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	e00f      	b.n	80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030de:	d11c      	bne.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030e0:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d016      	beq.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030ec:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	e012      	b.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030f4:	e011      	b.n	800311a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030f6:	f7ff fe85 	bl	8002e04 <HAL_RCC_GetPCLK2Freq>
 80030fa:	4602      	mov	r2, r0
 80030fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	0b9b      	lsrs	r3, r3, #14
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	3301      	adds	r3, #1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	e004      	b.n	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003112:	bf00      	nop
 8003114:	e002      	b.n	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8003116:	bf00      	nop
 8003118:	e000      	b.n	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800311a:	bf00      	nop
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4618      	mov	r0, r3
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	080044bc 	.word	0x080044bc
 8003130:	080044cc 	.word	0x080044cc
 8003134:	007a1200 	.word	0x007a1200
 8003138:	003d0900 	.word	0x003d0900
 800313c:	aaaaaaab 	.word	0xaaaaaaab

08003140 <HAL_TIM_Base_Init>:
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_TIM_Base_Init+0x12>
 800314e:	2301      	movs	r3, #1
 8003150:	e041      	b.n	80031d6 <HAL_TIM_Base_Init+0x96>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_TIM_Base_Init+0x2c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fe f980 	bl	800146c <HAL_TIM_Base_MspInit>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f000 fc9c 	bl	8003abc <TIM_Base_SetConfig>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80031d4:	2300      	movs	r3, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <HAL_TIM_Base_Start_IT>:
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d001      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x18>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e03a      	b.n	800326e <HAL_TIM_Base_Start_IT+0x8e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	60da      	str	r2, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a18      	ldr	r2, [pc, #96]	@ (8003278 <HAL_TIM_Base_Start_IT+0x98>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x58>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003222:	d009      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x58>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a14      	ldr	r2, [pc, #80]	@ (800327c <HAL_TIM_Base_Start_IT+0x9c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_TIM_Base_Start_IT+0x58>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a13      	ldr	r2, [pc, #76]	@ (8003280 <HAL_TIM_Base_Start_IT+0xa0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d111      	bne.n	800325c <HAL_TIM_Base_Start_IT+0x7c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b06      	cmp	r3, #6
 8003248:	d010      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x8c>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e007      	b.n	800326c <HAL_TIM_Base_Start_IT+0x8c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40000400 	.word	0x40000400
 8003280:	40000800 	.word	0x40000800

08003284 <HAL_TIM_PWM_Init>:
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_PWM_Init+0x12>
 8003292:	2301      	movs	r3, #1
 8003294:	e041      	b.n	800331a <HAL_TIM_PWM_Init+0x96>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_PWM_Init+0x2c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f839 	bl	8003322 <HAL_TIM_PWM_MspInit>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 fbfa 	bl	8003abc <TIM_Base_SetConfig>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003318:	2300      	movs	r3, #0
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_TIM_PWM_MspInit>:
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_Encoder_Init>:
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_TIM_Encoder_Init+0x14>
 8003344:	2301      	movs	r3, #1
 8003346:	e093      	b.n	8003470 <HAL_TIM_Encoder_Init+0x13c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d106      	bne.n	8003362 <HAL_TIM_Encoder_Init+0x2e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fe f8a9 	bl	80014b4 <HAL_TIM_Encoder_MspInit>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003378:	f023 0307 	bic.w	r3, r3, #7
 800337c:	6093      	str	r3, [r2, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	4619      	mov	r1, r3
 8003388:	4610      	mov	r0, r2
 800338a:	f000 fb97 	bl	8003abc <TIM_Base_SetConfig>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	4313      	orrs	r3, r2
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80033d4:	f023 030c 	bic.w	r3, r3, #12
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	4313      	orrs	r3, r2
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	011a      	lsls	r2, r3, #4
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	031b      	lsls	r3, r3, #12
 8003404:	4313      	orrs	r3, r2
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	4313      	orrs	r3, r2
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	619a      	str	r2, [r3, #24]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800346e:	2300      	movs	r3, #0
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_TIM_Encoder_Start>:
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003490:	73bb      	strb	r3, [r7, #14]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003498:	737b      	strb	r3, [r7, #13]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80034a0:	733b      	strb	r3, [r7, #12]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d110      	bne.n	80034ca <HAL_TIM_Encoder_Start+0x52>
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d102      	bne.n	80034b4 <HAL_TIM_Encoder_Start+0x3c>
 80034ae:	7b7b      	ldrb	r3, [r7, #13]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d001      	beq.n	80034b8 <HAL_TIM_Encoder_Start+0x40>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e069      	b.n	800358c <HAL_TIM_Encoder_Start+0x114>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034c8:	e031      	b.n	800352e <HAL_TIM_Encoder_Start+0xb6>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d110      	bne.n	80034f2 <HAL_TIM_Encoder_Start+0x7a>
 80034d0:	7bbb      	ldrb	r3, [r7, #14]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d102      	bne.n	80034dc <HAL_TIM_Encoder_Start+0x64>
 80034d6:	7b3b      	ldrb	r3, [r7, #12]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d001      	beq.n	80034e0 <HAL_TIM_Encoder_Start+0x68>
 80034dc:	2301      	movs	r3, #1
 80034de:	e055      	b.n	800358c <HAL_TIM_Encoder_Start+0x114>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034f0:	e01d      	b.n	800352e <HAL_TIM_Encoder_Start+0xb6>
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d108      	bne.n	800350a <HAL_TIM_Encoder_Start+0x92>
 80034f8:	7bbb      	ldrb	r3, [r7, #14]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_TIM_Encoder_Start+0x92>
 80034fe:	7b7b      	ldrb	r3, [r7, #13]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d102      	bne.n	800350a <HAL_TIM_Encoder_Start+0x92>
 8003504:	7b3b      	ldrb	r3, [r7, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d001      	beq.n	800350e <HAL_TIM_Encoder_Start+0x96>
 800350a:	2301      	movs	r3, #1
 800350c:	e03e      	b.n	800358c <HAL_TIM_Encoder_Start+0x114>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_TIM_Encoder_Start+0xc4>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d008      	beq.n	800354c <HAL_TIM_Encoder_Start+0xd4>
 800353a:	e00f      	b.n	800355c <HAL_TIM_Encoder_Start+0xe4>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2201      	movs	r2, #1
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fd45 	bl	8003fd4 <TIM_CCxChannelCmd>
 800354a:	e016      	b.n	800357a <HAL_TIM_Encoder_Start+0x102>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2201      	movs	r2, #1
 8003552:	2104      	movs	r1, #4
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fd3d 	bl	8003fd4 <TIM_CCxChannelCmd>
 800355a:	e00e      	b.n	800357a <HAL_TIM_Encoder_Start+0x102>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2201      	movs	r2, #1
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fd35 	bl	8003fd4 <TIM_CCxChannelCmd>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	2104      	movs	r1, #4
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fd2e 	bl	8003fd4 <TIM_CCxChannelCmd>
 8003578:	bf00      	nop
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	2300      	movs	r3, #0
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_TIM_IRQHandler>:
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d020      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x64>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x64>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0202 	mvn.w	r2, #2
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	771a      	strb	r2, [r3, #28]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x52>
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd f896 	bl	8000710 <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0x5e>
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fa4d 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fa53 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d020      	beq.n	8003644 <HAL_TIM_IRQHandler+0xb0>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <HAL_TIM_IRQHandler+0xb0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0204 	mvn.w	r2, #4
 8003614:	611a      	str	r2, [r3, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	771a      	strb	r2, [r3, #28]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x9e>
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fd f870 	bl	8000710 <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0xaa>
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fa27 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 fa2d 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d020      	beq.n	8003690 <HAL_TIM_IRQHandler+0xfc>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01b      	beq.n	8003690 <HAL_TIM_IRQHandler+0xfc>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0208 	mvn.w	r2, #8
 8003660:	611a      	str	r2, [r3, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2204      	movs	r2, #4
 8003666:	771a      	strb	r2, [r3, #28]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_TIM_IRQHandler+0xea>
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd f84a 	bl	8000710 <HAL_TIM_IC_CaptureCallback>
 800367c:	e005      	b.n	800368a <HAL_TIM_IRQHandler+0xf6>
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fa01 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fa07 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0310 	and.w	r3, r3, #16
 8003696:	2b00      	cmp	r3, #0
 8003698:	d020      	beq.n	80036dc <HAL_TIM_IRQHandler+0x148>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01b      	beq.n	80036dc <HAL_TIM_IRQHandler+0x148>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0210 	mvn.w	r2, #16
 80036ac:	611a      	str	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2208      	movs	r2, #8
 80036b2:	771a      	strb	r2, [r3, #28]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_TIM_IRQHandler+0x136>
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fd f824 	bl	8000710 <HAL_TIM_IC_CaptureCallback>
 80036c8:	e005      	b.n	80036d6 <HAL_TIM_IRQHandler+0x142>
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f9db 	bl	8003a86 <HAL_TIM_OC_DelayElapsedCallback>
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f9e1 	bl	8003a98 <HAL_TIM_PWM_PulseFinishedCallback>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	771a      	strb	r2, [r3, #28]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00c      	beq.n	8003700 <HAL_TIM_IRQHandler+0x16c>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <HAL_TIM_IRQHandler+0x16c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0201 	mvn.w	r2, #1
 80036f8:	611a      	str	r2, [r3, #16]
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd fad4 	bl	8000ca8 <HAL_TIM_PeriodElapsedCallback>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00c      	beq.n	8003724 <HAL_TIM_IRQHandler+0x190>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <HAL_TIM_IRQHandler+0x190>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800371c:	611a      	str	r2, [r3, #16]
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fce3 	bl	80040ea <HAL_TIMEx_BreakCallback>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00c      	beq.n	8003748 <HAL_TIM_IRQHandler+0x1b4>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <HAL_TIM_IRQHandler+0x1b4>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003740:	611a      	str	r2, [r3, #16]
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f9b1 	bl	8003aaa <HAL_TIM_TriggerCallback>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <HAL_TIM_IRQHandler+0x1d8>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <HAL_TIM_IRQHandler+0x1d8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0220 	mvn.w	r2, #32
 8003764:	611a      	str	r2, [r3, #16]
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fcb6 	bl	80040d8 <HAL_TIMEx_CommutCallback>
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_PWM_ConfigChannel>:
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	2300      	movs	r3, #0
 8003782:	75fb      	strb	r3, [r7, #23]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800378e:	2302      	movs	r3, #2
 8003790:	e0ae      	b.n	80038f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b0c      	cmp	r3, #12
 800379e:	f200 809f 	bhi.w	80038e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037a2:	a201      	add	r2, pc, #4	@ (adr r2, 80037a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	080038e1 	.word	0x080038e1
 80037b0:	080038e1 	.word	0x080038e1
 80037b4:	080038e1 	.word	0x080038e1
 80037b8:	0800381d 	.word	0x0800381d
 80037bc:	080038e1 	.word	0x080038e1
 80037c0:	080038e1 	.word	0x080038e1
 80037c4:	080038e1 	.word	0x080038e1
 80037c8:	0800385f 	.word	0x0800385f
 80037cc:	080038e1 	.word	0x080038e1
 80037d0:	080038e1 	.word	0x080038e1
 80037d4:	080038e1 	.word	0x080038e1
 80037d8:	0800389f 	.word	0x0800389f
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f9d8 	bl	8003b98 <TIM_OC1_SetConfig>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0208 	orr.w	r2, r2, #8
 80037f6:	619a      	str	r2, [r3, #24]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0204 	bic.w	r2, r2, #4
 8003806:	619a      	str	r2, [r3, #24]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6999      	ldr	r1, [r3, #24]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	619a      	str	r2, [r3, #24]
 800381a:	e064      	b.n	80038e6 <HAL_TIM_PWM_ConfigChannel+0x172>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fa1e 	bl	8003c64 <TIM_OC2_SetConfig>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003836:	619a      	str	r2, [r3, #24]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003846:	619a      	str	r2, [r3, #24]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6999      	ldr	r1, [r3, #24]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	021a      	lsls	r2, r3, #8
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	619a      	str	r2, [r3, #24]
 800385c:	e043      	b.n	80038e6 <HAL_TIM_PWM_ConfigChannel+0x172>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fa67 	bl	8003d38 <TIM_OC3_SetConfig>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0208 	orr.w	r2, r2, #8
 8003878:	61da      	str	r2, [r3, #28]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0204 	bic.w	r2, r2, #4
 8003888:	61da      	str	r2, [r3, #28]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69d9      	ldr	r1, [r3, #28]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	61da      	str	r2, [r3, #28]
 800389c:	e023      	b.n	80038e6 <HAL_TIM_PWM_ConfigChannel+0x172>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fab1 	bl	8003e0c <TIM_OC4_SetConfig>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b8:	61da      	str	r2, [r3, #28]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038c8:	61da      	str	r2, [r3, #28]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69d9      	ldr	r1, [r3, #28]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	021a      	lsls	r2, r3, #8
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	61da      	str	r2, [r3, #28]
 80038de:	e002      	b.n	80038e6 <HAL_TIM_PWM_ConfigChannel+0x172>
 80038e0:	2301      	movs	r3, #1
 80038e2:	75fb      	strb	r3, [r7, #23]
 80038e4:	bf00      	nop
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_TIM_ConfigClockSource>:
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIM_ConfigClockSource+0x1c>
 8003910:	2302      	movs	r3, #2
 8003912:	e0b4      	b.n	8003a7e <HAL_TIM_ConfigClockSource+0x186>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800394c:	d03e      	beq.n	80039cc <HAL_TIM_ConfigClockSource+0xd4>
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003952:	f200 8087 	bhi.w	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800395a:	f000 8086 	beq.w	8003a6a <HAL_TIM_ConfigClockSource+0x172>
 800395e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003962:	d87f      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b70      	cmp	r3, #112	@ 0x70
 8003966:	d01a      	beq.n	800399e <HAL_TIM_ConfigClockSource+0xa6>
 8003968:	2b70      	cmp	r3, #112	@ 0x70
 800396a:	d87b      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b60      	cmp	r3, #96	@ 0x60
 800396e:	d050      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0x11a>
 8003970:	2b60      	cmp	r3, #96	@ 0x60
 8003972:	d877      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b50      	cmp	r3, #80	@ 0x50
 8003976:	d03c      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003978:	2b50      	cmp	r3, #80	@ 0x50
 800397a:	d873      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b40      	cmp	r3, #64	@ 0x40
 800397e:	d058      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x13a>
 8003980:	2b40      	cmp	r3, #64	@ 0x40
 8003982:	d86f      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003984:	2b30      	cmp	r3, #48	@ 0x30
 8003986:	d064      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003988:	2b30      	cmp	r3, #48	@ 0x30
 800398a:	d86b      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800398c:	2b20      	cmp	r3, #32
 800398e:	d060      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d867      	bhi.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05c      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 8003998:	2b10      	cmp	r3, #16
 800399a:	d05a      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x15a>
 800399c:	e062      	b.n	8003a64 <HAL_TIM_ConfigClockSource+0x16c>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6899      	ldr	r1, [r3, #8]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f000 faf2 	bl	8003f96 <TIM_ETR_SetConfig>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	e04f      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6899      	ldr	r1, [r3, #8]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f000 fadb 	bl	8003f96 <TIM_ETR_SetConfig>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	e03c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f000 fa52 	bl	8003ea8 <TIM_TI1_ConfigInputStage>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2150      	movs	r1, #80	@ 0x50
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 faa9 	bl	8003f62 <TIM_ITRx_SetConfig>
 8003a10:	e02c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f000 fa70 	bl	8003f04 <TIM_TI2_ConfigInputStage>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2160      	movs	r1, #96	@ 0x60
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fa99 	bl	8003f62 <TIM_ITRx_SetConfig>
 8003a30:	e01c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 fa32 	bl	8003ea8 <TIM_TI1_ConfigInputStage>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2140      	movs	r1, #64	@ 0x40
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fa89 	bl	8003f62 <TIM_ITRx_SetConfig>
 8003a50:	e00c      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f000 fa80 	bl	8003f62 <TIM_ITRx_SetConfig>
 8003a62:	e003      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
 8003a68:	e000      	b.n	8003a6c <HAL_TIM_ConfigClockSource+0x174>
 8003a6a:	bf00      	nop
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_TIM_OC_DelayElapsedCallback>:
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_TriggerCallback>:
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <TIM_Base_SetConfig>:
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a2f      	ldr	r2, [pc, #188]	@ (8003b8c <TIM_Base_SetConfig+0xd0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00b      	beq.n	8003aec <TIM_Base_SetConfig+0x30>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ada:	d007      	beq.n	8003aec <TIM_Base_SetConfig+0x30>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a2c      	ldr	r2, [pc, #176]	@ (8003b90 <TIM_Base_SetConfig+0xd4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d003      	beq.n	8003aec <TIM_Base_SetConfig+0x30>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a2b      	ldr	r2, [pc, #172]	@ (8003b94 <TIM_Base_SetConfig+0xd8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d108      	bne.n	8003afe <TIM_Base_SetConfig+0x42>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a22      	ldr	r2, [pc, #136]	@ (8003b8c <TIM_Base_SetConfig+0xd0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <TIM_Base_SetConfig+0x62>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b0c:	d007      	beq.n	8003b1e <TIM_Base_SetConfig+0x62>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1f      	ldr	r2, [pc, #124]	@ (8003b90 <TIM_Base_SetConfig+0xd4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_Base_SetConfig+0x62>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a1e      	ldr	r2, [pc, #120]	@ (8003b94 <TIM_Base_SetConfig+0xd8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d108      	bne.n	8003b30 <TIM_Base_SetConfig+0x74>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a0d      	ldr	r2, [pc, #52]	@ (8003b8c <TIM_Base_SetConfig+0xd0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d103      	bne.n	8003b64 <TIM_Base_SetConfig+0xa8>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	615a      	str	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <TIM_Base_SetConfig+0xc6>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40000800 	.word	0x40000800

08003b98 <TIM_OC1_SetConfig>:
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f023 0201 	bic.w	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	621a      	str	r2, [r3, #32]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 0302 	bic.w	r3, r3, #2
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a1c      	ldr	r2, [pc, #112]	@ (8003c60 <TIM_OC1_SetConfig+0xc8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10c      	bne.n	8003c0e <TIM_OC1_SetConfig+0x76>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0308 	bic.w	r3, r3, #8
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a13      	ldr	r2, [pc, #76]	@ (8003c60 <TIM_OC1_SetConfig+0xc8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d111      	bne.n	8003c3a <TIM_OC1_SetConfig+0xa2>
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	619a      	str	r2, [r3, #24]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	621a      	str	r2, [r3, #32]
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40012c00 	.word	0x40012c00

08003c64 <TIM_OC2_SetConfig>:
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f023 0210 	bic.w	r2, r3, #16
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	621a      	str	r2, [r3, #32]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f023 0320 	bic.w	r3, r3, #32
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003d34 <TIM_OC2_SetConfig+0xd0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10d      	bne.n	8003ce0 <TIM_OC2_SetConfig+0x7c>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a14      	ldr	r2, [pc, #80]	@ (8003d34 <TIM_OC2_SetConfig+0xd0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d113      	bne.n	8003d10 <TIM_OC2_SetConfig+0xac>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	619a      	str	r2, [r3, #24]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	621a      	str	r2, [r3, #32]
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	40012c00 	.word	0x40012c00

08003d38 <TIM_OC3_SetConfig>:
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	621a      	str	r2, [r3, #32]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a1d      	ldr	r2, [pc, #116]	@ (8003e08 <TIM_OC3_SetConfig+0xd0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10d      	bne.n	8003db2 <TIM_OC3_SetConfig+0x7a>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a14      	ldr	r2, [pc, #80]	@ (8003e08 <TIM_OC3_SetConfig+0xd0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d113      	bne.n	8003de2 <TIM_OC3_SetConfig+0xaa>
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	61da      	str	r2, [r3, #28]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	621a      	str	r2, [r3, #32]
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40012c00 	.word	0x40012c00

08003e0c <TIM_OC4_SetConfig>:
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	621a      	str	r2, [r3, #32]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	031b      	lsls	r3, r3, #12
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea4 <TIM_OC4_SetConfig+0x98>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d109      	bne.n	8003e80 <TIM_OC4_SetConfig+0x74>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	019b      	lsls	r3, r3, #6
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	61da      	str	r2, [r3, #28]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	621a      	str	r2, [r3, #32]
 8003e9a:	bf00      	nop
 8003e9c:	371c      	adds	r7, #28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	40012c00 	.word	0x40012c00

08003ea8 <TIM_TI1_ConfigInputStage>:
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	621a      	str	r2, [r3, #32]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f023 030a 	bic.w	r3, r3, #10
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	619a      	str	r2, [r3, #24]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	621a      	str	r2, [r3, #32]
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <TIM_TI2_ConfigInputStage>:
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0210 	bic.w	r2, r3, #16
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	621a      	str	r2, [r3, #32]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	031b      	lsls	r3, r3, #12
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	619a      	str	r2, [r3, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	621a      	str	r2, [r3, #32]
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <TIM_ITRx_SetConfig>:
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f043 0307 	orr.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <TIM_ETR_SetConfig>:
 8003f96:	b480      	push	{r7}
 8003f98:	b087      	sub	sp, #28
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	021a      	lsls	r2, r3, #8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr

08003fd4 <TIM_CCxChannelCmd>:
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a1a      	ldr	r2, [r3, #32]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	621a      	str	r2, [r3, #32]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	431a      	orrs	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	621a      	str	r2, [r3, #32]
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <HAL_TIMEx_MasterConfigSynchronization>:
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004030:	2302      	movs	r3, #2
 8004032:	e046      	b.n	80040c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004080:	d009      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a12      	ldr	r2, [pc, #72]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a10      	ldr	r2, [pc, #64]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10c      	bne.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80040c0:	2300      	movs	r3, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800

080040d8 <HAL_TIMEx_CommutCallback>:
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <HAL_TIMEx_BreakCallback>:
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <_ZdlPvj>:
 80040fc:	f000 b81b 	b.w	8004136 <_ZdlPv>

08004100 <_ZdaPv>:
 8004100:	f000 b819 	b.w	8004136 <_ZdlPv>

08004104 <_Znwj>:
 8004104:	2801      	cmp	r0, #1
 8004106:	bf38      	it	cc
 8004108:	2001      	movcc	r0, #1
 800410a:	b510      	push	{r4, lr}
 800410c:	4604      	mov	r4, r0
 800410e:	4620      	mov	r0, r4
 8004110:	f000 f824 	bl	800415c <malloc>
 8004114:	b100      	cbz	r0, 8004118 <_Znwj+0x14>
 8004116:	bd10      	pop	{r4, pc}
 8004118:	f000 f810 	bl	800413c <_ZSt15get_new_handlerv>
 800411c:	b908      	cbnz	r0, 8004122 <_Znwj+0x1e>
 800411e:	f000 f815 	bl	800414c <abort>
 8004122:	4780      	blx	r0
 8004124:	e7f3      	b.n	800410e <_Znwj+0xa>

08004126 <_Znaj>:
 8004126:	f7ff bfed 	b.w	8004104 <_Znwj>

0800412a <_ZSt17__throw_bad_allocv>:
 800412a:	b508      	push	{r3, lr}
 800412c:	f000 f80e 	bl	800414c <abort>

08004130 <_ZSt28__throw_bad_array_new_lengthv>:
 8004130:	b508      	push	{r3, lr}
 8004132:	f000 f80b 	bl	800414c <abort>

08004136 <_ZdlPv>:
 8004136:	f000 b819 	b.w	800416c <free>
	...

0800413c <_ZSt15get_new_handlerv>:
 800413c:	4b02      	ldr	r3, [pc, #8]	@ (8004148 <_ZSt15get_new_handlerv+0xc>)
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	f3bf 8f5b 	dmb	ish
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000700 	.word	0x20000700

0800414c <abort>:
 800414c:	2006      	movs	r0, #6
 800414e:	b508      	push	{r3, lr}
 8004150:	f000 f8f2 	bl	8004338 <raise>
 8004154:	2001      	movs	r0, #1
 8004156:	f7fd faba 	bl	80016ce <_exit>
	...

0800415c <malloc>:
 800415c:	4b02      	ldr	r3, [pc, #8]	@ (8004168 <malloc+0xc>)
 800415e:	4601      	mov	r1, r0
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	f000 b82d 	b.w	80041c0 <_malloc_r>
 8004166:	bf00      	nop
 8004168:	2000000c 	.word	0x2000000c

0800416c <free>:
 800416c:	4b02      	ldr	r3, [pc, #8]	@ (8004178 <free+0xc>)
 800416e:	4601      	mov	r1, r0
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	f000 b939 	b.w	80043e8 <_free_r>
 8004176:	bf00      	nop
 8004178:	2000000c 	.word	0x2000000c

0800417c <sbrk_aligned>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	4e0f      	ldr	r6, [pc, #60]	@ (80041bc <sbrk_aligned+0x40>)
 8004180:	460c      	mov	r4, r1
 8004182:	6831      	ldr	r1, [r6, #0]
 8004184:	4605      	mov	r5, r0
 8004186:	b911      	cbnz	r1, 800418e <sbrk_aligned+0x12>
 8004188:	f000 f8f2 	bl	8004370 <_sbrk_r>
 800418c:	6030      	str	r0, [r6, #0]
 800418e:	4621      	mov	r1, r4
 8004190:	4628      	mov	r0, r5
 8004192:	f000 f8ed 	bl	8004370 <_sbrk_r>
 8004196:	1c43      	adds	r3, r0, #1
 8004198:	d103      	bne.n	80041a2 <sbrk_aligned+0x26>
 800419a:	f04f 34ff 	mov.w	r4, #4294967295
 800419e:	4620      	mov	r0, r4
 80041a0:	bd70      	pop	{r4, r5, r6, pc}
 80041a2:	1cc4      	adds	r4, r0, #3
 80041a4:	f024 0403 	bic.w	r4, r4, #3
 80041a8:	42a0      	cmp	r0, r4
 80041aa:	d0f8      	beq.n	800419e <sbrk_aligned+0x22>
 80041ac:	1a21      	subs	r1, r4, r0
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 f8de 	bl	8004370 <_sbrk_r>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d1f2      	bne.n	800419e <sbrk_aligned+0x22>
 80041b8:	e7ef      	b.n	800419a <sbrk_aligned+0x1e>
 80041ba:	bf00      	nop
 80041bc:	20000704 	.word	0x20000704

080041c0 <_malloc_r>:
 80041c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041c4:	1ccd      	adds	r5, r1, #3
 80041c6:	f025 0503 	bic.w	r5, r5, #3
 80041ca:	3508      	adds	r5, #8
 80041cc:	2d0c      	cmp	r5, #12
 80041ce:	bf38      	it	cc
 80041d0:	250c      	movcc	r5, #12
 80041d2:	2d00      	cmp	r5, #0
 80041d4:	4606      	mov	r6, r0
 80041d6:	db01      	blt.n	80041dc <_malloc_r+0x1c>
 80041d8:	42a9      	cmp	r1, r5
 80041da:	d904      	bls.n	80041e6 <_malloc_r+0x26>
 80041dc:	230c      	movs	r3, #12
 80041de:	6033      	str	r3, [r6, #0]
 80041e0:	2000      	movs	r0, #0
 80041e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042bc <_malloc_r+0xfc>
 80041ea:	f000 f869 	bl	80042c0 <__malloc_lock>
 80041ee:	f8d8 3000 	ldr.w	r3, [r8]
 80041f2:	461c      	mov	r4, r3
 80041f4:	bb44      	cbnz	r4, 8004248 <_malloc_r+0x88>
 80041f6:	4629      	mov	r1, r5
 80041f8:	4630      	mov	r0, r6
 80041fa:	f7ff ffbf 	bl	800417c <sbrk_aligned>
 80041fe:	1c43      	adds	r3, r0, #1
 8004200:	4604      	mov	r4, r0
 8004202:	d158      	bne.n	80042b6 <_malloc_r+0xf6>
 8004204:	f8d8 4000 	ldr.w	r4, [r8]
 8004208:	4627      	mov	r7, r4
 800420a:	2f00      	cmp	r7, #0
 800420c:	d143      	bne.n	8004296 <_malloc_r+0xd6>
 800420e:	2c00      	cmp	r4, #0
 8004210:	d04b      	beq.n	80042aa <_malloc_r+0xea>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	4639      	mov	r1, r7
 8004216:	4630      	mov	r0, r6
 8004218:	eb04 0903 	add.w	r9, r4, r3
 800421c:	f000 f8a8 	bl	8004370 <_sbrk_r>
 8004220:	4581      	cmp	r9, r0
 8004222:	d142      	bne.n	80042aa <_malloc_r+0xea>
 8004224:	6821      	ldr	r1, [r4, #0]
 8004226:	4630      	mov	r0, r6
 8004228:	1a6d      	subs	r5, r5, r1
 800422a:	4629      	mov	r1, r5
 800422c:	f7ff ffa6 	bl	800417c <sbrk_aligned>
 8004230:	3001      	adds	r0, #1
 8004232:	d03a      	beq.n	80042aa <_malloc_r+0xea>
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	442b      	add	r3, r5
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	f8d8 3000 	ldr.w	r3, [r8]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	bb62      	cbnz	r2, 800429c <_malloc_r+0xdc>
 8004242:	f8c8 7000 	str.w	r7, [r8]
 8004246:	e00f      	b.n	8004268 <_malloc_r+0xa8>
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	1b52      	subs	r2, r2, r5
 800424c:	d420      	bmi.n	8004290 <_malloc_r+0xd0>
 800424e:	2a0b      	cmp	r2, #11
 8004250:	d917      	bls.n	8004282 <_malloc_r+0xc2>
 8004252:	1961      	adds	r1, r4, r5
 8004254:	42a3      	cmp	r3, r4
 8004256:	6025      	str	r5, [r4, #0]
 8004258:	bf18      	it	ne
 800425a:	6059      	strne	r1, [r3, #4]
 800425c:	6863      	ldr	r3, [r4, #4]
 800425e:	bf08      	it	eq
 8004260:	f8c8 1000 	streq.w	r1, [r8]
 8004264:	5162      	str	r2, [r4, r5]
 8004266:	604b      	str	r3, [r1, #4]
 8004268:	4630      	mov	r0, r6
 800426a:	f000 f82f 	bl	80042cc <__malloc_unlock>
 800426e:	f104 000b 	add.w	r0, r4, #11
 8004272:	1d23      	adds	r3, r4, #4
 8004274:	f020 0007 	bic.w	r0, r0, #7
 8004278:	1ac2      	subs	r2, r0, r3
 800427a:	bf1c      	itt	ne
 800427c:	1a1b      	subne	r3, r3, r0
 800427e:	50a3      	strne	r3, [r4, r2]
 8004280:	e7af      	b.n	80041e2 <_malloc_r+0x22>
 8004282:	6862      	ldr	r2, [r4, #4]
 8004284:	42a3      	cmp	r3, r4
 8004286:	bf0c      	ite	eq
 8004288:	f8c8 2000 	streq.w	r2, [r8]
 800428c:	605a      	strne	r2, [r3, #4]
 800428e:	e7eb      	b.n	8004268 <_malloc_r+0xa8>
 8004290:	4623      	mov	r3, r4
 8004292:	6864      	ldr	r4, [r4, #4]
 8004294:	e7ae      	b.n	80041f4 <_malloc_r+0x34>
 8004296:	463c      	mov	r4, r7
 8004298:	687f      	ldr	r7, [r7, #4]
 800429a:	e7b6      	b.n	800420a <_malloc_r+0x4a>
 800429c:	461a      	mov	r2, r3
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	42a3      	cmp	r3, r4
 80042a2:	d1fb      	bne.n	800429c <_malloc_r+0xdc>
 80042a4:	2300      	movs	r3, #0
 80042a6:	6053      	str	r3, [r2, #4]
 80042a8:	e7de      	b.n	8004268 <_malloc_r+0xa8>
 80042aa:	230c      	movs	r3, #12
 80042ac:	4630      	mov	r0, r6
 80042ae:	6033      	str	r3, [r6, #0]
 80042b0:	f000 f80c 	bl	80042cc <__malloc_unlock>
 80042b4:	e794      	b.n	80041e0 <_malloc_r+0x20>
 80042b6:	6005      	str	r5, [r0, #0]
 80042b8:	e7d6      	b.n	8004268 <_malloc_r+0xa8>
 80042ba:	bf00      	nop
 80042bc:	20000708 	.word	0x20000708

080042c0 <__malloc_lock>:
 80042c0:	4801      	ldr	r0, [pc, #4]	@ (80042c8 <__malloc_lock+0x8>)
 80042c2:	f000 b88f 	b.w	80043e4 <__retarget_lock_acquire_recursive>
 80042c6:	bf00      	nop
 80042c8:	20000848 	.word	0x20000848

080042cc <__malloc_unlock>:
 80042cc:	4801      	ldr	r0, [pc, #4]	@ (80042d4 <__malloc_unlock+0x8>)
 80042ce:	f000 b88a 	b.w	80043e6 <__retarget_lock_release_recursive>
 80042d2:	bf00      	nop
 80042d4:	20000848 	.word	0x20000848

080042d8 <memset>:
 80042d8:	4603      	mov	r3, r0
 80042da:	4402      	add	r2, r0
 80042dc:	4293      	cmp	r3, r2
 80042de:	d100      	bne.n	80042e2 <memset+0xa>
 80042e0:	4770      	bx	lr
 80042e2:	f803 1b01 	strb.w	r1, [r3], #1
 80042e6:	e7f9      	b.n	80042dc <memset+0x4>

080042e8 <_raise_r>:
 80042e8:	291f      	cmp	r1, #31
 80042ea:	b538      	push	{r3, r4, r5, lr}
 80042ec:	4605      	mov	r5, r0
 80042ee:	460c      	mov	r4, r1
 80042f0:	d904      	bls.n	80042fc <_raise_r+0x14>
 80042f2:	2316      	movs	r3, #22
 80042f4:	6003      	str	r3, [r0, #0]
 80042f6:	f04f 30ff 	mov.w	r0, #4294967295
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80042fe:	b112      	cbz	r2, 8004306 <_raise_r+0x1e>
 8004300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004304:	b94b      	cbnz	r3, 800431a <_raise_r+0x32>
 8004306:	4628      	mov	r0, r5
 8004308:	f000 f830 	bl	800436c <_getpid_r>
 800430c:	4622      	mov	r2, r4
 800430e:	4601      	mov	r1, r0
 8004310:	4628      	mov	r0, r5
 8004312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004316:	f000 b817 	b.w	8004348 <_kill_r>
 800431a:	2b01      	cmp	r3, #1
 800431c:	d00a      	beq.n	8004334 <_raise_r+0x4c>
 800431e:	1c59      	adds	r1, r3, #1
 8004320:	d103      	bne.n	800432a <_raise_r+0x42>
 8004322:	2316      	movs	r3, #22
 8004324:	6003      	str	r3, [r0, #0]
 8004326:	2001      	movs	r0, #1
 8004328:	e7e7      	b.n	80042fa <_raise_r+0x12>
 800432a:	2100      	movs	r1, #0
 800432c:	4620      	mov	r0, r4
 800432e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004332:	4798      	blx	r3
 8004334:	2000      	movs	r0, #0
 8004336:	e7e0      	b.n	80042fa <_raise_r+0x12>

08004338 <raise>:
 8004338:	4b02      	ldr	r3, [pc, #8]	@ (8004344 <raise+0xc>)
 800433a:	4601      	mov	r1, r0
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	f7ff bfd3 	b.w	80042e8 <_raise_r>
 8004342:	bf00      	nop
 8004344:	2000000c 	.word	0x2000000c

08004348 <_kill_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	2300      	movs	r3, #0
 800434c:	4d06      	ldr	r5, [pc, #24]	@ (8004368 <_kill_r+0x20>)
 800434e:	4604      	mov	r4, r0
 8004350:	4608      	mov	r0, r1
 8004352:	4611      	mov	r1, r2
 8004354:	602b      	str	r3, [r5, #0]
 8004356:	f7fd f9aa 	bl	80016ae <_kill>
 800435a:	1c43      	adds	r3, r0, #1
 800435c:	d102      	bne.n	8004364 <_kill_r+0x1c>
 800435e:	682b      	ldr	r3, [r5, #0]
 8004360:	b103      	cbz	r3, 8004364 <_kill_r+0x1c>
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	bd38      	pop	{r3, r4, r5, pc}
 8004366:	bf00      	nop
 8004368:	20000844 	.word	0x20000844

0800436c <_getpid_r>:
 800436c:	f7fd b998 	b.w	80016a0 <_getpid>

08004370 <_sbrk_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	2300      	movs	r3, #0
 8004374:	4d05      	ldr	r5, [pc, #20]	@ (800438c <_sbrk_r+0x1c>)
 8004376:	4604      	mov	r4, r0
 8004378:	4608      	mov	r0, r1
 800437a:	602b      	str	r3, [r5, #0]
 800437c:	f7fd f9b2 	bl	80016e4 <_sbrk>
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	d102      	bne.n	800438a <_sbrk_r+0x1a>
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	b103      	cbz	r3, 800438a <_sbrk_r+0x1a>
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	bd38      	pop	{r3, r4, r5, pc}
 800438c:	20000844 	.word	0x20000844

08004390 <__errno>:
 8004390:	4b01      	ldr	r3, [pc, #4]	@ (8004398 <__errno+0x8>)
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	2000000c 	.word	0x2000000c

0800439c <__libc_init_array>:
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	2600      	movs	r6, #0
 80043a0:	4d0c      	ldr	r5, [pc, #48]	@ (80043d4 <__libc_init_array+0x38>)
 80043a2:	4c0d      	ldr	r4, [pc, #52]	@ (80043d8 <__libc_init_array+0x3c>)
 80043a4:	1b64      	subs	r4, r4, r5
 80043a6:	10a4      	asrs	r4, r4, #2
 80043a8:	42a6      	cmp	r6, r4
 80043aa:	d109      	bne.n	80043c0 <__libc_init_array+0x24>
 80043ac:	f000 f864 	bl	8004478 <_init>
 80043b0:	2600      	movs	r6, #0
 80043b2:	4d0a      	ldr	r5, [pc, #40]	@ (80043dc <__libc_init_array+0x40>)
 80043b4:	4c0a      	ldr	r4, [pc, #40]	@ (80043e0 <__libc_init_array+0x44>)
 80043b6:	1b64      	subs	r4, r4, r5
 80043b8:	10a4      	asrs	r4, r4, #2
 80043ba:	42a6      	cmp	r6, r4
 80043bc:	d105      	bne.n	80043ca <__libc_init_array+0x2e>
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c4:	4798      	blx	r3
 80043c6:	3601      	adds	r6, #1
 80043c8:	e7ee      	b.n	80043a8 <__libc_init_array+0xc>
 80043ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ce:	4798      	blx	r3
 80043d0:	3601      	adds	r6, #1
 80043d2:	e7f2      	b.n	80043ba <__libc_init_array+0x1e>
 80043d4:	080044d0 	.word	0x080044d0
 80043d8:	080044d0 	.word	0x080044d0
 80043dc:	080044d0 	.word	0x080044d0
 80043e0:	080044d8 	.word	0x080044d8

080043e4 <__retarget_lock_acquire_recursive>:
 80043e4:	4770      	bx	lr

080043e6 <__retarget_lock_release_recursive>:
 80043e6:	4770      	bx	lr

080043e8 <_free_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4605      	mov	r5, r0
 80043ec:	2900      	cmp	r1, #0
 80043ee:	d040      	beq.n	8004472 <_free_r+0x8a>
 80043f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f4:	1f0c      	subs	r4, r1, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bfb8      	it	lt
 80043fa:	18e4      	addlt	r4, r4, r3
 80043fc:	f7ff ff60 	bl	80042c0 <__malloc_lock>
 8004400:	4a1c      	ldr	r2, [pc, #112]	@ (8004474 <_free_r+0x8c>)
 8004402:	6813      	ldr	r3, [r2, #0]
 8004404:	b933      	cbnz	r3, 8004414 <_free_r+0x2c>
 8004406:	6063      	str	r3, [r4, #4]
 8004408:	6014      	str	r4, [r2, #0]
 800440a:	4628      	mov	r0, r5
 800440c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004410:	f7ff bf5c 	b.w	80042cc <__malloc_unlock>
 8004414:	42a3      	cmp	r3, r4
 8004416:	d908      	bls.n	800442a <_free_r+0x42>
 8004418:	6820      	ldr	r0, [r4, #0]
 800441a:	1821      	adds	r1, r4, r0
 800441c:	428b      	cmp	r3, r1
 800441e:	bf01      	itttt	eq
 8004420:	6819      	ldreq	r1, [r3, #0]
 8004422:	685b      	ldreq	r3, [r3, #4]
 8004424:	1809      	addeq	r1, r1, r0
 8004426:	6021      	streq	r1, [r4, #0]
 8004428:	e7ed      	b.n	8004406 <_free_r+0x1e>
 800442a:	461a      	mov	r2, r3
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	b10b      	cbz	r3, 8004434 <_free_r+0x4c>
 8004430:	42a3      	cmp	r3, r4
 8004432:	d9fa      	bls.n	800442a <_free_r+0x42>
 8004434:	6811      	ldr	r1, [r2, #0]
 8004436:	1850      	adds	r0, r2, r1
 8004438:	42a0      	cmp	r0, r4
 800443a:	d10b      	bne.n	8004454 <_free_r+0x6c>
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	4401      	add	r1, r0
 8004440:	1850      	adds	r0, r2, r1
 8004442:	4283      	cmp	r3, r0
 8004444:	6011      	str	r1, [r2, #0]
 8004446:	d1e0      	bne.n	800440a <_free_r+0x22>
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4408      	add	r0, r1
 800444e:	6010      	str	r0, [r2, #0]
 8004450:	6053      	str	r3, [r2, #4]
 8004452:	e7da      	b.n	800440a <_free_r+0x22>
 8004454:	d902      	bls.n	800445c <_free_r+0x74>
 8004456:	230c      	movs	r3, #12
 8004458:	602b      	str	r3, [r5, #0]
 800445a:	e7d6      	b.n	800440a <_free_r+0x22>
 800445c:	6820      	ldr	r0, [r4, #0]
 800445e:	1821      	adds	r1, r4, r0
 8004460:	428b      	cmp	r3, r1
 8004462:	bf01      	itttt	eq
 8004464:	6819      	ldreq	r1, [r3, #0]
 8004466:	685b      	ldreq	r3, [r3, #4]
 8004468:	1809      	addeq	r1, r1, r0
 800446a:	6021      	streq	r1, [r4, #0]
 800446c:	6063      	str	r3, [r4, #4]
 800446e:	6054      	str	r4, [r2, #4]
 8004470:	e7cb      	b.n	800440a <_free_r+0x22>
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	20000708 	.word	0x20000708

08004478 <_init>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	bf00      	nop
 800447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447e:	bc08      	pop	{r3}
 8004480:	469e      	mov	lr, r3
 8004482:	4770      	bx	lr

08004484 <_fini>:
 8004484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004486:	bf00      	nop
 8004488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448a:	bc08      	pop	{r3}
 800448c:	469e      	mov	lr, r3
 800448e:	4770      	bx	lr
