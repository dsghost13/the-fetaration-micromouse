
the-fetaration-micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080037dc  080037dc  000047dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800381c  0800381c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800381c  0800381c  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800381c  0800381c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800381c  0800381c  0000481c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003824  08003824  00004824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003828  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000000c  08003834  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08003834  00005180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009de2  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b48  00000000  00000000  0000ee17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00010960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087f  00000000  00000000  00011460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018093  00000000  00000000  00011cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9a2  00000000  00000000  00029d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1ac  00000000  00000000  00035714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf8c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d5c  00000000  00000000  000bf904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000c2660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037c4 	.word	0x080037c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080037c4 	.word	0x080037c4

0800014c <_ZN8EncodersC1Ev>:
	extern TIM_HandleTypeDef htim3;
	extern TIM_HandleTypeDef htim4;

	class Encoders {
	public:
		Encoders() : m_enc_left(0), m_enc_right(0), m_prev_enc_left(0), m_prev_enc_right(0), m_left_distance(0.0), m_right_distance(0.0) {}
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2200      	movs	r2, #0
 800015e:	605a      	str	r2, [r3, #4]
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2200      	movs	r2, #0
 8000164:	811a      	strh	r2, [r3, #8]
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	815a      	strh	r2, [r3, #10]
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2200      	movs	r2, #0
 8000170:	819a      	strh	r2, [r3, #12]
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	81da      	strh	r2, [r3, #14]
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f04f 0200 	mov.w	r2, #0
 800017e:	611a      	str	r2, [r3, #16]
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	f04f 0200 	mov.w	r2, #0
 8000186:	615a      	str	r2, [r3, #20]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4618      	mov	r0, r3
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <_ZN8Encoders26HAL_TIM_IC_CaptureCallbackEP17TIM_HandleTypeDef>:

		uint32_t left_count = 0;

		uint32_t right_count = 0;

		void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
 800019c:	6039      	str	r1, [r7, #0]
		    if (htim->Instance == TIM3) {
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a0c      	ldr	r2, [pc, #48]	@ (80001d4 <_ZN8Encoders26HAL_TIM_IC_CaptureCallbackEP17TIM_HandleTypeDef+0x40>)
 80001a4:	4293      	cmp	r3, r2
 80001a6:	d105      	bne.n	80001b4 <_ZN8Encoders26HAL_TIM_IC_CaptureCallbackEP17TIM_HandleTypeDef+0x20>
		        left_count = __HAL_TIM_GET_COUNTER(htim);
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	601a      	str	r2, [r3, #0]

		    } else if (htim->Instance == TIM4) {

		        right_count = __HAL_TIM_GET_COUNTER(htim);
		    }
		}
 80001b2:	e009      	b.n	80001c8 <_ZN8Encoders26HAL_TIM_IC_CaptureCallbackEP17TIM_HandleTypeDef+0x34>
		    } else if (htim->Instance == TIM4) {
 80001b4:	683b      	ldr	r3, [r7, #0]
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a07      	ldr	r2, [pc, #28]	@ (80001d8 <_ZN8Encoders26HAL_TIM_IC_CaptureCallbackEP17TIM_HandleTypeDef+0x44>)
 80001ba:	4293      	cmp	r3, r2
 80001bc:	d104      	bne.n	80001c8 <_ZN8Encoders26HAL_TIM_IC_CaptureCallbackEP17TIM_HandleTypeDef+0x34>
		        right_count = __HAL_TIM_GET_COUNTER(htim);
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	605a      	str	r2, [r3, #4]
		}
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	40000400 	.word	0x40000400
 80001d8:	40000800 	.word	0x40000800

080001dc <_ZN8Encoders10initializeEv>:

		void initialize() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
			HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80001e4:	213c      	movs	r1, #60	@ 0x3c
 80001e6:	4807      	ldr	r0, [pc, #28]	@ (8000204 <_ZN8Encoders10initializeEv+0x28>)
 80001e8:	f002 fc7e 	bl	8002ae8 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80001ec:	213c      	movs	r1, #60	@ 0x3c
 80001ee:	4806      	ldr	r0, [pc, #24]	@ (8000208 <_ZN8Encoders10initializeEv+0x2c>)
 80001f0:	f002 fc7a 	bl	8002ae8 <HAL_TIM_Encoder_Start>
			reset();
 80001f4:	6878      	ldr	r0, [r7, #4]
 80001f6:	f000 f809 	bl	800020c <_ZN8Encoders5resetEv>
		}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	200000d0 	.word	0x200000d0
 8000208:	20000118 	.word	0x20000118

0800020c <_ZN8Encoders5resetEv>:

		void reset() {
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
//			__HAL_TIM_SET_COUNTER(&htim3, 1);
//			__HAL_TIM_SET_COUNTER(&htim4, 1);

			m_enc_left = 0;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2200      	movs	r2, #0
 8000218:	811a      	strh	r2, [r3, #8]
			m_enc_right = 0;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	2200      	movs	r2, #0
 800021e:	815a      	strh	r2, [r3, #10]
			m_prev_enc_left = 0;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2200      	movs	r2, #0
 8000224:	819a      	strh	r2, [r3, #12]
			m_prev_enc_right = 0;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2200      	movs	r2, #0
 800022a:	81da      	strh	r2, [r3, #14]
			m_left_distance = 0;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f04f 0200 	mov.w	r2, #0
 8000232:	611a      	str	r2, [r3, #16]
			m_right_distance = 0;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f04f 0200 	mov.w	r2, #0
 800023a:	615a      	str	r2, [r3, #20]
		}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <_ZN8Encoders21update_encoder_countsEv>:
		float robot_rot_change() {
			update_robot_distance();
			return (m_left_distance - m_right_distance) / TRACK_WIDTH;
		}

		void update_encoder_counts() {
 8000246:	b480      	push	{r7}
 8000248:	b083      	sub	sp, #12
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
			m_enc_left = left_count;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	b21a      	sxth	r2, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	811a      	strh	r2, [r3, #8]
			m_enc_right = right_count;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	b21a      	sxth	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	815a      	strh	r2, [r3, #10]
		}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
    encoders.HAL_TIM_IC_CaptureCallback(htim);
 8000274:	6879      	ldr	r1, [r7, #4]
 8000276:	4803      	ldr	r0, [pc, #12]	@ (8000284 <HAL_TIM_IC_CaptureCallback+0x18>)
 8000278:	f7ff ff8c 	bl	8000194 <_ZN8Encoders26HAL_TIM_IC_CaptureCallbackEP17TIM_HandleTypeDef>
}
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000164 	.word	0x20000164

08000288 <_ZL15ADC1_Select_CH4v>:

static void ADC1_Select_CH4(void) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_4;
 8000298:	2304      	movs	r3, #4
 800029a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800029c:	2301      	movs	r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80002a0:	2301      	movs	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4619      	mov	r1, r3
 80002a8:	4808      	ldr	r0, [pc, #32]	@ (80002cc <_ZL15ADC1_Select_CH4v+0x44>)
 80002aa:	f001 f8db 	bl	8001464 <HAL_ADC_ConfigChannel>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	bf14      	ite	ne
 80002b4:	2301      	movne	r3, #1
 80002b6:	2300      	moveq	r3, #0
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <_ZL15ADC1_Select_CH4v+0x3a>
	{
		Error_Handler();
 80002be:	f000 fb91 	bl	80009e4 <Error_Handler>
	}
}
 80002c2:	bf00      	nop
 80002c4:	3710      	adds	r7, #16
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000028 	.word	0x20000028

080002d0 <_ZL15ADC1_Select_CH9v>:

static void ADC1_Select_CH9(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]

	sConfig.Channel = ADC_CHANNEL_9;
 80002e0:	2309      	movs	r3, #9
 80002e2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e4:	2301      	movs	r3, #1
 80002e6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80002e8:	2301      	movs	r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	4619      	mov	r1, r3
 80002f0:	4808      	ldr	r0, [pc, #32]	@ (8000314 <_ZL15ADC1_Select_CH9v+0x44>)
 80002f2:	f001 f8b7 	bl	8001464 <HAL_ADC_ConfigChannel>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	bf14      	ite	ne
 80002fc:	2301      	movne	r3, #1
 80002fe:	2300      	moveq	r3, #0
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <_ZL15ADC1_Select_CH9v+0x3a>
	{
		Error_Handler();
 8000306:	f000 fb6d 	bl	80009e4 <Error_Handler>
	}
}
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000028 	.word	0x20000028

08000318 <_Z12measure_dist6dist_t>:

uint16_t measure_dist(dist_t dist) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* emitter_port;
	uint16_t emitter_pin;
	GPIO_TypeDef* receiver_port;
	uint16_t receiver_pin;

	switch (dist) {
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <_Z12measure_dist6dist_t+0x16>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d00c      	beq.n	8000346 <_Z12measure_dist6dist_t+0x2e>
			receiver_port	= RECIV_FR_GPIO_Port;
			receiver_pin	= RECIV_FR_Pin;
			ADC1_Select_CH4();
			break;
		default:
			break;
 800032c:	e016      	b.n	800035c <_Z12measure_dist6dist_t+0x44>
			emitter_port	= EMIT_FL_GPIO_Port;
 800032e:	4b1d      	ldr	r3, [pc, #116]	@ (80003a4 <_Z12measure_dist6dist_t+0x8c>)
 8000330:	617b      	str	r3, [r7, #20]
			emitter_pin		= EMIT_FL_Pin;
 8000332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000336:	827b      	strh	r3, [r7, #18]
			receiver_port	= RECIV_FL_GPIO_Port;
 8000338:	4b1a      	ldr	r3, [pc, #104]	@ (80003a4 <_Z12measure_dist6dist_t+0x8c>)
 800033a:	60fb      	str	r3, [r7, #12]
			receiver_pin	= RECIV_FL_Pin;
 800033c:	2302      	movs	r3, #2
 800033e:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH9();
 8000340:	f7ff ffc6 	bl	80002d0 <_ZL15ADC1_Select_CH9v>
			break;
 8000344:	e00a      	b.n	800035c <_Z12measure_dist6dist_t+0x44>
			emitter_port	= EMIT_FR_GPIO_Port;
 8000346:	4b17      	ldr	r3, [pc, #92]	@ (80003a4 <_Z12measure_dist6dist_t+0x8c>)
 8000348:	617b      	str	r3, [r7, #20]
			emitter_pin		= EMIT_FR_Pin;
 800034a:	2320      	movs	r3, #32
 800034c:	827b      	strh	r3, [r7, #18]
			receiver_port	= RECIV_FR_GPIO_Port;
 800034e:	4b16      	ldr	r3, [pc, #88]	@ (80003a8 <_Z12measure_dist6dist_t+0x90>)
 8000350:	60fb      	str	r3, [r7, #12]
			receiver_pin	= RECIV_FR_Pin;
 8000352:	2310      	movs	r3, #16
 8000354:	817b      	strh	r3, [r7, #10]
			ADC1_Select_CH4();
 8000356:	f7ff ff97 	bl	8000288 <_ZL15ADC1_Select_CH4v>
			break;
 800035a:	bf00      	nop
	}

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_SET);
 800035c:	8a7b      	ldrh	r3, [r7, #18]
 800035e:	2201      	movs	r2, #1
 8000360:	4619      	mov	r1, r3
 8000362:	6978      	ldr	r0, [r7, #20]
 8000364:	f001 fca4 	bl	8001cb0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000368:	2005      	movs	r0, #5
 800036a:	f000 fd93 	bl	8000e94 <HAL_Delay>

	HAL_ADC_Start(&hadc1);
 800036e:	480f      	ldr	r0, [pc, #60]	@ (80003ac <_Z12measure_dist6dist_t+0x94>)
 8000370:	f000 fe8c 	bl	800108c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000374:	f04f 31ff 	mov.w	r1, #4294967295
 8000378:	480c      	ldr	r0, [pc, #48]	@ (80003ac <_Z12measure_dist6dist_t+0x94>)
 800037a:	f000 ff61 	bl	8001240 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);
 800037e:	480b      	ldr	r0, [pc, #44]	@ (80003ac <_Z12measure_dist6dist_t+0x94>)
 8000380:	f001 f864 	bl	800144c <HAL_ADC_GetValue>
 8000384:	4603      	mov	r3, r0
 8000386:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 8000388:	4808      	ldr	r0, [pc, #32]	@ (80003ac <_Z12measure_dist6dist_t+0x94>)
 800038a:	f000 ff2d 	bl	80011e8 <HAL_ADC_Stop>

	HAL_GPIO_WritePin(emitter_port, emitter_pin, GPIO_PIN_RESET);
 800038e:	8a7b      	ldrh	r3, [r7, #18]
 8000390:	2200      	movs	r2, #0
 8000392:	4619      	mov	r1, r3
 8000394:	6978      	ldr	r0, [r7, #20]
 8000396:	f001 fc8b 	bl	8001cb0 <HAL_GPIO_WritePin>

	return adc_val;
 800039a:	893b      	ldrh	r3, [r7, #8]
}
 800039c:	4618      	mov	r0, r3
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	40010800 	.word	0x40010800
 80003ac:	20000028 	.word	0x20000028

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b4:	f000 fd0c 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b8:	f000 f82a 	bl	8000410 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003bc:	f000 fa7e 	bl	80008bc <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80003c0:	f000 f920 	bl	8000604 <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 80003c4:	f000 f88e 	bl	80004e4 <_ZL12MX_ADC1_Initv>
  MX_TIM3_Init();
 80003c8:	f000 f9bc 	bl	8000744 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80003cc:	f000 fa18 	bl	8000800 <_ZL12MX_TIM4_Initv>
  MX_ADC2_Init();
 80003d0:	f000 f8d0 	bl	8000574 <_ZL12MX_ADC2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80003d4:	480a      	ldr	r0, [pc, #40]	@ (8000400 <main+0x50>)
 80003d6:	f002 fa3b 	bl	8002850 <HAL_TIM_Base_Start_IT>
  encoders.initialize();
 80003da:	480a      	ldr	r0, [pc, #40]	@ (8000404 <main+0x54>)
 80003dc:	f7ff fefe 	bl	80001dc <_ZN8Encoders10initializeEv>



  while (1)
  {
	dis_FR = measure_dist(DIST_FR);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f7ff ff99 	bl	8000318 <_Z12measure_dist6dist_t>
 80003e6:	4603      	mov	r3, r0
 80003e8:	461a      	mov	r2, r3
 80003ea:	4b07      	ldr	r3, [pc, #28]	@ (8000408 <main+0x58>)
 80003ec:	801a      	strh	r2, [r3, #0]
	dis_FL = measure_dist(DIST_FL);
 80003ee:	2000      	movs	r0, #0
 80003f0:	f7ff ff92 	bl	8000318 <_Z12measure_dist6dist_t>
 80003f4:	4603      	mov	r3, r0
 80003f6:	461a      	mov	r2, r3
 80003f8:	4b04      	ldr	r3, [pc, #16]	@ (800040c <main+0x5c>)
 80003fa:	801a      	strh	r2, [r3, #0]
	dis_FR = measure_dist(DIST_FR);
 80003fc:	bf00      	nop
 80003fe:	e7ef      	b.n	80003e0 <main+0x30>
 8000400:	20000088 	.word	0x20000088
 8000404:	20000164 	.word	0x20000164
 8000408:	20000162 	.word	0x20000162
 800040c:	20000160 	.word	0x20000160

08000410 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b094      	sub	sp, #80	@ 0x50
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800041a:	2228      	movs	r2, #40	@ 0x28
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f003 f9a4 	bl	800376c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
 8000432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000440:	2301      	movs	r3, #1
 8000442:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000444:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044e:	2301      	movs	r3, #1
 8000450:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000452:	2302      	movs	r3, #2
 8000454:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000456:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800045a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800045c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000460:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000462:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000466:	4618      	mov	r0, r3
 8000468:	f001 fc3a 	bl	8001ce0 <HAL_RCC_OscConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	bf14      	ite	ne
 8000472:	2301      	movne	r3, #1
 8000474:	2300      	moveq	r3, #0
 8000476:	b2db      	uxtb	r3, r3
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800047c:	f000 fab2 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000480:	230f      	movs	r3, #15
 8000482:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000484:	2302      	movs	r3, #2
 8000486:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000490:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	2102      	movs	r1, #2
 800049c:	4618      	mov	r0, r3
 800049e:	f001 fea1 	bl	80021e4 <HAL_RCC_ClockConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	bf14      	ite	ne
 80004a8:	2301      	movne	r3, #1
 80004aa:	2300      	moveq	r3, #0
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80004b2:	f000 fa97 	bl	80009e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004b6:	2302      	movs	r3, #2
 80004b8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	4618      	mov	r0, r3
 80004c4:	f002 f808 	bl	80024d8 <HAL_RCCEx_PeriphCLKConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	bf14      	ite	ne
 80004ce:	2301      	movne	r3, #1
 80004d0:	2300      	moveq	r3, #0
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 80004d8:	f000 fa84 	bl	80009e4 <Error_Handler>
  }
}
 80004dc:	bf00      	nop
 80004de:	3750      	adds	r7, #80	@ 0x50
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004f4:	4b1d      	ldr	r3, [pc, #116]	@ (800056c <_ZL12MX_ADC1_Initv+0x88>)
 80004f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000570 <_ZL12MX_ADC1_Initv+0x8c>)
 80004f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004fa:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <_ZL12MX_ADC1_Initv+0x88>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000500:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <_ZL12MX_ADC1_Initv+0x88>)
 8000502:	2200      	movs	r2, #0
 8000504:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000506:	4b19      	ldr	r3, [pc, #100]	@ (800056c <_ZL12MX_ADC1_Initv+0x88>)
 8000508:	2200      	movs	r2, #0
 800050a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050c:	4b17      	ldr	r3, [pc, #92]	@ (800056c <_ZL12MX_ADC1_Initv+0x88>)
 800050e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000514:	4b15      	ldr	r3, [pc, #84]	@ (800056c <_ZL12MX_ADC1_Initv+0x88>)
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800051a:	4b14      	ldr	r3, [pc, #80]	@ (800056c <_ZL12MX_ADC1_Initv+0x88>)
 800051c:	2201      	movs	r2, #1
 800051e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000520:	4812      	ldr	r0, [pc, #72]	@ (800056c <_ZL12MX_ADC1_Initv+0x88>)
 8000522:	f000 fcdb 	bl	8000edc <HAL_ADC_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	bf14      	ite	ne
 800052c:	2301      	movne	r3, #1
 800052e:	2300      	moveq	r3, #0
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8000536:	f000 fa55 	bl	80009e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800053a:	2301      	movs	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800053e:	2301      	movs	r3, #1
 8000540:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4619      	mov	r1, r3
 800054a:	4808      	ldr	r0, [pc, #32]	@ (800056c <_ZL12MX_ADC1_Initv+0x88>)
 800054c:	f000 ff8a 	bl	8001464 <HAL_ADC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	bf14      	ite	ne
 8000556:	2301      	movne	r3, #1
 8000558:	2300      	moveq	r3, #0
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8000560:	f000 fa40 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000028 	.word	0x20000028
 8000570:	40012400 	.word	0x40012400

08000574 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000584:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <_ZL12MX_ADC2_Initv+0x88>)
 8000586:	4a1e      	ldr	r2, [pc, #120]	@ (8000600 <_ZL12MX_ADC2_Initv+0x8c>)
 8000588:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800058a:	4b1c      	ldr	r3, [pc, #112]	@ (80005fc <_ZL12MX_ADC2_Initv+0x88>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000590:	4b1a      	ldr	r3, [pc, #104]	@ (80005fc <_ZL12MX_ADC2_Initv+0x88>)
 8000592:	2200      	movs	r2, #0
 8000594:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000596:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <_ZL12MX_ADC2_Initv+0x88>)
 8000598:	2200      	movs	r2, #0
 800059a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059c:	4b17      	ldr	r3, [pc, #92]	@ (80005fc <_ZL12MX_ADC2_Initv+0x88>)
 800059e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80005a2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <_ZL12MX_ADC2_Initv+0x88>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80005aa:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <_ZL12MX_ADC2_Initv+0x88>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005b0:	4812      	ldr	r0, [pc, #72]	@ (80005fc <_ZL12MX_ADC2_Initv+0x88>)
 80005b2:	f000 fc93 	bl	8000edc <HAL_ADC_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	bf14      	ite	ne
 80005bc:	2301      	movne	r3, #1
 80005be:	2300      	moveq	r3, #0
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <_ZL12MX_ADC2_Initv+0x56>
  {
    Error_Handler();
 80005c6:	f000 fa0d 	bl	80009e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005ca:	2309      	movs	r3, #9
 80005cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4619      	mov	r1, r3
 80005da:	4808      	ldr	r0, [pc, #32]	@ (80005fc <_ZL12MX_ADC2_Initv+0x88>)
 80005dc:	f000 ff42 	bl	8001464 <HAL_ADC_ConfigChannel>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	bf14      	ite	ne
 80005e6:	2301      	movne	r3, #1
 80005e8:	2300      	moveq	r3, #0
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <_ZL12MX_ADC2_Initv+0x80>
  {
    Error_Handler();
 80005f0:	f000 f9f8 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000058 	.word	0x20000058
 8000600:	40012800 	.word	0x40012800

08000604 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08e      	sub	sp, #56	@ 0x38
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]
 8000632:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000634:	4b42      	ldr	r3, [pc, #264]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 8000636:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800063a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800063c:	4b40      	ldr	r3, [pc, #256]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 800063e:	2248      	movs	r2, #72	@ 0x48
 8000640:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000642:	4b3f      	ldr	r3, [pc, #252]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000648:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 800064a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800064e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000650:	4b3b      	ldr	r3, [pc, #236]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000656:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 8000658:	2280      	movs	r2, #128	@ 0x80
 800065a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800065c:	4838      	ldr	r0, [pc, #224]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 800065e:	f002 f8a7 	bl	80027b0 <HAL_TIM_Base_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	bf14      	ite	ne
 8000668:	2301      	movne	r3, #1
 800066a:	2300      	moveq	r3, #0
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000672:	f000 f9b7 	bl	80009e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800067c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000680:	4619      	mov	r1, r3
 8000682:	482f      	ldr	r0, [pc, #188]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 8000684:	f002 fc70 	bl	8002f68 <HAL_TIM_ConfigClockSource>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	bf14      	ite	ne
 800068e:	2301      	movne	r3, #1
 8000690:	2300      	moveq	r3, #0
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000698:	f000 f9a4 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800069c:	4828      	ldr	r0, [pc, #160]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 800069e:	f002 f929 	bl	80028f4 <HAL_TIM_PWM_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80006b2:	f000 f997 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	4619      	mov	r1, r3
 80006c4:	481e      	ldr	r0, [pc, #120]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 80006c6:	f002 ffe1 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf14      	ite	ne
 80006d0:	2301      	movne	r3, #1
 80006d2:	2300      	moveq	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 80006da:	f000 f983 	bl	80009e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006de:	2360      	movs	r3, #96	@ 0x60
 80006e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1024;
 80006e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2208      	movs	r2, #8
 80006f4:	4619      	mov	r1, r3
 80006f6:	4812      	ldr	r0, [pc, #72]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 80006f8:	f002 fb74 	bl	8002de4 <HAL_TIM_PWM_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	bf14      	ite	ne
 8000702:	2301      	movne	r3, #1
 8000704:	2300      	moveq	r3, #0
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 800070c:	f000 f96a 	bl	80009e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	220c      	movs	r2, #12
 8000714:	4619      	mov	r1, r3
 8000716:	480a      	ldr	r0, [pc, #40]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 8000718:	f002 fb64 	bl	8002de4 <HAL_TIM_PWM_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	bf14      	ite	ne
 8000722:	2301      	movne	r3, #1
 8000724:	2300      	moveq	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <_ZL12MX_TIM2_Initv+0x12c>
  {
    Error_Handler();
 800072c:	f000 f95a 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000730:	4803      	ldr	r0, [pc, #12]	@ (8000740 <_ZL12MX_TIM2_Initv+0x13c>)
 8000732:	f000 faa7 	bl	8000c84 <HAL_TIM_MspPostInit>

}
 8000736:	bf00      	nop
 8000738:	3738      	adds	r7, #56	@ 0x38
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000088 	.word	0x20000088

08000744 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	@ 0x30
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2224      	movs	r2, #36	@ 0x24
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 f80a 	bl	800376c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000760:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000762:	4a26      	ldr	r2, [pc, #152]	@ (80007fc <_ZL12MX_TIM3_Initv+0xb8>)
 8000764:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000766:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000768:	2200      	movs	r2, #0
 800076a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <_ZL12MX_TIM3_Initv+0xb4>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000774:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000778:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <_ZL12MX_TIM3_Initv+0xb4>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000780:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <_ZL12MX_TIM3_Initv+0xb4>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000786:	2303      	movs	r3, #3
 8000788:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800078e:	2301      	movs	r3, #1
 8000790:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800079a:	2302      	movs	r3, #2
 800079c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800079e:	2301      	movs	r3, #1
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <_ZL12MX_TIM3_Initv+0xb4>)
 80007b2:	f002 f8f7 	bl	80029a4 <HAL_TIM_Encoder_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bf14      	ite	ne
 80007bc:	2301      	movne	r3, #1
 80007be:	2300      	moveq	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 80007c6:	f000 f90d 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4619      	mov	r1, r3
 80007d6:	4808      	ldr	r0, [pc, #32]	@ (80007f8 <_ZL12MX_TIM3_Initv+0xb4>)
 80007d8:	f002 ff58 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80007ec:	f000 f8fa 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	3730      	adds	r7, #48	@ 0x30
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000d0 	.word	0x200000d0
 80007fc:	40000400 	.word	0x40000400

08000800 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	@ 0x30
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2224      	movs	r2, #36	@ 0x24
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f002 ffac 	bl	800376c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800081c:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <_ZL12MX_TIM4_Initv+0xb4>)
 800081e:	4a26      	ldr	r2, [pc, #152]	@ (80008b8 <_ZL12MX_TIM4_Initv+0xb8>)
 8000820:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000822:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <_ZL12MX_TIM4_Initv+0xb4>)
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b22      	ldr	r3, [pc, #136]	@ (80008b4 <_ZL12MX_TIM4_Initv+0xb4>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <_ZL12MX_TIM4_Initv+0xb4>)
 8000830:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000834:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <_ZL12MX_TIM4_Initv+0xb4>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <_ZL12MX_TIM4_Initv+0xb4>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000842:	2303      	movs	r3, #3
 8000844:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000846:	2302      	movs	r3, #2
 8000848:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800084a:	2301      	movs	r3, #1
 800084c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800085a:	2301      	movs	r3, #1
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <_ZL12MX_TIM4_Initv+0xb4>)
 800086e:	f002 f899 	bl	80029a4 <HAL_TIM_Encoder_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2300      	moveq	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8000882:	f000 f8af 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <_ZL12MX_TIM4_Initv+0xb4>)
 8000894:	f002 fefa 	bl	800368c <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	bf14      	ite	ne
 800089e:	2301      	movne	r3, #1
 80008a0:	2300      	moveq	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 80008a8:	f000 f89c 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3730      	adds	r7, #48	@ 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000118 	.word	0x20000118
 80008b8:	40000800 	.word	0x40000800

080008bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d0:	4b39      	ldr	r3, [pc, #228]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	4a38      	ldr	r2, [pc, #224]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6193      	str	r3, [r2, #24]
 80008dc:	4b36      	ldr	r3, [pc, #216]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e8:	4b33      	ldr	r3, [pc, #204]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a32      	ldr	r2, [pc, #200]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 80008ee:	f043 0320 	orr.w	r3, r3, #32
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b30      	ldr	r3, [pc, #192]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0320 	and.w	r3, r3, #32
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b2d      	ldr	r3, [pc, #180]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a2c      	ldr	r2, [pc, #176]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b2a      	ldr	r3, [pc, #168]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a26      	ldr	r2, [pc, #152]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b24      	ldr	r3, [pc, #144]	@ (80009b8 <_ZL12MX_GPIO_Initv+0xfc>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000936:	4821      	ldr	r0, [pc, #132]	@ (80009bc <_ZL12MX_GPIO_Initv+0x100>)
 8000938:	f001 f9ba 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 800093c:	2200      	movs	r2, #0
 800093e:	f64f 4120 	movw	r1, #64544	@ 0xfc20
 8000942:	481f      	ldr	r0, [pc, #124]	@ (80009c0 <_ZL12MX_GPIO_Initv+0x104>)
 8000944:	f001 f9b4 	bl	8001cb0 <HAL_GPIO_WritePin>
                          |ML_BWD_Pin|MR_BWD_Pin|EMIT_FR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ML_FWD_GPIO_Port, ML_FWD_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800094e:	481d      	ldr	r0, [pc, #116]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x108>)
 8000950:	f001 f9ae 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2302      	movs	r3, #2
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	4619      	mov	r1, r3
 800096c:	4813      	ldr	r0, [pc, #76]	@ (80009bc <_ZL12MX_GPIO_Initv+0x100>)
 800096e:	f001 f81b 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_R_Pin EMIT_L_Pin EMIT_FL_Pin MR_FWD_Pin
                           ML_BWD_Pin MR_BWD_Pin EMIT_FR_Pin */
  GPIO_InitStruct.Pin = EMIT_R_Pin|EMIT_L_Pin|EMIT_FL_Pin|MR_FWD_Pin
 8000972:	f64f 4320 	movw	r3, #64544	@ 0xfc20
 8000976:	613b      	str	r3, [r7, #16]
                          |ML_BWD_Pin|MR_BWD_Pin|EMIT_FR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2302      	movs	r3, #2
 8000982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4619      	mov	r1, r3
 800098a:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <_ZL12MX_GPIO_Initv+0x104>)
 800098c:	f001 f80c 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ML_FWD_Pin */
  GPIO_InitStruct.Pin = ML_FWD_Pin;
 8000990:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2302      	movs	r3, #2
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ML_FWD_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	4619      	mov	r1, r3
 80009a8:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <_ZL12MX_GPIO_Initv+0x108>)
 80009aa:	f000 fffd 	bl	80019a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009ae:	bf00      	nop
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40011000 	.word	0x40011000
 80009c0:	40010c00 	.word	0x40010c00
 80009c4:	40010800 	.word	0x40010800

080009c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	encoders.update_encoder_counts();
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80009d2:	f7ff fc38 	bl	8000246 <_ZN8Encoders21update_encoder_countsEv>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000164 	.word	0x20000164

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
Encoders encoders = Encoders();
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <_Z41__static_initialization_and_destruction_0v+0x10>)
 80009f6:	f7ff fba9 	bl	800014c <_ZN8EncodersC1Ev>
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000164 	.word	0x20000164

08000a04 <_GLOBAL__sub_I_LOOP_FREQUENCY>:
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	f7ff fff2 	bl	80009f0 <_Z41__static_initialization_and_destruction_0v>
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_MspInit+0x60>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_MspInit+0x60>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010000 	.word	0x40010000

08000a74 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0318 	add.w	r3, r7, #24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <HAL_ADC_MspInit+0xbc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d122      	bne.n	8000ada <HAL_ADC_MspInit+0x66>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a94:	4b27      	ldr	r3, [pc, #156]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a26      	ldr	r2, [pc, #152]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a20      	ldr	r2, [pc, #128]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = V_BATT_Pin|RECIV_FR_Pin;
 8000ac4:	2312      	movs	r3, #18
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4819      	ldr	r0, [pc, #100]	@ (8000b38 <HAL_ADC_MspInit+0xc4>)
 8000ad4:	f000 ff68 	bl	80019a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ad8:	e026      	b.n	8000b28 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a17      	ldr	r2, [pc, #92]	@ (8000b3c <HAL_ADC_MspInit+0xc8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d121      	bne.n	8000b28 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ae4:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000aea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a0c      	ldr	r2, [pc, #48]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_ADC_MspInit+0xc0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RECIV_FL_Pin;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RECIV_FL_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0318 	add.w	r3, r7, #24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4807      	ldr	r0, [pc, #28]	@ (8000b40 <HAL_ADC_MspInit+0xcc>)
 8000b24:	f000 ff40 	bl	80019a8 <HAL_GPIO_Init>
}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	@ 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40012400 	.word	0x40012400
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	40012800 	.word	0x40012800
 8000b40:	40010c00 	.word	0x40010c00

08000b44 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b54:	d113      	bne.n	8000b7e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b56:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <HAL_TIM_Base_MspInit+0x44>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b88 <HAL_TIM_Base_MspInit+0x44>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	61d3      	str	r3, [r2, #28]
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <HAL_TIM_Base_MspInit+0x44>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	201c      	movs	r0, #28
 8000b74:	f000 fee1 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b78:	201c      	movs	r0, #28
 8000b7a:	f000 fefa 	bl	8001972 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a32      	ldr	r2, [pc, #200]	@ (8000c70 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d12c      	bne.n	8000c06 <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bac:	4b31      	ldr	r3, [pc, #196]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	4a30      	ldr	r2, [pc, #192]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	61d3      	str	r3, [r2, #28]
 8000bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ML_ENC_A_Pin|ML_ENC_B_Pin;
 8000bdc:	23c0      	movs	r3, #192	@ 0xc0
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <HAL_TIM_Encoder_MspInit+0xec>)
 8000bf0:	f000 feda 	bl	80019a8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	201d      	movs	r0, #29
 8000bfa:	f000 fe9e 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bfe:	201d      	movs	r0, #29
 8000c00:	f000 feb7 	bl	8001972 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c04:	e030      	b.n	8000c68 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c7c <HAL_TIM_Encoder_MspInit+0xf0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d12b      	bne.n	8000c68 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c10:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	4a17      	ldr	r2, [pc, #92]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	61d3      	str	r3, [r2, #28]
 8000c1c:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a11      	ldr	r2, [pc, #68]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MR_ENC_B_Pin|MR_ENC_A_Pin;
 8000c40:	23c0      	movs	r3, #192	@ 0xc0
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 0318 	add.w	r3, r7, #24
 8000c50:	4619      	mov	r1, r3
 8000c52:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <HAL_TIM_Encoder_MspInit+0xf4>)
 8000c54:	f000 fea8 	bl	80019a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	201e      	movs	r0, #30
 8000c5e:	f000 fe6c 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c62:	201e      	movs	r0, #30
 8000c64:	f000 fe85 	bl	8001972 <HAL_NVIC_EnableIRQ>
}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	@ 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40000400 	.word	0x40000400
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40000800 	.word	0x40000800
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ca2:	d117      	bne.n	8000cd4 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <HAL_TIM_MspPostInit+0x58>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <HAL_TIM_MspPostInit+0x58>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_TIM_MspPostInit+0x58>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MR_PWM_Pin|ML_PWM_Pin;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <HAL_TIM_MspPostInit+0x5c>)
 8000cd0:	f000 fe6a 	bl	80019a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f892 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <TIM2_IRQHandler+0x10>)
 8000d42:	f001 ff5f 	bl	8002c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000088 	.word	0x20000088

08000d50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <TIM3_IRQHandler+0x10>)
 8000d56:	f001 ff55 	bl	8002c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000d0 	.word	0x200000d0

08000d64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <TIM4_IRQHandler+0x10>)
 8000d6a:	f001 ff4b 	bl	8002c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000118 	.word	0x20000118

08000d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d84:	f7ff fff8 	bl	8000d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480b      	ldr	r0, [pc, #44]	@ (8000db8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d8a:	490c      	ldr	r1, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a09      	ldr	r2, [pc, #36]	@ (8000dc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da0:	4c09      	ldr	r4, [pc, #36]	@ (8000dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f002 fce5 	bl	800377c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fafd 	bl	80003b0 <main>
  bx lr
 8000db6:	4770      	bx	lr
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc0:	08003828 	.word	0x08003828
  ldr r2, =_sbss
 8000dc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dc8:	20000180 	.word	0x20000180

08000dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_2_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_Init+0x28>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	@ (8000df8 <HAL_Init+0x28>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 fd9f 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fe10 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fdb7 	bl	800198e <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 fd7f 	bl	800193a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	@ (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_IncTick+0x1c>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HAL_IncTick+0x20>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a03      	ldr	r2, [pc, #12]	@ (8000e7c <HAL_IncTick+0x20>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	2000017c 	.word	0x2000017c

08000e80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b02      	ldr	r3, [pc, #8]	@ (8000e90 <HAL_GetTick+0x10>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	2000017c 	.word	0x2000017c

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff fff0 	bl	8000e80 <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffe0 	bl	8000e80 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008

08000edc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e0be      	b.n	800107c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d109      	bne.n	8000f20 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fdaa 	bl	8000a74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 fbf1 	bl	8001708 <ADC_ConversionStop_Disable>
 8000f26:	4603      	mov	r3, r0
 8000f28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 8099 	bne.w	800106a <HAL_ADC_Init+0x18e>
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f040 8095 	bne.w	800106a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f48:	f023 0302 	bic.w	r3, r3, #2
 8000f4c:	f043 0202 	orr.w	r2, r3, #2
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7b1b      	ldrb	r3, [r3, #12]
 8000f62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f74:	d003      	beq.n	8000f7e <HAL_ADC_Init+0xa2>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d102      	bne.n	8000f84 <HAL_ADC_Init+0xa8>
 8000f7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f82:	e000      	b.n	8000f86 <HAL_ADC_Init+0xaa>
 8000f84:	2300      	movs	r3, #0
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7d1b      	ldrb	r3, [r3, #20]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d119      	bne.n	8000fc8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7b1b      	ldrb	r3, [r3, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d109      	bne.n	8000fb0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	035a      	lsls	r2, r3, #13
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	e00b      	b.n	8000fc8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb4:	f043 0220 	orr.w	r2, r3, #32
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc0:	f043 0201 	orr.w	r2, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	4b28      	ldr	r3, [pc, #160]	@ (8001084 <HAL_ADC_Init+0x1a8>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	430b      	orrs	r3, r1
 8000fee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ff8:	d003      	beq.n	8001002 <HAL_ADC_Init+0x126>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d104      	bne.n	800100c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	3b01      	subs	r3, #1
 8001008:	051b      	lsls	r3, r3, #20
 800100a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001012:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	430a      	orrs	r2, r1
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_ADC_Init+0x1ac>)
 8001028:	4013      	ands	r3, r2
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d10b      	bne.n	8001048 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103a:	f023 0303 	bic.w	r3, r3, #3
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001046:	e018      	b.n	800107a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800104c:	f023 0312 	bic.w	r3, r3, #18
 8001050:	f043 0210 	orr.w	r2, r3, #16
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105c:	f043 0201 	orr.w	r2, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001068:	e007      	b.n	800107a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106e:	f043 0210 	orr.w	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800107a:	7dfb      	ldrb	r3, [r7, #23]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	ffe1f7fd 	.word	0xffe1f7fd
 8001088:	ff1f0efe 	.word	0xff1f0efe

0800108c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Start+0x1a>
 80010a2:	2302      	movs	r3, #2
 80010a4:	e098      	b.n	80011d8 <HAL_ADC_Start+0x14c>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 fad0 	bl	8001654 <ADC_Enable>
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 8087 	bne.w	80011ce <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a41      	ldr	r2, [pc, #260]	@ (80011e0 <HAL_ADC_Start+0x154>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d105      	bne.n	80010ea <HAL_ADC_Start+0x5e>
 80010de:	4b41      	ldr	r3, [pc, #260]	@ (80011e4 <HAL_ADC_Start+0x158>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d115      	bne.n	8001116 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001100:	2b00      	cmp	r3, #0
 8001102:	d026      	beq.n	8001152 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800110c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001114:	e01d      	b.n	8001152 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a2f      	ldr	r2, [pc, #188]	@ (80011e4 <HAL_ADC_Start+0x158>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d004      	beq.n	8001136 <HAL_ADC_Start+0xaa>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a2b      	ldr	r2, [pc, #172]	@ (80011e0 <HAL_ADC_Start+0x154>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d10d      	bne.n	8001152 <HAL_ADC_Start+0xc6>
 8001136:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <HAL_ADC_Start+0x158>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001146:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800114a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001162:	f023 0206 	bic.w	r2, r3, #6
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	62da      	str	r2, [r3, #44]	@ 0x2c
 800116a:	e002      	b.n	8001172 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f06f 0202 	mvn.w	r2, #2
 8001182:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800118e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001192:	d113      	bne.n	80011bc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001198:	4a11      	ldr	r2, [pc, #68]	@ (80011e0 <HAL_ADC_Start+0x154>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d105      	bne.n	80011aa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <HAL_ADC_Start+0x158>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d108      	bne.n	80011bc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	e00c      	b.n	80011d6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	e003      	b.n	80011d6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40012800 	.word	0x40012800
 80011e4:	40012400 	.word	0x40012400

080011e8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_ADC_Stop+0x1a>
 80011fe:	2302      	movs	r3, #2
 8001200:	e01a      	b.n	8001238 <HAL_ADC_Stop+0x50>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fa7c 	bl	8001708 <ADC_ConversionStop_Disable>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800121e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001256:	f7ff fe13 	bl	8000e80 <HAL_GetTick>
 800125a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126e:	f043 0220 	orr.w	r2, r3, #32
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e0d3      	b.n	800142a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128c:	2b00      	cmp	r3, #0
 800128e:	d131      	bne.n	80012f4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001296:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800129a:	2b00      	cmp	r3, #0
 800129c:	d12a      	bne.n	80012f4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800129e:	e021      	b.n	80012e4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a6:	d01d      	beq.n	80012e4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <HAL_ADC_PollForConversion+0x7e>
 80012ae:	f7ff fde7 	bl	8000e80 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d212      	bcs.n	80012e4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10b      	bne.n	80012e4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d0:	f043 0204 	orr.w	r2, r3, #4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e0a2      	b.n	800142a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0d6      	beq.n	80012a0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012f2:	e070      	b.n	80013d6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80012f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001434 <HAL_ADC_PollForConversion+0x1f4>)
 80012f6:	681c      	ldr	r4, [r3, #0]
 80012f8:	2002      	movs	r0, #2
 80012fa:	f001 f9a3 	bl	8002644 <HAL_RCCEx_GetPeriphCLKFreq>
 80012fe:	4603      	mov	r3, r0
 8001300:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6919      	ldr	r1, [r3, #16]
 800130a:	4b4b      	ldr	r3, [pc, #300]	@ (8001438 <HAL_ADC_PollForConversion+0x1f8>)
 800130c:	400b      	ands	r3, r1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d118      	bne.n	8001344 <HAL_ADC_PollForConversion+0x104>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68d9      	ldr	r1, [r3, #12]
 8001318:	4b48      	ldr	r3, [pc, #288]	@ (800143c <HAL_ADC_PollForConversion+0x1fc>)
 800131a:	400b      	ands	r3, r1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d111      	bne.n	8001344 <HAL_ADC_PollForConversion+0x104>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6919      	ldr	r1, [r3, #16]
 8001326:	4b46      	ldr	r3, [pc, #280]	@ (8001440 <HAL_ADC_PollForConversion+0x200>)
 8001328:	400b      	ands	r3, r1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d108      	bne.n	8001340 <HAL_ADC_PollForConversion+0x100>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68d9      	ldr	r1, [r3, #12]
 8001334:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <HAL_ADC_PollForConversion+0x204>)
 8001336:	400b      	ands	r3, r1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_ADC_PollForConversion+0x100>
 800133c:	2314      	movs	r3, #20
 800133e:	e020      	b.n	8001382 <HAL_ADC_PollForConversion+0x142>
 8001340:	2329      	movs	r3, #41	@ 0x29
 8001342:	e01e      	b.n	8001382 <HAL_ADC_PollForConversion+0x142>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6919      	ldr	r1, [r3, #16]
 800134a:	4b3d      	ldr	r3, [pc, #244]	@ (8001440 <HAL_ADC_PollForConversion+0x200>)
 800134c:	400b      	ands	r3, r1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_ADC_PollForConversion+0x120>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68d9      	ldr	r1, [r3, #12]
 8001358:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <HAL_ADC_PollForConversion+0x204>)
 800135a:	400b      	ands	r3, r1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00d      	beq.n	800137c <HAL_ADC_PollForConversion+0x13c>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6919      	ldr	r1, [r3, #16]
 8001366:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <HAL_ADC_PollForConversion+0x208>)
 8001368:	400b      	ands	r3, r1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d108      	bne.n	8001380 <HAL_ADC_PollForConversion+0x140>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68d9      	ldr	r1, [r3, #12]
 8001374:	4b34      	ldr	r3, [pc, #208]	@ (8001448 <HAL_ADC_PollForConversion+0x208>)
 8001376:	400b      	ands	r3, r1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_ADC_PollForConversion+0x140>
 800137c:	2354      	movs	r3, #84	@ 0x54
 800137e:	e000      	b.n	8001382 <HAL_ADC_PollForConversion+0x142>
 8001380:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001388:	e021      	b.n	80013ce <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d01a      	beq.n	80013c8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d007      	beq.n	80013a8 <HAL_ADC_PollForConversion+0x168>
 8001398:	f7ff fd72 	bl	8000e80 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d20f      	bcs.n	80013c8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d90b      	bls.n	80013c8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b4:	f043 0204 	orr.w	r2, r3, #4
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e030      	b.n	800142a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3301      	adds	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d8d9      	bhi.n	800138a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f06f 0212 	mvn.w	r2, #18
 80013de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013fa:	d115      	bne.n	8001428 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001400:	2b00      	cmp	r3, #0
 8001402:	d111      	bne.n	8001428 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001408:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d105      	bne.n	8001428 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	20000000 	.word	0x20000000
 8001438:	24924924 	.word	0x24924924
 800143c:	00924924 	.word	0x00924924
 8001440:	12492492 	.word	0x12492492
 8001444:	00492492 	.word	0x00492492
 8001448:	00249249 	.word	0x00249249

0800144c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x20>
 8001480:	2302      	movs	r3, #2
 8001482:	e0dc      	b.n	800163e <HAL_ADC_ConfigChannel+0x1da>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b06      	cmp	r3, #6
 8001492:	d81c      	bhi.n	80014ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b05      	subs	r3, #5
 80014a6:	221f      	movs	r2, #31
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	4019      	ands	r1, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	3b05      	subs	r3, #5
 80014c0:	fa00 f203 	lsl.w	r2, r0, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80014cc:	e03c      	b.n	8001548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d81c      	bhi.n	8001510 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3b23      	subs	r3, #35	@ 0x23
 80014e8:	221f      	movs	r2, #31
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	4019      	ands	r1, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3b23      	subs	r3, #35	@ 0x23
 8001502:	fa00 f203 	lsl.w	r2, r0, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	631a      	str	r2, [r3, #48]	@ 0x30
 800150e:	e01b      	b.n	8001548 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b41      	subs	r3, #65	@ 0x41
 8001522:	221f      	movs	r2, #31
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	4019      	ands	r1, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	3b41      	subs	r3, #65	@ 0x41
 800153c:	fa00 f203 	lsl.w	r2, r0, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b09      	cmp	r3, #9
 800154e:	d91c      	bls.n	800158a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68d9      	ldr	r1, [r3, #12]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	3b1e      	subs	r3, #30
 8001562:	2207      	movs	r2, #7
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	4019      	ands	r1, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	6898      	ldr	r0, [r3, #8]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	3b1e      	subs	r3, #30
 800157c:	fa00 f203 	lsl.w	r2, r0, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	e019      	b.n	80015be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6919      	ldr	r1, [r3, #16]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	2207      	movs	r2, #7
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	4019      	ands	r1, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6898      	ldr	r0, [r3, #8]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	fa00 f203 	lsl.w	r2, r0, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d003      	beq.n	80015ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ca:	2b11      	cmp	r3, #17
 80015cc:	d132      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001648 <HAL_ADC_ConfigChannel+0x1e4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d125      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d126      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80015f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d11a      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015fe:	4b13      	ldr	r3, [pc, #76]	@ (800164c <HAL_ADC_ConfigChannel+0x1e8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <HAL_ADC_ConfigChannel+0x1ec>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	0c9a      	lsrs	r2, r3, #18
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001614:	e002      	b.n	800161c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	3b01      	subs	r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x1b2>
 8001622:	e007      	b.n	8001634 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	f043 0220 	orr.w	r2, r3, #32
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40012400 	.word	0x40012400
 800164c:	20000000 	.word	0x20000000
 8001650:	431bde83 	.word	0x431bde83

08001654 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b01      	cmp	r3, #1
 8001670:	d040      	beq.n	80016f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0201 	orr.w	r2, r2, #1
 8001680:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001682:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <ADC_Enable+0xac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1f      	ldr	r2, [pc, #124]	@ (8001704 <ADC_Enable+0xb0>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001690:	e002      	b.n	8001698 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3b01      	subs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f9      	bne.n	8001692 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800169e:	f7ff fbef 	bl	8000e80 <HAL_GetTick>
 80016a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016a4:	e01f      	b.n	80016e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016a6:	f7ff fbeb 	bl	8000e80 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d918      	bls.n	80016e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d011      	beq.n	80016e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e007      	b.n	80016f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d1d8      	bne.n	80016a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000000 	.word	0x20000000
 8001704:	431bde83 	.word	0x431bde83

08001708 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b01      	cmp	r3, #1
 8001720:	d12e      	bne.n	8001780 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001732:	f7ff fba5 	bl	8000e80 <HAL_GetTick>
 8001736:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001738:	e01b      	b.n	8001772 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800173a:	f7ff fba1 	bl	8000e80 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d914      	bls.n	8001772 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10d      	bne.n	8001772 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175a:	f043 0210 	orr.w	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001766:	f043 0201 	orr.w	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e007      	b.n	8001782 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d0dc      	beq.n	800173a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	@ (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4906      	ldr	r1, [pc, #24]	@ (8001824 <__NVIC_EnableIRQ+0x34>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	@ (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	@ (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	@ 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	@ 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff90 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff2d 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff42 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff90 	bl	800187c <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5f 	bl	8001828 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff35 	bl	80017f0 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b08b      	sub	sp, #44	@ 0x2c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	e169      	b.n	8001c90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019bc:	2201      	movs	r2, #1
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	69fa      	ldr	r2, [r7, #28]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f040 8158 	bne.w	8001c8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a9a      	ldr	r2, [pc, #616]	@ (8001c48 <HAL_GPIO_Init+0x2a0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d05e      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019e4:	4a98      	ldr	r2, [pc, #608]	@ (8001c48 <HAL_GPIO_Init+0x2a0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d875      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019ea:	4a98      	ldr	r2, [pc, #608]	@ (8001c4c <HAL_GPIO_Init+0x2a4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d058      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019f0:	4a96      	ldr	r2, [pc, #600]	@ (8001c4c <HAL_GPIO_Init+0x2a4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d86f      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 80019f6:	4a96      	ldr	r2, [pc, #600]	@ (8001c50 <HAL_GPIO_Init+0x2a8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d052      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 80019fc:	4a94      	ldr	r2, [pc, #592]	@ (8001c50 <HAL_GPIO_Init+0x2a8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d869      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a02:	4a94      	ldr	r2, [pc, #592]	@ (8001c54 <HAL_GPIO_Init+0x2ac>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d04c      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a08:	4a92      	ldr	r2, [pc, #584]	@ (8001c54 <HAL_GPIO_Init+0x2ac>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d863      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a0e:	4a92      	ldr	r2, [pc, #584]	@ (8001c58 <HAL_GPIO_Init+0x2b0>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d046      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
 8001a14:	4a90      	ldr	r2, [pc, #576]	@ (8001c58 <HAL_GPIO_Init+0x2b0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d85d      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d82a      	bhi.n	8001a74 <HAL_GPIO_Init+0xcc>
 8001a1e:	2b12      	cmp	r3, #18
 8001a20:	d859      	bhi.n	8001ad6 <HAL_GPIO_Init+0x12e>
 8001a22:	a201      	add	r2, pc, #4	@ (adr r2, 8001a28 <HAL_GPIO_Init+0x80>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001aa3 	.word	0x08001aa3
 8001a2c:	08001a7d 	.word	0x08001a7d
 8001a30:	08001a8f 	.word	0x08001a8f
 8001a34:	08001ad1 	.word	0x08001ad1
 8001a38:	08001ad7 	.word	0x08001ad7
 8001a3c:	08001ad7 	.word	0x08001ad7
 8001a40:	08001ad7 	.word	0x08001ad7
 8001a44:	08001ad7 	.word	0x08001ad7
 8001a48:	08001ad7 	.word	0x08001ad7
 8001a4c:	08001ad7 	.word	0x08001ad7
 8001a50:	08001ad7 	.word	0x08001ad7
 8001a54:	08001ad7 	.word	0x08001ad7
 8001a58:	08001ad7 	.word	0x08001ad7
 8001a5c:	08001ad7 	.word	0x08001ad7
 8001a60:	08001ad7 	.word	0x08001ad7
 8001a64:	08001ad7 	.word	0x08001ad7
 8001a68:	08001ad7 	.word	0x08001ad7
 8001a6c:	08001a85 	.word	0x08001a85
 8001a70:	08001a99 	.word	0x08001a99
 8001a74:	4a79      	ldr	r2, [pc, #484]	@ (8001c5c <HAL_GPIO_Init+0x2b4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a7a:	e02c      	b.n	8001ad6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e029      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e024      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	3308      	adds	r3, #8
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e01f      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	330c      	adds	r3, #12
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e01a      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e013      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	611a      	str	r2, [r3, #16]
          break;
 8001ac2:	e009      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac4:	2308      	movs	r3, #8
 8001ac6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69fa      	ldr	r2, [r7, #28]
 8001acc:	615a      	str	r2, [r3, #20]
          break;
 8001ace:	e003      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x130>
          break;
 8001ad6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	2bff      	cmp	r3, #255	@ 0xff
 8001adc:	d801      	bhi.n	8001ae2 <HAL_GPIO_Init+0x13a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	e001      	b.n	8001ae6 <HAL_GPIO_Init+0x13e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2bff      	cmp	r3, #255	@ 0xff
 8001aec:	d802      	bhi.n	8001af4 <HAL_GPIO_Init+0x14c>
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x152>
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	3b08      	subs	r3, #8
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	210f      	movs	r1, #15
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	6a39      	ldr	r1, [r7, #32]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 80b1 	beq.w	8001c8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b28:	4b4d      	ldr	r3, [pc, #308]	@ (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b4a      	ldr	r3, [pc, #296]	@ (8001c60 <HAL_GPIO_Init+0x2b8>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b40:	4a48      	ldr	r2, [pc, #288]	@ (8001c64 <HAL_GPIO_Init+0x2bc>)
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a40      	ldr	r2, [pc, #256]	@ (8001c68 <HAL_GPIO_Init+0x2c0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d013      	beq.n	8001b94 <HAL_GPIO_Init+0x1ec>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c6c <HAL_GPIO_Init+0x2c4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00d      	beq.n	8001b90 <HAL_GPIO_Init+0x1e8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a3e      	ldr	r2, [pc, #248]	@ (8001c70 <HAL_GPIO_Init+0x2c8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d007      	beq.n	8001b8c <HAL_GPIO_Init+0x1e4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c74 <HAL_GPIO_Init+0x2cc>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d101      	bne.n	8001b88 <HAL_GPIO_Init+0x1e0>
 8001b84:	2303      	movs	r3, #3
 8001b86:	e006      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b88:	2304      	movs	r3, #4
 8001b8a:	e004      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e002      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_GPIO_Init+0x1ee>
 8001b94:	2300      	movs	r3, #0
 8001b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b98:	f002 0203 	and.w	r2, r2, #3
 8001b9c:	0092      	lsls	r2, r2, #2
 8001b9e:	4093      	lsls	r3, r2
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ba6:	492f      	ldr	r1, [pc, #188]	@ (8001c64 <HAL_GPIO_Init+0x2bc>)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	492c      	ldr	r1, [pc, #176]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bce:	4b2a      	ldr	r3, [pc, #168]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	4928      	ldr	r1, [pc, #160]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001be8:	4b23      	ldr	r3, [pc, #140]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	4922      	ldr	r1, [pc, #136]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60cb      	str	r3, [r1, #12]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	491e      	ldr	r1, [pc, #120]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c10:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4918      	ldr	r1, [pc, #96]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c1e:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4914      	ldr	r1, [pc, #80]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d021      	beq.n	8001c7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c38:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	490e      	ldr	r1, [pc, #56]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]
 8001c44:	e021      	b.n	8001c8a <HAL_GPIO_Init+0x2e2>
 8001c46:	bf00      	nop
 8001c48:	10320000 	.word	0x10320000
 8001c4c:	10310000 	.word	0x10310000
 8001c50:	10220000 	.word	0x10220000
 8001c54:	10210000 	.word	0x10210000
 8001c58:	10120000 	.word	0x10120000
 8001c5c:	10110000 	.word	0x10110000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40010800 	.word	0x40010800
 8001c6c:	40010c00 	.word	0x40010c00
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40011400 	.word	0x40011400
 8001c78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <HAL_GPIO_Init+0x304>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4909      	ldr	r1, [pc, #36]	@ (8001cac <HAL_GPIO_Init+0x304>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f47f ae8e 	bne.w	80019bc <HAL_GPIO_Init+0x14>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	372c      	adds	r7, #44	@ 0x2c
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e272      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 8087 	beq.w	8001e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d00:	4b92      	ldr	r3, [pc, #584]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d00c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d112      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
 8001d18:	4b8c      	ldr	r3, [pc, #560]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d24:	d10b      	bne.n	8001d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d26:	4b89      	ldr	r3, [pc, #548]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d06c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x12c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d168      	bne.n	8001e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e24c      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x76>
 8001d48:	4b80      	ldr	r3, [pc, #512]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x98>
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a7a      	ldr	r2, [pc, #488]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b78      	ldr	r3, [pc, #480]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a77      	ldr	r2, [pc, #476]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0xbc>
 8001d82:	4b72      	ldr	r3, [pc, #456]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a71      	ldr	r2, [pc, #452]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6e      	ldr	r2, [pc, #440]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e00b      	b.n	8001db4 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a6a      	ldr	r2, [pc, #424]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b68      	ldr	r3, [pc, #416]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a67      	ldr	r2, [pc, #412]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f860 	bl	8000e80 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff f85c 	bl	8000e80 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e200      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe4>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff f84c 	bl	8000e80 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff f848 	bl	8000e80 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1ec      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	4b53      	ldr	r3, [pc, #332]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x10c>
 8001e0a:	e000      	b.n	8001e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e26:	4b49      	ldr	r3, [pc, #292]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d11c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
 8001e32:	4b46      	ldr	r3, [pc, #280]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d116      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	4b43      	ldr	r3, [pc, #268]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d005      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1c0      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e56:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4939      	ldr	r1, [pc, #228]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6a:	e03a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d020      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e74:	4b36      	ldr	r3, [pc, #216]	@ (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff f801 	bl	8000e80 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7fe fffd 	bl	8000e80 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e1a1      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4927      	ldr	r1, [pc, #156]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e015      	b.n	8001ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7fe ffe0 	bl	8000e80 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7fe ffdc 	bl	8000e80 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e180      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03a      	beq.n	8001f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d019      	beq.n	8001f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	4b17      	ldr	r3, [pc, #92]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7fe ffc0 	bl	8000e80 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f04:	f7fe ffbc 	bl	8000e80 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e160      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f000 faba 	bl	800249c <RCC_Delay>
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7fe ffa6 	bl	8000e80 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f36:	e00f      	b.n	8001f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f38:	f7fe ffa2 	bl	8000e80 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d908      	bls.n	8001f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e146      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	42420000 	.word	0x42420000
 8001f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f58:	4b92      	ldr	r3, [pc, #584]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e9      	bne.n	8001f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a6 	beq.w	80020be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f76:	4b8b      	ldr	r3, [pc, #556]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10d      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b88      	ldr	r3, [pc, #544]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	4a87      	ldr	r2, [pc, #540]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	61d3      	str	r3, [r2, #28]
 8001f8e:	4b85      	ldr	r3, [pc, #532]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b82      	ldr	r3, [pc, #520]	@ (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b7f      	ldr	r3, [pc, #508]	@ (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7e      	ldr	r2, [pc, #504]	@ (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe ff63 	bl	8000e80 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7fe ff5f 	bl	8000e80 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b64      	cmp	r3, #100	@ 0x64
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e103      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b75      	ldr	r3, [pc, #468]	@ (80021a8 <HAL_RCC_OscConfig+0x4c8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x312>
 8001fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a6e      	ldr	r2, [pc, #440]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6213      	str	r3, [r2, #32]
 8001ff0:	e02d      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x334>
 8001ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a69      	ldr	r2, [pc, #420]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6213      	str	r3, [r2, #32]
 8002006:	4b67      	ldr	r3, [pc, #412]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a66      	ldr	r2, [pc, #408]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6213      	str	r3, [r2, #32]
 8002012:	e01c      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d10c      	bne.n	8002036 <HAL_RCC_OscConfig+0x356>
 800201c:	4b61      	ldr	r3, [pc, #388]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a60      	ldr	r2, [pc, #384]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	4b5e      	ldr	r3, [pc, #376]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a5d      	ldr	r2, [pc, #372]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6213      	str	r3, [r2, #32]
 8002034:	e00b      	b.n	800204e <HAL_RCC_OscConfig+0x36e>
 8002036:	4b5b      	ldr	r3, [pc, #364]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4a5a      	ldr	r2, [pc, #360]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6213      	str	r3, [r2, #32]
 8002042:	4b58      	ldr	r3, [pc, #352]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a57      	ldr	r2, [pc, #348]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d015      	beq.n	8002082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7fe ff13 	bl	8000e80 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7fe ff0f 	bl	8000e80 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0b1      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	4b4b      	ldr	r3, [pc, #300]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0ee      	beq.n	800205e <HAL_RCC_OscConfig+0x37e>
 8002080:	e014      	b.n	80020ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7fe fefd 	bl	8000e80 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	e00a      	b.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208a:	f7fe fef9 	bl	8000e80 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e09b      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	4b40      	ldr	r3, [pc, #256]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ee      	bne.n	800208a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d105      	bne.n	80020be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b3c      	ldr	r3, [pc, #240]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a3b      	ldr	r2, [pc, #236]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8087 	beq.w	80021d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c8:	4b36      	ldr	r3, [pc, #216]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d061      	beq.n	8002198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d146      	bne.n	800216a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020dc:	4b33      	ldr	r3, [pc, #204]	@ (80021ac <HAL_RCC_OscConfig+0x4cc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fecd 	bl	8000e80 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fec9 	bl	8000e80 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e06d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	4b29      	ldr	r3, [pc, #164]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002110:	d108      	bne.n	8002124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002112:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4921      	ldr	r1, [pc, #132]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a19      	ldr	r1, [r3, #32]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	430b      	orrs	r3, r1
 8002136:	491b      	ldr	r1, [pc, #108]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <HAL_RCC_OscConfig+0x4cc>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7fe fe9d 	bl	8000e80 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7fe fe99 	bl	8000e80 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e03d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x46a>
 8002168:	e035      	b.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <HAL_RCC_OscConfig+0x4cc>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fe86 	bl	8000e80 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002178:	f7fe fe82 	bl	8000e80 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e026      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x498>
 8002196:	e01e      	b.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e019      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_RCC_OscConfig+0x500>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000

080021e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0d0      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021f8:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d910      	bls.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b67      	ldr	r3, [pc, #412]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f023 0207 	bic.w	r2, r3, #7
 800220e:	4965      	ldr	r1, [pc, #404]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4a58      	ldr	r2, [pc, #352]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800224a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002262:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d040      	beq.n	8002304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e073      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06b      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4936      	ldr	r1, [pc, #216]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7fe fdd4 	bl	8000e80 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe fdd0 	bl	8000e80 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e053      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b2d      	ldr	r3, [pc, #180]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b27      	ldr	r3, [pc, #156]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d210      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 0207 	bic.w	r2, r3, #7
 800231a:	4922      	ldr	r1, [pc, #136]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	@ (80023ac <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1cc>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fd32 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40022000 	.word	0x40022000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	080037dc 	.word	0x080037dc
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023d2:	4b1e      	ldr	r3, [pc, #120]	@ (800244c <HAL_RCC_GetSysClockFreq+0x94>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x30>
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x36>
 80023e6:	e027      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ea:	613b      	str	r3, [r7, #16]
      break;
 80023ec:	e027      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0c9b      	lsrs	r3, r3, #18
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	4a17      	ldr	r2, [pc, #92]	@ (8002454 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023f8:	5cd3      	ldrb	r3, [r2, r3]
 80023fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002406:	4b11      	ldr	r3, [pc, #68]	@ (800244c <HAL_RCC_GetSysClockFreq+0x94>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0c5b      	lsrs	r3, r3, #17
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	4a11      	ldr	r2, [pc, #68]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 800241a:	fb03 f202 	mul.w	r2, r3, r2
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e004      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0c      	ldr	r2, [pc, #48]	@ (800245c <HAL_RCC_GetSysClockFreq+0xa4>)
 800242c:	fb02 f303 	mul.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	613b      	str	r3, [r7, #16]
      break;
 8002436:	e002      	b.n	800243e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x98>)
 800243a:	613b      	str	r3, [r7, #16]
      break;
 800243c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243e:	693b      	ldr	r3, [r7, #16]
}
 8002440:	4618      	mov	r0, r3
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	007a1200 	.word	0x007a1200
 8002454:	080037f4 	.word	0x080037f4
 8002458:	08003804 	.word	0x08003804
 800245c:	003d0900 	.word	0x003d0900

08002460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b02      	ldr	r3, [pc, #8]	@ (8002470 <HAL_RCC_GetHCLKFreq+0x10>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	20000000 	.word	0x20000000

08002474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002478:	f7ff fff2 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0adb      	lsrs	r3, r3, #11
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4903      	ldr	r1, [pc, #12]	@ (8002498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	080037ec 	.word	0x080037ec

0800249c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024a4:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <RCC_Delay+0x34>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <RCC_Delay+0x38>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0a5b      	lsrs	r3, r3, #9
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024b8:	bf00      	nop
  }
  while (Delay --);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1e5a      	subs	r2, r3, #1
 80024be:	60fa      	str	r2, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f9      	bne.n	80024b8 <RCC_Delay+0x1c>
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	20000000 	.word	0x20000000
 80024d4:	10624dd3 	.word	0x10624dd3

080024d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d07d      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002504:	4b4c      	ldr	r3, [pc, #304]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	4a4b      	ldr	r2, [pc, #300]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800250e:	61d3      	str	r3, [r2, #28]
 8002510:	4b49      	ldr	r3, [pc, #292]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251c:	2301      	movs	r3, #1
 800251e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	4b46      	ldr	r3, [pc, #280]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d118      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252c:	4b43      	ldr	r3, [pc, #268]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a42      	ldr	r2, [pc, #264]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002538:	f7fe fca2 	bl	8000e80 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253e:	e008      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002540:	f7fe fc9e 	bl	8000e80 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e06d      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	4b3a      	ldr	r3, [pc, #232]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800255e:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002566:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d02e      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	429a      	cmp	r2, r3
 800257a:	d027      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800257c:	4b2e      	ldr	r3, [pc, #184]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002584:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002586:	4b2e      	ldr	r3, [pc, #184]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800258c:	4b2c      	ldr	r3, [pc, #176]	@ (8002640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002592:	4a29      	ldr	r2, [pc, #164]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d014      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe fc6d 	bl	8000e80 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe fc69 	bl	8000e80 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e036      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ee      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4917      	ldr	r1, [pc, #92]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e4:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4a13      	ldr	r2, [pc, #76]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	490b      	ldr	r1, [pc, #44]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800261a:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	4904      	ldr	r1, [pc, #16]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	40007000 	.word	0x40007000
 8002640:	42420440 	.word	0x42420440

08002644 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b10      	cmp	r3, #16
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b10      	cmp	r3, #16
 800266a:	f200 808a 	bhi.w	8002782 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d045      	beq.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d075      	beq.n	8002766 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800267a:	e082      	b.n	8002782 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800267c:	4b46      	ldr	r3, [pc, #280]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002682:	4b45      	ldr	r3, [pc, #276]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d07b      	beq.n	8002786 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	0c9b      	lsrs	r3, r3, #18
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	4a41      	ldr	r2, [pc, #260]	@ (800279c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002698:	5cd3      	ldrb	r3, [r2, r3]
 800269a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d015      	beq.n	80026d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	0c5b      	lsrs	r3, r3, #17
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	4a3b      	ldr	r2, [pc, #236]	@ (80027a0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80026c0:	4a38      	ldr	r2, [pc, #224]	@ (80027a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	e004      	b.n	80026dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4a34      	ldr	r2, [pc, #208]	@ (80027a8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80026dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026e8:	d102      	bne.n	80026f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	61bb      	str	r3, [r7, #24]
      break;
 80026ee:	e04a      	b.n	8002786 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4a2d      	ldr	r2, [pc, #180]	@ (80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	61bb      	str	r3, [r7, #24]
      break;
 80026fe:	e042      	b.n	8002786 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002700:	4b25      	ldr	r3, [pc, #148]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800270c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002710:	d108      	bne.n	8002724 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800271c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e01f      	b.n	8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800272a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800272e:	d109      	bne.n	8002744 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002730:	4b19      	ldr	r3, [pc, #100]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800273c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	e00f      	b.n	8002764 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800274a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800274e:	d11c      	bne.n	800278a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002750:	4b11      	ldr	r3, [pc, #68]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d016      	beq.n	800278a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800275c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002760:	61bb      	str	r3, [r7, #24]
      break;
 8002762:	e012      	b.n	800278a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002764:	e011      	b.n	800278a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002766:	f7ff fe85 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 800276a:	4602      	mov	r2, r0
 800276c:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	0b9b      	lsrs	r3, r3, #14
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	3301      	adds	r3, #1
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	61bb      	str	r3, [r7, #24]
      break;
 8002780:	e004      	b.n	800278c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002782:	bf00      	nop
 8002784:	e002      	b.n	800278c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002786:	bf00      	nop
 8002788:	e000      	b.n	800278c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800278a:	bf00      	nop
    }
  }
  return (frequency);
 800278c:	69bb      	ldr	r3, [r7, #24]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	08003808 	.word	0x08003808
 80027a0:	08003818 	.word	0x08003818
 80027a4:	007a1200 	.word	0x007a1200
 80027a8:	003d0900 	.word	0x003d0900
 80027ac:	aaaaaaab 	.word	0xaaaaaaab

080027b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e041      	b.n	8002846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d106      	bne.n	80027dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe f9b4 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f000 fc9c 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d001      	beq.n	8002868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e03a      	b.n	80028de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a18      	ldr	r2, [pc, #96]	@ (80028e8 <HAL_TIM_Base_Start_IT+0x98>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00e      	beq.n	80028a8 <HAL_TIM_Base_Start_IT+0x58>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002892:	d009      	beq.n	80028a8 <HAL_TIM_Base_Start_IT+0x58>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <HAL_TIM_Base_Start_IT+0x9c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d004      	beq.n	80028a8 <HAL_TIM_Base_Start_IT+0x58>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a13      	ldr	r2, [pc, #76]	@ (80028f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d111      	bne.n	80028cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d010      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ca:	e007      	b.n	80028dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40000800 	.word	0x40000800

080028f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e041      	b.n	800298a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f839 	bl	8002992 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 fbfa 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e093      	b.n	8002ae0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fe f8dd 	bl	8000b8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029e8:	f023 0307 	bic.w	r3, r3, #7
 80029ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f000 fb97 	bl	800312c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	4313      	orrs	r3, r2
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002a44:	f023 030c 	bic.w	r3, r3, #12
 8002a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	4313      	orrs	r3, r2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	011a      	lsls	r2, r3, #4
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	031b      	lsls	r3, r3, #12
 8002a74:	4313      	orrs	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002a82:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002af8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b00:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b08:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002b10:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d110      	bne.n	8002b3a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d102      	bne.n	8002b24 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b1e:	7b7b      	ldrb	r3, [r7, #13]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d001      	beq.n	8002b28 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e069      	b.n	8002bfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b38:	e031      	b.n	8002b9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d110      	bne.n	8002b62 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b40:	7bbb      	ldrb	r3, [r7, #14]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d102      	bne.n	8002b4c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b46:	7b3b      	ldrb	r3, [r7, #12]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d001      	beq.n	8002b50 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e055      	b.n	8002bfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b60:	e01d      	b.n	8002b9e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d108      	bne.n	8002b7a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b68:	7bbb      	ldrb	r3, [r7, #14]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b6e:	7b7b      	ldrb	r3, [r7, #13]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d102      	bne.n	8002b7a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b74:	7b3b      	ldrb	r3, [r7, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e03e      	b.n	8002bfc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_TIM_Encoder_Start+0xc4>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d008      	beq.n	8002bbc <HAL_TIM_Encoder_Start+0xd4>
 8002baa:	e00f      	b.n	8002bcc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fd45 	bl	8003644 <TIM_CCxChannelCmd>
      break;
 8002bba:	e016      	b.n	8002bea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fd3d 	bl	8003644 <TIM_CCxChannelCmd>
      break;
 8002bca:	e00e      	b.n	8002bea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fd35 	bl	8003644 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2201      	movs	r2, #1
 8002be0:	2104      	movs	r1, #4
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fd2e 	bl	8003644 <TIM_CCxChannelCmd>
      break;
 8002be8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d020      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01b      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0202 	mvn.w	r2, #2
 8002c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fd fb0c 	bl	800026c <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa4d 	bl	80030f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fa53 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d020      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01b      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0204 	mvn.w	r2, #4
 8002c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fd fae6 	bl	800026c <HAL_TIM_IC_CaptureCallback>
 8002ca0:	e005      	b.n	8002cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fa27 	bl	80030f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fa2d 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d020      	beq.n	8002d00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01b      	beq.n	8002d00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0208 	mvn.w	r2, #8
 8002cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd fac0 	bl	800026c <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa01 	bl	80030f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fa07 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d020      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01b      	beq.n	8002d4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0210 	mvn.w	r2, #16
 8002d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2208      	movs	r2, #8
 8002d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd fa9a 	bl	800026c <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f9db 	bl	80030f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f9e1 	bl	8003108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00c      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0201 	mvn.w	r2, #1
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fe2c 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00c      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fce3 	bl	800375a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00c      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f9b1 	bl	800311a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0220 	mvn.w	r2, #32
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fcb6 	bl	8003748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e0ae      	b.n	8002f60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	f200 809f 	bhi.w	8002f50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e12:	a201      	add	r2, pc, #4	@ (adr r2, 8002e18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e4d 	.word	0x08002e4d
 8002e1c:	08002f51 	.word	0x08002f51
 8002e20:	08002f51 	.word	0x08002f51
 8002e24:	08002f51 	.word	0x08002f51
 8002e28:	08002e8d 	.word	0x08002e8d
 8002e2c:	08002f51 	.word	0x08002f51
 8002e30:	08002f51 	.word	0x08002f51
 8002e34:	08002f51 	.word	0x08002f51
 8002e38:	08002ecf 	.word	0x08002ecf
 8002e3c:	08002f51 	.word	0x08002f51
 8002e40:	08002f51 	.word	0x08002f51
 8002e44:	08002f51 	.word	0x08002f51
 8002e48:	08002f0f 	.word	0x08002f0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f9d8 	bl	8003208 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0208 	orr.w	r2, r2, #8
 8002e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0204 	bic.w	r2, r2, #4
 8002e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6999      	ldr	r1, [r3, #24]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	619a      	str	r2, [r3, #24]
      break;
 8002e8a:	e064      	b.n	8002f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fa1e 	bl	80032d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6999      	ldr	r1, [r3, #24]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	021a      	lsls	r2, r3, #8
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	619a      	str	r2, [r3, #24]
      break;
 8002ecc:	e043      	b.n	8002f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fa67 	bl	80033a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0208 	orr.w	r2, r2, #8
 8002ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0204 	bic.w	r2, r2, #4
 8002ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69d9      	ldr	r1, [r3, #28]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	61da      	str	r2, [r3, #28]
      break;
 8002f0c:	e023      	b.n	8002f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fab1 	bl	800347c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69da      	ldr	r2, [r3, #28]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69d9      	ldr	r1, [r3, #28]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	021a      	lsls	r2, r3, #8
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	61da      	str	r2, [r3, #28]
      break;
 8002f4e:	e002      	b.n	8002f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	75fb      	strb	r3, [r7, #23]
      break;
 8002f54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIM_ConfigClockSource+0x1c>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e0b4      	b.n	80030ee <HAL_TIM_ConfigClockSource+0x186>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fbc:	d03e      	beq.n	800303c <HAL_TIM_ConfigClockSource+0xd4>
 8002fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc2:	f200 8087 	bhi.w	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fca:	f000 8086 	beq.w	80030da <HAL_TIM_ConfigClockSource+0x172>
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd2:	d87f      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd4:	2b70      	cmp	r3, #112	@ 0x70
 8002fd6:	d01a      	beq.n	800300e <HAL_TIM_ConfigClockSource+0xa6>
 8002fd8:	2b70      	cmp	r3, #112	@ 0x70
 8002fda:	d87b      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fdc:	2b60      	cmp	r3, #96	@ 0x60
 8002fde:	d050      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x11a>
 8002fe0:	2b60      	cmp	r3, #96	@ 0x60
 8002fe2:	d877      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe4:	2b50      	cmp	r3, #80	@ 0x50
 8002fe6:	d03c      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0xfa>
 8002fe8:	2b50      	cmp	r3, #80	@ 0x50
 8002fea:	d873      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d058      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x13a>
 8002ff0:	2b40      	cmp	r3, #64	@ 0x40
 8002ff2:	d86f      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff4:	2b30      	cmp	r3, #48	@ 0x30
 8002ff6:	d064      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ff8:	2b30      	cmp	r3, #48	@ 0x30
 8002ffa:	d86b      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d060      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003000:	2b20      	cmp	r3, #32
 8003002:	d867      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d05c      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003008:	2b10      	cmp	r3, #16
 800300a:	d05a      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x15a>
 800300c:	e062      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800301e:	f000 faf2 	bl	8003606 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	609a      	str	r2, [r3, #8]
      break;
 800303a:	e04f      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800304c:	f000 fadb 	bl	8003606 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800305e:	609a      	str	r2, [r3, #8]
      break;
 8003060:	e03c      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306e:	461a      	mov	r2, r3
 8003070:	f000 fa52 	bl	8003518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2150      	movs	r1, #80	@ 0x50
 800307a:	4618      	mov	r0, r3
 800307c:	f000 faa9 	bl	80035d2 <TIM_ITRx_SetConfig>
      break;
 8003080:	e02c      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800308e:	461a      	mov	r2, r3
 8003090:	f000 fa70 	bl	8003574 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2160      	movs	r1, #96	@ 0x60
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fa99 	bl	80035d2 <TIM_ITRx_SetConfig>
      break;
 80030a0:	e01c      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ae:	461a      	mov	r2, r3
 80030b0:	f000 fa32 	bl	8003518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2140      	movs	r1, #64	@ 0x40
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fa89 	bl	80035d2 <TIM_ITRx_SetConfig>
      break;
 80030c0:	e00c      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4619      	mov	r1, r3
 80030cc:	4610      	mov	r0, r2
 80030ce:	f000 fa80 	bl	80035d2 <TIM_ITRx_SetConfig>
      break;
 80030d2:	e003      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
      break;
 80030d8:	e000      	b.n	80030dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a2f      	ldr	r2, [pc, #188]	@ (80031fc <TIM_Base_SetConfig+0xd0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00b      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314a:	d007      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a2c      	ldr	r2, [pc, #176]	@ (8003200 <TIM_Base_SetConfig+0xd4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_Base_SetConfig+0x30>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a2b      	ldr	r2, [pc, #172]	@ (8003204 <TIM_Base_SetConfig+0xd8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d108      	bne.n	800316e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a22      	ldr	r2, [pc, #136]	@ (80031fc <TIM_Base_SetConfig+0xd0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1f      	ldr	r2, [pc, #124]	@ (8003200 <TIM_Base_SetConfig+0xd4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0x62>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1e      	ldr	r2, [pc, #120]	@ (8003204 <TIM_Base_SetConfig+0xd8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a0d      	ldr	r2, [pc, #52]	@ (80031fc <TIM_Base_SetConfig+0xd0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f023 0201 	bic.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	611a      	str	r2, [r3, #16]
  }
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800

08003208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f023 0201 	bic.w	r2, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f023 0302 	bic.w	r3, r3, #2
 8003250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a1c      	ldr	r2, [pc, #112]	@ (80032d0 <TIM_OC1_SetConfig+0xc8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d10c      	bne.n	800327e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f023 0308 	bic.w	r3, r3, #8
 800326a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f023 0304 	bic.w	r3, r3, #4
 800327c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a13      	ldr	r2, [pc, #76]	@ (80032d0 <TIM_OC1_SetConfig+0xc8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d111      	bne.n	80032aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800328c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	621a      	str	r2, [r3, #32]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40012c00 	.word	0x40012c00

080032d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f023 0210 	bic.w	r2, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800330a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0320 	bic.w	r3, r3, #32
 800331e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a1d      	ldr	r2, [pc, #116]	@ (80033a4 <TIM_OC2_SetConfig+0xd0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10d      	bne.n	8003350 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800333a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800334e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a14      	ldr	r2, [pc, #80]	@ (80033a4 <TIM_OC2_SetConfig+0xd0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d113      	bne.n	8003380 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800335e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	40012c00 	.word	0x40012c00

080033a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0303 	bic.w	r3, r3, #3
 80033de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1d      	ldr	r2, [pc, #116]	@ (8003478 <TIM_OC3_SetConfig+0xd0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10d      	bne.n	8003422 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800340c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a14      	ldr	r2, [pc, #80]	@ (8003478 <TIM_OC3_SetConfig+0xd0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d113      	bne.n	8003452 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	621a      	str	r2, [r3, #32]
}
 800346c:	bf00      	nop
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40012c00 	.word	0x40012c00

0800347c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	031b      	lsls	r3, r3, #12
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003514 <TIM_OC4_SetConfig+0x98>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d109      	bne.n	80034f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	019b      	lsls	r3, r3, #6
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	40012c00 	.word	0x40012c00

08003518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f023 0201 	bic.w	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f023 030a 	bic.w	r3, r3, #10
 8003554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	621a      	str	r2, [r3, #32]
}
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	f023 0210 	bic.w	r2, r3, #16
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800359e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	031b      	lsls	r3, r3, #12
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	621a      	str	r2, [r3, #32]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr

080035d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f043 0307 	orr.w	r3, r3, #7
 80035f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	609a      	str	r2, [r3, #8]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003606:	b480      	push	{r7}
 8003608:	b087      	sub	sp, #28
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003620:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	431a      	orrs	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4313      	orrs	r3, r2
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	609a      	str	r2, [r3, #8]
}
 800363a:	bf00      	nop
 800363c:	371c      	adds	r7, #28
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 031f 	and.w	r3, r3, #31
 8003656:	2201      	movs	r2, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1a      	ldr	r2, [r3, #32]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	43db      	mvns	r3, r3
 8003666:	401a      	ands	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	431a      	orrs	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr

0800368c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e046      	b.n	8003732 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a16      	ldr	r2, [pc, #88]	@ (800373c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00e      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f0:	d009      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a12      	ldr	r2, [pc, #72]	@ (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a10      	ldr	r2, [pc, #64]	@ (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10c      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800370c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	4313      	orrs	r3, r2
 8003716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	40012c00 	.word	0x40012c00
 8003740:	40000400 	.word	0x40000400
 8003744:	40000800 	.word	0x40000800

08003748 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <memset>:
 800376c:	4603      	mov	r3, r0
 800376e:	4402      	add	r2, r0
 8003770:	4293      	cmp	r3, r2
 8003772:	d100      	bne.n	8003776 <memset+0xa>
 8003774:	4770      	bx	lr
 8003776:	f803 1b01 	strb.w	r1, [r3], #1
 800377a:	e7f9      	b.n	8003770 <memset+0x4>

0800377c <__libc_init_array>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	2600      	movs	r6, #0
 8003780:	4d0c      	ldr	r5, [pc, #48]	@ (80037b4 <__libc_init_array+0x38>)
 8003782:	4c0d      	ldr	r4, [pc, #52]	@ (80037b8 <__libc_init_array+0x3c>)
 8003784:	1b64      	subs	r4, r4, r5
 8003786:	10a4      	asrs	r4, r4, #2
 8003788:	42a6      	cmp	r6, r4
 800378a:	d109      	bne.n	80037a0 <__libc_init_array+0x24>
 800378c:	f000 f81a 	bl	80037c4 <_init>
 8003790:	2600      	movs	r6, #0
 8003792:	4d0a      	ldr	r5, [pc, #40]	@ (80037bc <__libc_init_array+0x40>)
 8003794:	4c0a      	ldr	r4, [pc, #40]	@ (80037c0 <__libc_init_array+0x44>)
 8003796:	1b64      	subs	r4, r4, r5
 8003798:	10a4      	asrs	r4, r4, #2
 800379a:	42a6      	cmp	r6, r4
 800379c:	d105      	bne.n	80037aa <__libc_init_array+0x2e>
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a4:	4798      	blx	r3
 80037a6:	3601      	adds	r6, #1
 80037a8:	e7ee      	b.n	8003788 <__libc_init_array+0xc>
 80037aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ae:	4798      	blx	r3
 80037b0:	3601      	adds	r6, #1
 80037b2:	e7f2      	b.n	800379a <__libc_init_array+0x1e>
 80037b4:	0800381c 	.word	0x0800381c
 80037b8:	0800381c 	.word	0x0800381c
 80037bc:	0800381c 	.word	0x0800381c
 80037c0:	08003824 	.word	0x08003824

080037c4 <_init>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	bf00      	nop
 80037c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ca:	bc08      	pop	{r3}
 80037cc:	469e      	mov	lr, r3
 80037ce:	4770      	bx	lr

080037d0 <_fini>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	bf00      	nop
 80037d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d6:	bc08      	pop	{r3}
 80037d8:	469e      	mov	lr, r3
 80037da:	4770      	bx	lr
